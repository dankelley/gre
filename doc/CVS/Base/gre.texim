\input texinfo @c -*-texinfo-*-


@c TRY: @inmargin{TEXT}

@iftex
@message{}
@message{gre.texi: overriding parskip, }
@global@parskip=3pt             @c space between paragraphs
@message{overriding baselineskip, }
@global@baselineskip=12pt       @c line spacing
@message{overriding lispnarrowing }
@c @global@lispnarrowing=0.2cm  @c left margin on examples
@global@widowpenalty=10000      @c Prevent widows
@global@clubpenalty=10000       @c Prevent orphans
@message{}
@end iftex
@comment %**start of header
@setfilename gre.info
@settitle Gre

@c EQUIVALENCE _PNAME_        @code{gre}
@c EQUIVALENCE _UCPNAME_      @code{Gre}
@c EQUIVALENCE _VERSION_      0.2.2
@c EQUIVALENCE _AUTHOR_EMAIL_ Dan.Kelley@@Dal.CA
@c EQUIVALENCE _GRI2GRE_      @code{gri2gre}

@c @smallbook
@c @kelleybook

@c %**end of header
@iftex
@finalout
@end iftex
@c @setchapternewpage odd
@setchapternewpage on
@titlepage
@title Gre
@comment Logo/begin
@tex
{
\midinsert
\vskip 4cm
%\special{psfile="./logo.ps" hoffset=-72 voffset=-72}
\endinsert
}
@end tex
@comment Logo/end
@subtitle A Program to Make Science Graphs
@subtitle Version _VERSION_
@subtitle 2000
@author Dan E. Kelley <_AUTHOR_EMAIL_>
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1997-2000 Dan Kelley
@sp 2
@end titlepage

@dircategory Scientific Applications
@direntry
* GRE: (gre).  Scientific graphics language.
@end direntry

@c HTML <map name="navigate_top">
@c HTML <area shape="rect" coords="581,2,599,24" href="Introduction.html">
@c HTML </map>
@c HTML <map name="navigate_bottom">
@c HTML <area shape="rect" coords="581,2,599,24" href="Introduction.html">
@c HTML </map>


@node   Top, Introduction, (dir), (dir)
@comment node-name, next, previous, up
@top Preface

@strong{Version}.  This describes _PNAME_ version _VERSION_, (c)
1997-2000 Dan Kelley
@c HTML <A HREF="mailto:Dan.Kelley@Dal.CA"> 
<_AUTHOR_EMAIL_>.
@c HTML </A>

@strong{Overview}.  _UCPNAME_ (rhymes with `flee') is an extensible
plotting language designed by a scientist, for scientists.  It can draw
x-y plots, contour plots, and image plots.

@strong{Manual}.  The _PNAME_ manual is on the web at 
@c HTML <a href="http://www.phys.ocean.dal.ca/~kelley/gre">
@file{http://www.phys.ocean.dal.ca/~kelley/gre}
@c HTML </a>
If _PNAME_ is on your machine, the manual is also at
@c HTML <a href="file:/usr/doc/gre-_VERSION_/html/gre1.html">
@file{/usr/doc/gre-_VERSION_/html/gre1.html}.
@c HTML </a>
The local copy is preferable because it refers to the version you are
using, but it's worth checking the web version once in a while to see
the new features.

@c History of  of gri commands converted (monitor_progress)
@c Use ./progress.gri with ./progress.dat to predict completion
@c date.
@c
@c  Date      percent  expected_completion_date
@c  7jul=188     9.0    ?
@c  8jul=189    10.7    ?
@c 12jul=193    13.5    ?
@c 30jul=211    16.1    1997 day 345
@c 13oct=286    18.1    2000 day 141
@c 14oct=287    24.9    1999 day 130
@c 25oct=298    26.5    1999 day  33
@c  5nov=309    29.6    1998 day 327
@c  5nov=310    30.2    1998 day 290
@c 16nov=320    31.8    1998 day 266
@c  7dec=341    32.4    1998 day 270 THIS AND ABOVE IN ERROR
@c 16dec=350    68.4    1998 day 261


@strong{History}.  _UCPNAME_ is the descendant of the 
@c HTML <a href="http://www.phys.ocean.dal.ca/~kelley/gri">
@code{Gri}
@c HTML </a>
language.  There are two phases of _PNAME_ development: (1) creation of
a working parser with perl-like capabilities and (2) emulation of all
relevant Gri commands.  Phase (1) is nearly complete.  Phase (2) is
about 2/3 percent complete, measured by the fraction of Gri commands
that work in _PNAME_.  The history chapter (see @pxref{History}) describes
the evolution of _PNAME_.


@cindex URL of ftp site
@cindex ftp site
@cindex source ftp site
@cindex linux version
@cindex RedHat linux version
@cindex RPM redhat linux distribution

Today, _PNAME_ is in daily use by the author and a handful of beta
testers.  Any experienced Gri user should be able to work with _PNAME_
quite easily, especially if they have some knowledge of the Perl
programming language.

@strong{Availability}. _UCPNAME_ is available for download at
@c HTML <A HREF="ftp://ftp.phys.ocean.dal.ca/users/kelley/gre">
@code{ftp://ftp.phys.ocean.dal.ca/users/kelley/gre}
@c HTML </A>

The source is in a file called @file{gre-N.N.N.tgz} (a tar/gzip file).
Here, @code{N.N.N} stands for the version number,
e.g. @file{gre-0.1.26.tgz}.  Compilation is simple; just type
@code{./configure} (answering any questions it asks) and then type
@code{make gre}.  Linux users using the RedHat or Debian distributions
need not bother with compilation since pre-compiles packages
(@file{gre-N.N.N-1.i386.rpm} and @file{gri-N.N.N.deb}) are provided.


@ifinfo
Chapters in this book:
@end ifinfo

@menu
* Introduction::                What Gre is
* Invoking::                    How to run Gre
* Grammar::                     Elements of grammar
* Commands in Gre::             Built-in commands
* Cookbook::                    Cookbook of examples
* Hints::                       Hints for programming
* History::                     How Gre has evolved
* Plans::                       Plans for Gre
* Bugs::                        Yes, Gre has bugs
* Concept Index::               The main index
* Index of Commands::           Index of built-in commands
* Index of Variables::          Index of built-in variables
@end menu


@c HTML <!-- newfile Introduction.html "Gre: introduction" "Introduction" -->

@node   Introduction, Invoking, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Introduction

@section What _PNAME_ is

_UCPNAME_ is a program for making science graphs.  It is a programming
language, not a GUI-based application.  _UCPNAME_ is analagous to
textual markup languages, such as @TeX{}, La@TeX{}, HTML, etc.  This
analogy points out the pros and cons of _PNAME_.  @emph{Pro}: users get
good control over the output graphs.  @emph{Con}: users must climb a
learning curve before using _PNAME_.

_UCPNAME_ is based on the @code{Gri}
@c HTML <a href="http://www.phys.ocean.dal.ca/~kelley/gri">
@code{Gri}
@c HTML </a>
language.  The main differences between the two are that _PNAME_ is
faster that _PNAME_ has a simpler, more powerful, syntax.  _UCPNAME_
syntax is based on the Perl language (@pxref{Perl programmers}).

@section A simple example

@c HTML <center>
@c HTML <IMG SRC="./figures/example1.gif" width=327 align=top>
@c HTML </center>

To try _PNAME_, do the following.

@enumerate

@item

@emph{Create a datafile} by inserting the following text into a file
called @file{example1.dat}:

@example
0.05 12.5
0.25 19
0.5  15
0.75 15
0.95 13
@end example
@noindent
This is a datafile.  Each line has an @code{(x,y)} pair.  If you don't
know what an @code{(x,y)} pair is, _PNAME_ may not be what you need for
your work!

@item
@emph{Create a command-file} by inserting the following text into in a
file called @file{example1.gre}:
@example
open example1.dat;
read columns x=1 y=2;
draw curve;
@end example
@noindent
This is a _PNAME_ program with three commands.  Commands are separated
by semicolons; in this case they are also separated by line separators,
but these are optional, as is all whitespace in a _PNAME_ program.  The
commands do the following things.

@enumerate
@item
The first command opens the indicated data-file.

@item
The second command reads @code{x} data from the first column and
@code{y} data from the second column.

@item
The third command indicates to draw the ``curve'' formed by the
@code{(x,y)} points provided in the data-file.  The curve comprises
connected line segments -- it is not smoothed, although the word
``curve'' might fool you that it is!

@end enumerate

Before the curve is drawn, axes will also be drawn (see below).

@item
@emph{Run} _PNAME_ by typing

@example
gre example1
@end example

to the operating system.  _UCPNAME_ assumes the commandfile has suffix
@file{.gre}, so there is no need to supply the suffix, although nothing
is lost if you do supply it.

@end enumerate

The three-line program makes use of many default _PNAME_ actions,
e.g. automatic drawing of axes and automatic selection of scales.  All
defaults may be overridden.  The following example illustrates how to
get _PNAME_ to call the y-axis @code{foo} instead of @code{y}, and to
make this axis range from @code{0} to @code{20}, labelled at intervals
of @code{10}, instead of @code{12} to @code{19} labelled at unit
intervals (the x-axis still being selected automatically by _PNAME_):

@example
open example1.dat;
read columns x=1 y=2;
set y name "foo";
set y axis 0 20 10;
draw curve;
@end example

@noindent
For more on @code{set y axis}, @xref{Set y axis}.

@strong{A note on execution order}.  Notice that these axis-control
commands were placed @emph{before} the @code{draw curve} command.  This
illustrates an important point: _PNAME_ executes the commands in a
command-file sequentially, starting at the top.  If, for example, the
commands for controlling the y-axis were placed @emph{after} the
@code{draw curve} command, they would have @emph{no} effect on this
graph.

@emph{Note for Matlab users:} The _PNAME_ convention of executing
commands in sequence agrees with most programming languages
@emph{except} Matlab.  In matlab, some commands work non-sequentially,
e.g.  an @code{axis} command can change an existing graph.  However,
other Matlab commands (basically, all non-drawing commands) act
sequentially ... imagine how confusing it would be if arithmetic
commands acted out of sequence, as some Matlab graphics commands do!

@image{./figures/example1}


@c HTML <!-- newfile Invoking.html "Gre: invoking" "Invoking" -->

@node   Invoking, Commandline options, Introduction, Top
@comment  node-name,  next,  previous,  up
@chapter Running _PNAME_

@strong{About this chapter}.
This chapter tells the details of running _PNAME_.  If you read the end
of the last chapter, you already know enough about running _PNAME_ to
skip ahead to the next chapter for now, planning to return here to read
the gory details if/when you need them.

@menu
* Commandline options::         Options for invoking Gre
* System startup file::         System ibrary file gre.cmd
* User startup file::           User library file .grerc
@end menu


@node   Commandline options, System startup file, Invoking, Invoking
@comment  node-name,  next,  previous,  up
@section Command-line options
@cindex commandline options

_UCPNAME_ usage is of the form:
@c QUIETEXAMPLE gre OPTIONS ARGS
@noindent
where @code{ARGS} often consists of just one argument, the name of a
command file containing _PNAME_ commands to be executed.

@subsection Command file
Although it is normal (and recommended) to provide a command-file name,
it is actually optional.  If no command-file is given, _PNAME_ reads
standard input for the commands to be done.  Thus, one might do
@example
cat cmd.gre | gre
@end example
@noindent
instead of
@example
gre cmd.gre
@end example
@noindent
If a PostScript file is created (i.e. if any drawing commands are done),
it will be named something like @file{gre-00.ps}, or @file{gre-01.ps},
etc (see below).  One might also type @code{gre} at the unix prompt, and
type commands in interactively.  This makes very little sense, however,
since the commands won't be parsed until end-of-file (control-D) is
typed, so you could type for minutes, get an error, and lose the work.

Usually the command file name ends in the suffix @file{.gre}.  Thus one
might invoke _PNAME_ as
@c QUIETEXAMPLE gre foo.gre
@noindent
to run the commands in the file @file{foo.gre}.  However, since the
suffix is the expected one, in this case you may also run _PNAME_ by the
command 
@c QUIETEXAMPLE gre foo
@noindent
and the default suffix will be assumed.

Most applications involve drawing something, and the result is a
PostScript file.  The name of this file is normally derived from the
command-file name by switching the suffix to @file{.ps}, e.g. the
example above creates a PostScript file called @file{foo.ps}, although
the use of the @code{-p} command-line argument permits the use of any
file-name (see below).  If no command-file is given, then standard-input
is used and the PostScript output is saved in a file called
@file{gre-00.ps}, or, if that file exists, @file{gre-01.ps}, etc.


@subsection Extra arguments
Any extra @code{ARGS} provided in addition to the command-file name are
stored into the built-in vector @code{$ARGV}.  Thus, invoking _PNAME_ as

@vindex @code{$ARGV}
@cindex @code{$ARGV} built-in variable
@c QUIETEXAMPLE gre foo.gre hi there
@noindent 
defines @code{$ARGV[0]} as the string @code{hi} and @code{$ARGV[1]} as
the string @code{there}.  This is often useful in _PNAME_ programs
designed to work on a series of datafiles; for more information
@xref{Vector System Variables}.


@subsection Options
@cindex @code{-h} commandline option (get help)
@cindex @code{--help} commandline option (get help)
@cindex commandline option @code{-h} or @code{--help}
@cindex help, getting information on commandline options with @code{-h} flag
@cindex debugging, controlling with @code{-D} commandline options
@cindex @code{-d} commandline option (debugging)
@cindex @code{--debug} commandline option (debugging)
@cindex commandline option @code{-d} or @code{--debug}
@cindex postscript file, how to control name
@cindex name of postscript file, setting
@cindex @code{-p} commandline option (name postscript file)
@cindex @code{--postscript} commandline option (name postscript file)
@cindex commandline option @code{-p} or @code{--postscript}
@cindex optimization, controlling
@cindex @code{-O} commandline option (set optimization level)
@cindex @code{--Optimize} commandline option (set optimization level)
@cindex commandline option @code{-O} or @code{--Optimize}
@cindex tracing of program compilation
@cindex @code{-t} commandline option (tracing)
@cindex @code{--trace} commandline option (tracing)
@cindex commandline option @code{-t} or @code{--trace}
@cindex warnings, how to control with @code{-t} commandline option
@cindex @code{-w} commandline option (control warnings)
@cindex @code{--warning} commandline option (control warnings)
@cindex commandline option @code{-w} or @code{--warnings}
@cindex version, how to determine with @code{-v} commandline option
@cindex @code{-v} commandline option (print version)
@cindex @code{--version} commandline option (print version)
@cindex commandline option @code{-v} or @code{--version}
@cindex executing small programs with @code{-e} commandline option
@cindex @code{-e} commandline option (execute string)
@cindex @code{--execute} commandline option (execute string)
@cindex commandline option @code{-e} or @code{--execute}
@cindex options (general), setting with @code{-e} commandline option
@cindex @code{-o} commandline option (general options)
@cindex @code{--option} commandline option (general options)
@cindex commandline option @code{-o} or @code{--option}
@cindex @file{gre.cmd}, controlling with @code{-L} commandline option
@cindex startup file @file{gre.cmd}, controlling with @code{-L} commandline option
@cindex library directory, setting with commandline option
@cindex @code{-L} commandline option (sets library directory)
@cindex @code{--Library} commandline option
@cindex commandline option @code{--Library}
@cindex @code{--which_library} commandline option
@cindex commandline option @code{--which_library}


Each option has both a long form (double-dash) and a short form
(single-dash).  The @file{OPTIONS} are as follows.

@table @code
@item -h
@item --help

Print a help message, mainly listing these commandline arguments.

@sp 4
@item -p psname
@item --postscript psname
Name the PostScript output file.

@sp 1
@item -d D
@item --debug D
Turn on various types of debugging:

@code{1} -> print information about commands as they are parsed

@code{2} -> print info when values are assigned to variables

@code{4} -> print info when the OS is used, e.g. to create temporary
files 

@code{8} -> while parsing, print any comments that start with @code{##}

@code{128} -> used by developer only; meaning changes without warning

@code{256} -> output 'yacc' info during parsing; only the _PNAME_
developer will find this useful


The value of @code{D} may be the sum of some of the above, or the
@code{-d} flag may be repeated, to yield several of the listed
behaviors.

@sp 1
@item -O opt
@item --Optimize opt

Set optimization level, @code{opt}, as defined in the following list.

@code{0} -> no optimization (the default)

@sp 1
@item -t
@item --trace
Turn on tracing during scanning (not during execution!).

@sp 1
@item -w
@item --warnings
Turn on warnings.

@sp 1
@item -v
@item --version
Display version information and exit successfully.

@sp 1
@item -e cmd
@item --execute cmd

Add indicated command(s) to a list of things to be done instead of
processing a command file.  Because the operating system will be reading
this information, @code{cmd} is normally enclosed in quote marks.  If
your command requires quote-marks, you will need to escape them,
e.g. the following will print a greeting before doing anything else.

@example
gre -e "print \"HELLO\\n\";"
@end example

@sp 1
@item -o OPTION
@item --option OPTION

Specify an OPTION chosen from this list:

@code{no_startup} -- do not use the system @code{gre.cmd} startup file
(only the developer should use this flag)

@code{no_grerc} -- do not use @file{~/.grerc} user-startup file

@sp 1
@item -L dir
@item --Library dir

Name directory where startup file @file{gre.cmd} is to be found,
over-riding the system default of @file{/usr/share/gre-_VERSION_}.
NOTE: Multiple @code{--Library} commands are allowed, the last one being
used and previous ones ignored.

@sp 1
@item --which_library
Reports which directory stores the library files, as set by the
@code{--Library} command or be default, and then exits.  This is
normally used only by the gre-mode.el Emacs mode.
@end table

@cindex aliases, commandline
@cindex commandline aliases
@cindex popt handling of commandline aliases

@emph{Commandline aliases}: Following an invention of the linux
community, _PNAME_ allows user-derived aliasing of commandline options.
Aliases may be stored in the user's @file{$HOME/.popt} file, or in a
system file (by default, @file{/etc/popt} on linux machines -- presently
unavailable on other machines).  See linux documentation for more on the
technique.  For example, the following entry in a @file{$HOME/.popt}
file might be used to set up large fonts and thick lines, for use in
generating graphs for projected overhead transparencies:

@example
alias gre --overhead -e "set font size 24;" -e "set line width 3;"
@end example
@noindent
With this, one need only to invoke _PNAME_ as 

@example
gre --overhead slide1.gre
@end example
@noindent
to get the desired effect.



@node   System startup file, User startup file, Commandline options, Invoking
@comment  node-name,  next,  previous,  up
@section System startup file @file{gre.cmd}

The _PNAME_ grammar is defined ``on the fly'' in a system startup file
named @file{gre.cmd}.  This file is used by _PNAME_ at startup time, and
it should not be edited by users.  It is normally located in directory
named @file{/usr/share/gre-_VERSION_}.

One may specify an alternate location of the @file{gre.cmd} file with
the @code{-L} commandline option @xref{Commandline options}.  If this is
specified, then the indicated directory is searched instead of the
default directory.

_PNAME_ will die immediately if it cannot locate the @code{gre.cmd} file.



@node   User startup file, Grammar, System startup file, Invoking
@comment  node-name,  next,  previous,  up
@section User startup file @file{~/.grerc}

Once the builtin grammar has been processed, _PNAME_ looks for any
additional enhancements the user may have created in his/her
personalized startup file, named @file{~/.grerc}.

@cindex personal library in ~/.grerc file
@cindex resource file in ~/.grerc file
@cindex grerc file
@cindex ~/.grerc file

Any commands you put in a file called @file{~/.grerc} will be parsed
before _PNAME_ parses your command file.  (This behaviour may be
turned off with the command-line argument @code{-o no_grerc}
(@ref{Commandline options}.)  Therefore @file{~/.grerc} is the place to
put code that you use often: it is your personal library of extensions
to _PNAME_.  Here is an example, from the author's @file{~/.grerc}
file, which draws a pretty blue underlay in the graph area, then draws
vertical and horizontal white lines at the labelled tic marks of the
axes, laying out a grid.  This is nice for creating slides for
projection in seminars.

@example
#* Draw color underlay for graph, with white grid lines
#* @@param $style =0 for light blue underlay
cmd draw axes_underlay ($;) @{  # $style
    if ($_[0] == 0) @{
        draw axes none;
        set color rgb 0.5 0.7 1;
        draw box filled $_xleft $_ybottom $_xright $_ytop;
        set color white;        
        set line width $_linewidth_axis / 1.25;
        for ($x = $_xleft; $x <= $_xright; $x += $_xinc) @{
            draw line from $x $_ybottom to $x $_ytop;
        @}
        for ($y = $_ybottom; $y >= $_ytop; $y += $_yinc) @{
            draw line from $_xleft $y to $_xright $y;
        @}
        set color black;
    @} else @{
        die "`draw axes underlay' style=$_[0] not allowed.";
    @}
@}
@end example

Sample use:
@example
# ... define the axes (perhaps by auto-scaling from data)
draw axes_underlay 0;
draw axes;
draw curve;
@end example

@strong{Caution}. The use of a startup file by _PNAME_ is a bit of a
missed blessing, as it is in other programs.  Compatibility problems can
arise when you change how commands work in your @file{~/.grerc} file
without changing all files that use these commands.  For example,
suppose you've written a great new command @code{draw whizbang} and put
it in your @file{~/.grerc} file.  If it's really useful, you'll probably
refer to it in dozens of your _PNAME_ programs.  But then, one day, you
may decide to change @code{draw whizbang} in some way that makes sense
for the work you're doing at the moment.  Unless you go back and change
all the _PNAME_ programs that were set up to use the old version of
@code{draw whizbang}, you'll find that the changes have broken old code.
This sort of compatibility error is not unique to _PNAME_; it occurs
with startup files of many programs.  The problem is that very few users
keep track of dependencies from program to program.  For this reason,
you should use caution when working with @file{~/.grerc}.  

For many purposes you'll find it better to work with numbered libraries
that you maintain and use with the @code{use} command @xref{Use}.




@c HTML <!-- newfile Grammar.html "Gre: grammar" "Grammar" -->

@node   Grammar, Parsing and execution phases, User startup file, Top
@comment  node-name,  next,  previous,  up
@chapter Gre Grammar

@strong{About this chapter}.  
This chapter describes the _PNAME_ grammar.  If you're familiar with the
Perl programming language, you can skim this chapter quickly.  Otherwise
you'll want to spend a little time here.

The _PNAME_ grammar is quite similar to the Perl grammar.  The main
difference is that _PNAME_ allows extension of the syntax through
the use of the @code{cmd} syntax to extend the language @xref{Cmd}.

@menu
* Parsing and execution phases::
* Command syntax::
* Reserved Words::
* Variables::
* Mathematics::
* Operations on Text::
* Flow of control::
@end menu


@node   Parsing and execution phases, Command syntax, Grammar, Grammar
@comment  node-name,  next,  previous,  up

@section Parsing and execution phases

@cindex performance, parsing speed
@cindex parsing, performance
@cindex benchmark, parsing

_PNAME_ procedes in two stages: parsing and execution.  During the first
phase, _PNAME_ commands are analysed and stored in a internal format
that can be executed quickly.  _PNAME_ does this in the same way as
other interpreted programs (e.g. Perl and Awk) do, by constructing an
execution tree.  (The theory of language parsing is beyond the scope of
this manual; see any good computing science reference library for more
information.)

As discussed previously @xref{System startup file}, _PNAME_ first
parses some system files, and then parses the user's commandfile.  The
latter may be standard-input, of course.

Execution begins once parsing is done.  (Perl experts will note that
Perl has the facility to do some execution before parsing is finished.
_PNAME_ doesn't need that since it lacks the Perl object-oriented
feature.) 

@emph{Some notes on efficiency}.

For most applications, parsing takes negligible time.  On a 300MHz
pentium-II machine, _PNAME_ parses/executes about 7000 lines per second,
as indicated by timing of code produced by the following perlscript:
@example
#!/usr/bin/perl -w
$n = 2e4;  # gives 40,000 lines to parse/execute
@@v = ("\$abc", "\$cdef", "\$abcd", "\$x", "\$yyy", "\$SS33");
for ($i = 0; $i < $n; $i++) @{
    print $v[(rand()*6)%6], " = ", $dict[(rand()*6)%6], " + 1e-8;\n";
    print $v[(rand()*6)%6], " = ", $dict[(rand()*6)%6], " - 1e-8;\n";
@}
@end example
Since
typical programs have fewer than a thousand lines (3-line user programs
aren't uncommon!), parsing is normally accomplished in times that are
comparable to that taken to scroll text in a text editor.

The speed of _PNAME_ execution is comparable to that of Perl for
Perl-like commands.  The design goal was that it be at most 10 times
slower than other interpreted languages such as Perl and Gawk.  However,
benchmarks indicate that performance is much better than that.  _PNAME_
is only about 30 percent slower than Perl, on perl-like code.

However, very few _PNAME_ programs consist solely of Perl-like code.
(If you want Perl, use Perl!)  The core _PNAME_ commands, e.g.
@code{read columns} and @code{draw contour} can deal with arbitrary data
sizes, and perform complicated calculations.  For any _PNAME_ program
that takes more than a second or so to run, such core commands consume
the lion's share of the execution time.  The core commands are written
in C++ code and run at machine speed, or roughly 30 times faster than
they might if they were written in an interpreted language like Perl.



@node   Command syntax, Reserved Words, Parsing and execution phases, Grammar
@comment  node-name,  next,  previous,  up

@section Command syntax

@cindex @code{;}, using to separate commands
@cindex semicolon, using to separate commands

The _PNAME_ grammar is closely patterned on that of the C and perl
programming language.  Commands (or statements) in _PNAME_ end in
semicolons; multiple commands are permitted on one line in a file, and a
command may extend over any number of lines.  Comments may be inserted
at the end of any line in a commandfile, following the "sharp" or "hash"
character @code{#}.
@c EXAMPLE something to start;           # not a real _PNAME_ command  ...\None thing; leads to another;  # ... and neither are these!\N



@node   Reserved Words, Variables, Command syntax, Grammar
@comment  node-name,  next,  previous,  up

@section Reserved Words in Gre Language

@cindex reserved words

Certain words may not be used within the syntax of newcommands.  These
special words fit into two categories: (1) "reserved words" which are
part of the _PNAME_ grammar itself and (2) names of built-in
functions. 

@itemize @bullet
@item
Words reserved for the grammar:
@code{and},
@code{bool},
@code{cmd},
@code{columns},
@code{do},
@code{else},
@code{eq},
@code{execute},
@code{for},
@code{foreach},
@code{if},
@code{last},
@code{my},
@code{ne},
@code{not},
@code{or},
@code{package} @xref{Package},
@code{return},
@code{unless},
@code{until},
@code{use} @xref{Use},
and
@code{while}.

@item
Words used in built-in functions:
@code{abs},
@code{acos},
@code{acosh},
@code{asin},
@code{asinh},
@code{atan},
@code{atanh},
@code{ceil},
@code{chop},
@code{cos},
@code{cosh},
@code{close},
@code{die},
@code{erf},
@code{erfc},
@code{exit},
@code{exp},
@code{exp10},
@code{floor},
@code{index},
@code{int},
@code{length},
@code{ln},
@code{log10},
@code{open},
@code{min},
@code{max},
@code{print},
@code{pow},
@code{pt_to_cm},
@code{read},
@code{rewind},
@code{sin},
@code{sinh},
@code{sqrt},
@code{split},
@code{sprintf},
@code{sub},
@code{substr},
@code{sw_alpha},
@code{sw_beta},
@code{sw_density},
@code{sw_freezing_temperature},
@code{sw_lapse_rate},
@code{sw_potential_temperature},
@code{sw_salinity},
@code{sw_spice},
@code{system},
@code{tan},
@code{tanh},
@code{text_ascent},
@code{text_descent},
@code{text_width},
@code{unlink},
@code{user_to_cm_x},
@code{user_to_cm_y},
and
@code{warn}.

@end itemize

You may not use any of the above words in a new command of your own
making.  (It is also a good idea to avoid using words which match names
of Perl functions, because a future version of _PNAME_ may well
emulate that function.)

Below is an example of the error you'll see if you try to use the name
of a built-in function inappropriately.  The example shows an attempt to
create a new command called @code{substr} using the @code{cmd} mechanism
@xref{Cmd}.  This is an error because the word @code{substr} conflicts
with the built-in function of that name.  For example, the code
@c QUIETEXAMPLE # Cannot use word 'substr' in a user command.\Ncmd substr ($) @{\N    print "$_[0]\n";\N@}
@noindent
generates several errors, the first of which is
@c QUIETEXAMPLE parse error at a.gre line 2.\N     cmd substr ($) @{

A similar error would arise if @code{substr} were replaced by the name
of any other built-in function, or any of the words reserved for the
grammar.


@node   Variables, User Variables, Reserved Words, Grammar
@comment  node-name,  next,  previous,  up
@section Variables

@menu
* User Variables::              Variables you define
* System Variables::            Variables Gre defines
@end menu


@node   User Variables, System Variables, Variables, Variables
@comment  node-name,  next,  previous,  up

@subsection User Variables
@cindex variables, user
@cindex user's variables

Variables may contain either numerical values or text values.  Variables
may be scalar or single-indexed vector.  The individual elements of
vectors is free to be numerical or textual, independent of other
elements.

The syntax for variables is very similar to the Perl language: variables
have dollarsign as the first character
@c EXAMPLE $unity = 1;                 # Store number in scalar\N$message = "_PNAME_ is cool"; # Store text

The contents to the right of the equals-sign may be any mathematical
expression, using perl-like (or C-like, if you prefer) notation.

You should @emph{not} use an underscore as the first character after the
dollarsign in variables of your own construction, because such names are
pre-defined by _PNAME_.  It is legal to modify these built-in
variables, but sometimes that makes no sense.  For example,
@code{$_version} is a variable that gives the version number of the
_PNAME_ program you are using -- you could modify it but I don't
know why you'd want to.  On the other hand, @code{$_x} and @code{$_y}
are the vectors storing the x- and y-columns of data.  You might well
want to modify these values, to create a curve to plot.

Any variables named in double-quoted strings are evaluated at run-time
and inserted into the string, as is done in the Perl language
@xref{Variable Interpolation In Quoted Strings}.

@cindex vector variables

Vector variables are indexed using square brackets notation, with the
first index being 0, as in most modern languages such C and perl.  The
construct @code{$#variable}, where @code{$variable} is a variable,
returns the index of the highest-numbered element in the variable if it
is a vector, or returns @code{-1} of it is a scalar.  Note that in this
special case the sharp-character @code{#} does not indicate a comment
string.
@c EXAMPLE $list[0] = 0;\N$list[1] = 1;\Nprint "Vector length is:", $#list, "\n";


@noindent
In this example, the @code{print} command is used to output the message
@code{Length of vector is 1}.  By now, Perl users will recognize the
close correspondance between _PNAME_ and Perl, as in the
@code{print} command used here @xref{Print}.

Individual indices may mix numeric and text values, e.g.
@c EXAMPLE $x[0] = 0;\N$x[1] = "zero";

Variable interpolation into strings is somewhat restricted, compared to
Perl.  Interpolation is only done if the index is a numerical constant
or a variable value, not if it is an expression:

@c EXAMPLE $x[0] = 0;\N$x[1] = 1;\N$i = 0;\Nprint "$x[0]\n";    # Legal\Nprint "$x[$i]\n";   # Legal, yielding same as above\Nprint "$x[$i+1]\n"; # *** Illegal -- expression in index ***


@cindex variables, vector and scalar with same name

You may use vector variables and scalar variables with identical names.
For example, it is legal to have both @code{$a} (a scalar) and
@code{$a[0]} (a vector element).

Assigning to user vector may be done in several ways.  The most common
way when dealing with data is with the @code{split} command.  To assign
without having to read data, you may assign to a list, as in 
@c EXAMPLE @@depths = (1, 10, 100);\Nprint "$depths[0] $depths[1] $depths[2] (expect '1 10 100')\n";

@c TESTFILE tst-variables
@c TESTFILE tst-variables2



@node   System Variables, Scalar System Variables, User Variables, Variables
@comment  node-name,  next,  previous,  up


@subsection System Variables

@menu
* Scalar System Variables::     Scalars
* Vector System Variables::     Vectors
@end menu

@cindex variables, system
@cindex system variables



@node   Scalar System Variables, Vector System Variables, System Variables, System Variables
@comment  node-name,  next,  previous,  up

@subsubsection Scalar system variables


@vindex @code{$_}
@vindex @code{$_arrow_size}
@vindex @code{$0}
@vindex @code{$_command_file}
@vindex @code{$_time}
@vindex @code{$_exit_status}
@vindex @code{$_fontsize}
@vindex @code{$_graylevel}
@vindex @code{$_missingvalue}
@vindex @code{$_symbolsize}
@vindex @code{$_linewidth}
@vindex @code{$_linewidth_axis}
@vindex @code{$_linewidth_symbol}
@vindex @code{$_xmargin}
@vindex @code{$_xsize}
@vindex @code{$_xleft}
@vindex @code{$_xright}
@vindex @code{$_ymargin}
@vindex @code{$_ysize}
@vindex @code{$_ytop}
@vindex @code{$_ybottom}
@vindex @code{$_eof}
@vindex @code{$_version}
@cindex @code{$_arrow_size},
@cindex @code{$0}
@cindex @code{$_command_file}
@cindex @code{$_time}
@cindex @code{$_exit_status}
@cindex @code{$_fontsize}
@cindex @code{$_graylevel}
@cindex @code{$_missingvalue}
@cindex @code{$_symbolsize}
@cindex @code{$_linewidth}
@cindex @code{$_linewidth_axis}
@cindex @code{$_linewidth_symbol}
@cindex @code{$_xmargin}
@cindex @code{$_xsize}
@cindex @code{$_xleft}
@cindex @code{$_xright}
@cindex @code{$_ymargin}
@cindex @code{$_ysize}
@cindex @code{$_ytop}
@cindex @code{$_ybottom}
@cindex @code{$_eof}
@cindex @code{$_version}
@cindex command file, named in @code{$_command_file} variable
@cindex @code{$_command_file} variable (names the command file)
@code{$_} (may also be vector),
@code{$0} (name of command file, also stored in @code{$_command_file}),
@code{$_arrow_size},
@code{$_command_file} (name of command file, also stored in @code{$0}),
@code{$_time} (date and time when this Gre job was started),
@code{$_exit_status},
@code{$_fontsize},
@code{$_graylevel},
@code{$_missingvalue},
@code{$_symbolsize},
@code{$_linewidth},
@code{$_linewidth_axis},
@code{$_linewidth_symbol},
@code{$_xmargin},
@code{$_xsize},
@code{$_xleft},
@code{$_xright},
@code{$_ytop},
@code{$_ybottom},
@code{$_ysize},
@code{$_eof},
and
@code{$_version}.


@node   Vector System Variables, Mathematics, Scalar System Variables, System Variables
@comment  node-name,  next,  previous,  up
@subsubsection Vector system variables


@vindex @code{$_x}
@vindex @code{$_y}
@vindex @code{$_z}
@vindex @code{$_u}
@vindex @code{$_v}

@cindex @code{$_x} vector, to hold x data
@cindex @code{$_y} vector, to hold y data
@cindex @code{$_z} vector, to hold z data
@cindex @code{$_u} vector, to hold u data
@cindex @code{$_v} vector, to hold v data
@cindex @code{$ARGV} vector, to hold command-line arguments

@code{$_} (used as in Perl, read by the @code{<>} operator),
@code{$_x} (holds x data),
@code{$_y} (holds y data),
@code{$_z} (holds z data, normally for contouring),
@code{$_u} (holds u data, normally for arrow plots),
and
@code{$_v} (holds v data, normally for arrow plots).

In addition, if the command-line arguments used in invoking _PNAME_
contained extra items beyond the name of
the command file, these items are stored in the vector @code{$ARGV} (as
in Perl).  For example, the _PNAME_ code (in @file{foo.gre} say)
@example
for ($i = 0; $i <= $#ARGV; $i++) @{
    open(IN, $ARGV[$i]) or die;
    # ... do stuff with this file
    close(IN);
@}
@end example
@noindent invoked with the command
@example
gre foo.gre station1.dat station2.dat station3.dat
@end example
@noindent will do "stuff" on each of the indicated data-files.

@page

@node   Mathematics, Builtin numerical constants, Vector System Variables, Grammar
@comment  node-name,  next,  previous,  up

@section Mathematics
@cindex mathematics

The syntax of mathematical expressions in _PNAME_ is identical to
that in Perl, very close to Gawk, and quite close to C and FORTRAN.

@c TESTFILE tst-math



@menu
* Builtin numerical constants::
* Precision used in calculations::
* Efficiency considerations::
* Underline convention in numerical constants::
* Convention on division of constants::
* Algebraic operators::
* Comparison operators::
* Mathematical subroutines::
@end menu

@node   Builtin numerical constants, Precision used in calculations, Mathematics, Mathematics
@comment  node-name,  next,  previous,  up
@subsection Builtin mathematical constants

@cindex @code{$_pi}, mathematical constant
@cindex @code{$_e}, mathematical constant
@cindex mathematical constants, pi, e, etc

_PNAME_ has a few mathematical constants built in as variables:

@c QUIETEXAMPLE @code{$_pi} = 3.14 ...# geometrical quantity Pi\N@code{$_e}  = 2.72 ...# base of natural logarithms




@node   Precision used in calculations, Efficiency considerations, Builtin numerical constants, Mathematics
@comment  node-name,  next,  previous,  up
@subsection Precision used in calculations

@cindex floating point operations
@cindex integer operations
@cindex precision of calculations

Calculations in _PNAME_ are done in double-precision.  This yields about
15 digits of precision.  For example, 
@c QUIETEXAMPLE printf "%.30f\n", 1/6;
prints
@c QUIETEXAMPLE 0.166666666666666657414808128124

The column data are stored in single-precision, not double-precision.
In practice this seldom makes any difference since data are seldom
reported to 15 digit precision.  (If enough users ask, the _PNAME_
author will switch to double-precision for the column data also.)


@node   Efficiency considerations, Underline convention in numerical constants, Precision used in calculations, Mathematics
@comment  node-name,  next,  previous,  up
@subsection Efficiency considerations

@cindex arithmetic expressions (constant)
@cindex constant arithmetic expressions
@cindex efficiency considerations, arithmetic expressions
@cindex optimization, constant arithmetic expressions

Constant arithmetic expressions are computed at compile time, not at run
time, so you needn't worry about simplifying such expressions even if
they are within a loop that is executed many times.  Thus, you won't
suffer a runtime performance degradation by using @code{2/3} in an
expression instead of @code{0.666}, and you'll get better accuracy
(unless you are patient enough to type the 12 or so digits of accuracy
used in Gre).




@node   Underline convention in numerical constants, Convention on division of constants, Efficiency considerations, Mathematics
@comment  node-name,  next,  previous,  up
@subsection Underline convention in numerical constants

@cindex underline character in numerical constants
@cindex @code{_} character in numerical constants
@cindex numerical constants and @code{_} character
@cindex thousands groupings in constants, with @code{_}

For convenience, it is permitted to use an underline character
(@code{_}) within numerical constants, to separate "thousands"
groupings.  Thus you can write @code{$x=1_000_000;} instead of
@code{$x=1000000;}, which is quite a lot harder to read.  All @code{_}
characters in constants are skipped.  Thus you could, if you wanted,
write a constant as @code{1_00_00}.  However, _PNAME_ will issue a
compile-time warning for such constructs, because it wants the
underscores to be spaced at intervals of three digits.  The number will
be accepted even if a warning is given.  (Perl users will note that
_PNAME_ is pickier than Perl, since Perl only issues this type of
warning if the warning flag is turned on.)



@node   Convention on division of constants, Algebraic operators, Underline convention in numerical constants, Mathematics
@comment  node-name,  next,  previous,  up
@subsection Convention on division of constants
@cindex integer arithmetic
@cindex arithmetic, on integers
@cindex mathematics, on integers

One important difference from C (and FORTRAN) is that all constants are
considered to be @emph{floating point} in _PNAME_.  In this regard,
_PNAME_ follows the convention used in Perl, Awk, and other modern
interpreted languages.  Thus the statement
@c QUIETEXAMPLE $x = 1/2;
assigns the value @code{0.5} to the variable.  In FORTRAN and in C, the
lack of decimal points would force integer arithmetic and the result
would be @code{0}.  As a test of the utility of the FORTRAN convention,
ask 10 programmers to indicate the value of @code{-1/2}, and see if they
all agree on whether it is @code{-1} or @code{0}.  Note that the
@code{floor()} function may be used to convert floating-point values
into integer values @xref{Builtin functions that take one argument}.
This function, borrowed from C, produces values that 10 programmers
would probably agree on!


@node   Algebraic operators, Comparison operators, Convention on division of constants, Mathematics
@comment  node-name,  next,  previous,  up
@subsection Operator precedence

@cindex operator precedence
@cindex order of precedence of operators
@cindex precedence of operators
@cindex mathematical operators, order of precedence
@cindex arithmetic
@cindex @code{**} exponentiation operator
@cindex exponentiation with @code{**} operator

Within mathematical expressions, the usual operator @emph{precedence} is
used.  For example, multiplications are done before additions.  The
order of precedence is, from order of lowest precedence to highest: (1)
addition (@code{+}) and subtraction (@code{-}); (2) multiplication
(@code{*}) and division (@code{/}); (3) and exponentiation (@code{**}).
Operators of equal precedence, such as addition and subtraction, are
done in left-to-right order.  Parentheses may be used to override these
operator precedence rules.

@node   Comparison operators, Mathematical subroutines, Algebraic operators, Mathematics
@comment  node-name,  next,  previous,  up
@subsection Comparison operators
@cindex comparing numberical values
@cindex numerical values, comparing

Along with the normal algebraic operators, various operators are
provided to compare numerical values.  For example, @code{($a < $b)} is
an expression which has the value @code{1} if variable @code{$a} is less
than variable @code{$b}, and zero otherwise.  The comparison operators
are mostly used in conditional and looping statements.  They are:
@code{<} (less than),
@code{<=} (less than or equal to),
@code{>} (greater than),
@code{>=} (greater than or equal to),
@code{==} (equal to), and
@code{!=} (not equal to).

@cindex boolean operations
@cindex logical operations
@cindex @code{||}, boolean 'or' operator
@cindex @code{or}, boolean operator
@cindex @code{&&}, boolean 'and' operator
@cindex @code{and}, boolean operator
@cindex @code{!}, boolean 'not' operator
@cindex @code{not}, boolean operator
@cindex @code{?}, question operator
@cindex colon operator
@cindex question-mark operator
@cindex colon operator

Logical operations, also called boolean operations, are done with
@code{||} or @code{or} (for logical "or"), @code{&&} or @code{and} (for
logical "and") and @code{!} or @code{not} (for logical negation).

The question-operator, borrowed from C-like languages, has the form
@code{expr_test ? expr_true : expr_false}.  This construct reduces to a
single value, equal to @code{expr_true} if the test-expression
@code{expr_test} is true, or to @code{expr_false} otherwise.  Thus one
might say @code{$min = ($a < $b) ? $a : $b;} to assign to @code{$min}
the value of @code{$a} or @code{$b}, whichever is smaller.  The
expressions after the @code{?} character may be numerical or textual
(and needn't be of the same type); _PNAME_ will appropriately
assign a type to the result depending on whether the "true" or "false"
branch is selected by the test value.

As in most other C-like languages, logical expressions are evaluated
from left to right, with evaluation stopping as soon as the value can be
determined.  For example, consider the expression 
@c QUIETEXAMPLE 0 && die "will not print\n";

@noindent (Aside: since the expression is surely zero regardless of the return
value for the @code{die} command, the @code{die} command will not be
executed.)  

The same rule applies to the "or" operator.  In fact, it is very common
(and highly recommended) to use this in checking for whether files could
be opened, e.g.
@c QUIETEXAMPLE open(IN, "input_file") || die "Cannot open file 'input_file'\n";



@c TESTFILE tst-string-comp


@node   Mathematical subroutines, Builtin functions that take no arguments, Comparison operators, Mathematics
@comment  node-name,  next,  previous,  up
@subsection Mathematical subroutines

@cindex @code{()} for subroutines
@cindex parentheses, needed for subroutines
@cindex subroutines

Calling mathematical subroutines is conventional, with parentheses
around the arguments in almost all cases.  Note that _PNAME_ departs
from Perl in this.  Perl lets you omit the parentheses in cases where
the parser can figure it out based on precidence rules.  That's okay if
you know the rules, but pretty confusing otherwise!

The "in almost all cases" phrase indicates that the parenthesis are
optional in @code{die} and a few of other commands, covering cases in
which almost no Perl programmers would use parenthesis.  Thus, you can
write
@c QUIETEXAMPLE die "Cannot handle negative values" unless $x > 0;
instead of
@c QUIETEXAMPLE die("Cannot handle negative values") unless $x > 0;

However, _PNAME_ won't understand
@c QUIETEXAMPLE $x = sin 0;  # broken
when you mean
@c QUIETEXAMPLE $x = sin(0);  # okay
The reason is that the former convention is, simply, that the former
(perl-ish) convention has always been confusing to the author, who would
have to run a test program to figure out what value would be returned by
the following
@c QUIETEXAMPLE print sin 0 + 3.14159;  # Illegal in Gre but ok in Perl
Granted, Perl experts can parse the above statement easily, and predict
the answer (pop quiz: is it zero or Pi), but users of other languages
would have to guess, so _PNAME_ has chosen to disallow such syntax, and
to require that sine, cosine, and other subroutines be called with
parenthesis.


@menu
* Builtin functions that take no arguments::
* Builtin functions that take one argument::
* Builtin functions that take two arguments::
* Builtin functions that take more than two arguments::
* Builtin functions for seawater properties:: Properties of seawater
* Builtin functions for map projections::     Working with 'proj' OS command
* User Subroutines::                          How to define new functions
@end menu


@node   Builtin functions that take no arguments, Builtin functions that take one argument, Mathematical subroutines, Mathematical subroutines
@comment  node-name,  next,  previous,  up

@subsubsection Builtin Functions that take no arguments

@cindex random numbers
@cindex seed for random numbers
@cindex @code{rand()} subroutine
@cindex gaussian distribution, generating random numbers in
@cindex uniform distribution, generating random numbers in
@cindex statistics, generating random numbers
@cindex @code{rand_gaussian()} subroutine
@cindex random number generators, @code{rand()} and @code{rand_gaussian()}
@cindex @code{version()} subroutine

@itemize @bullet
@item
@findex @code{rand()}
@cindex @code{rand()}
@code{rand()} returns a pseudo-random number uniformly distributed
between 0 and 1.  See also @code{srand(x)};

This subroutine is based on the system routine @code{drand48}, and
therefore the pseudo-random sequence will be the same each time _PNAME_
is invoked; to get a different sequenct use @code{srand($x)} where
@code{$x} is an integer.

@item
@findex @code{rand_gaussian()}
@cindex @code{rand_gaussian()}
@code{rand_gaussian()} returns a pseudo-random number from a Gaussian
distribution with mean of 0 and standard deviation of 1.  See also
@code{srand(x)};

To create a random number @code{$r} with a mean of @code{$M} and a
standard-deviation of @code{$S}, use
@c QUIETEXAMPLE $r = $S * rand_gaussian() + $M;

This subroutine is based on the system routine @code{drand48}, and
therefore the pseudo-random sequence will be the same each time _PNAME_
is invoked; to get a different sequenct use @code{srand($x)} where
@code{$x} is an integer.

@item
@findex @code{version()}
@cindex @code{version()}
@code{version()} returns the version number of _PNAME_ in numeric form.
For example, @code{version()} returns @code{0.0115} for version
@code{0.1.15} of _PNAME_.  The value in double-dotted textual form
(e.g. @code{0.1.15}) is available in the @code{$_version} builtin
variable.
@end itemize

@c TESTFILE tst-random

@node   Builtin functions that take one argument, Builtin functions that take two arguments, Builtin functions that take no arguments, Mathematical subroutines
@comment  node-name,  next,  previous,  up

@subsubsection Builtin Functions that take one argument

@itemize @bullet
@item
@findex @code{abs(x)}
@cindex @code{abs(x)} subroutine
@code{abs(x)} returns absolute value of @code{x}.
@item
@findex @code{acos(x)}
@cindex @code{acos(x)} subroutine
@code{acos(x)} returns inverse cosine of @code{x}, in radians.
@item
@findex @code{acosh(x)}
@cindex @code{acosh(x)} subroutine
@code{acosh(x)} returns inverse hyperbolic cosine of @code{x}.
@item
@findex @code{asin(x)}
@cindex @code{asin(x)} subroutine
@code{asin(x)} returns inverse sine of @code{x}, in radians.
@item
@cindex hyperbolic sine, cosine, tangent
@findex @code{asinh(x)}
@cindex @code{asinh(x)} subroutine
@code{asinh(x)} returns inverse hyperbolic sine of @code{x}.
@item
@findex @code{atan(x)}
@cindex @code{atan(x)} subroutine
@code{atan(x)} returns inverse tangent of @code{x}, in radians.
@item
@findex @code{atanh(x)}
@cindex @code{atanh(x)} subroutine
@code{atanh(x)} returns inverse hyperbolic cosine of @code{x}.
@item
@findex @code{ceil(x)}
@cindex @code{ceil(x)} subroutine
@code{ceil(x)} returns smallest integer which is larger than @code{x}.
@item
@findex @code{cm_to_pt(x)}
@cindex @code{cm_to_pt(x)} subroutine
@code{cm_to_pt(x)} returns centimeters corresponding to indicated value
in PostScript "points".
@item
@findex @code{cos(x)}
@cindex @code{cos(x)} subroutine
@code{cos(x)} returns cosine of @code{x}, where @code{x} is in radians.
@item
@findex @code{cosh(x)}
@cindex @code{cosh(x)} subroutine
@code{cosh(x)} returns hyperbolic cosine of @code{x}.
@item
@findex @code{exp(x)}
@cindex @code{exp(x)} subroutine
@code{exp(x)} returns 'e' raised to indicated power.
@item
@findex @code{exp10(x)}
@cindex @code{exp10(x)} subroutine
@code{exp10(x)} returns 10 raised to indicated power.
@item
@findex @code{erf(x)}
@cindex @code{erf(x)} subroutine
@code{erf(x)} returns error-function of indicated argument, i.e. 
@code{2/sqrt(pi)*integral from 0 to x of exp(-t*t) dt}.
@item
@findex @code{erfc(x)}
@cindex @code{erfc(x)} subroutine
@code{erfc(x)} returns complementary error-function of indicated
argument, i.e. @code{1-erf(x)}.
@item
@findex @code{floor(x)}
@cindex @code{floor(x)} subroutine
@code{floor(x)} returns largest integer which is smaller than x.
@item
@findex @code{int(x)}
@cindex @code{int(x)} subroutine
@code{int(x)} returns integer part of @code{x}, e.g. @code{2==int(2.1)}
and @code{-2==int(-2.1)} both apply.
@item
@findex @code{ln(x)}
@cindex @code{ln(x)} subroutine
@code{ln(x)} returns natural logarithm, that is log base e.
@item
@findex @code{log10(x)}
@cindex @code{log10(x)} subroutine
@code{log10(x)} returns log base 10.
@item
@findex @code{open()}
@cindex @code{open()} subroutine
@code{open()} opens a file for reading.
@item
@findex @code{print}
@cindex @code{print} subroutine
@code{print} prints something @xref{Print}.
@item
@findex @code{printf}
@cindex @code{printf} subroutine
@code{printf} prints something @xref{Printf}.
@item
@findex @code{pt_to_cm(x)}
@cindex @code{pt_to_cm(x)} subroutine
@code{pt_to_cm(x)} is opposite of cm_to_pt.
@item
@findex @code{rewind()}
@cindex @code{rewind()} subroutine
@code{rewind()} rewinds a file.
@item
@findex @code{sin(x)}
@cindex @code{sin(x)} subroutine
@code{sin(x)} returns sine of @code{x}, where @code{x} is in radians.
@item
@findex @code{sinh(x)}
@cindex @code{sinh(x)} subroutine
@code{sinh(x)} returns hyperbolic sine of @code{x}.
@item
@findex @code{sqrt(x)}
@cindex @code{sqrt(x)} subroutine
@code{sqrt(x)} returns square root of @code{x}.
@item
@findex @code{srand(x)}
@cindex @code{srand(x)} subroutine
@code{srand(x)} sets seed for random number, based on integer @code{x},
returning 1.  See also @code{rand()} and @code{rand_gaussian()}
@item
@findex @code{tan(x)}
@cindex @code{tan(x)} subroutine
@code{tan(x)} returns tangent of @code{x}, where @code{x} is in radians.
@item
@findex @code{tanh(x)}
@cindex @code{tanh(x)} subroutine
@code{tanh(x)} returns hyperbolic tangent of @code{x}.
For example, here is how you might show a graph of the hyperbolic tangent:
@example
# Graph tanh(x) for x ranging from -3 to 3.
$i = 0;
for ($x = -3; $x <= 3; $x += 0.1) @{
    $_x[$i] = $x;
    $_y[$i] = tanh($x);
    $i++;
@}
set y axis -1 1 1 0.1;
set x axis -3 3 1;
set x name "X";
set y name "tanh(X)";
draw curve;
@end example

@item
@findex @code{length("string")}
@cindex @code{length("string")} subroutine
@cindex length of a string
@cindex string, length
@code{length("string")} returns the number of characters in the string.
(Perl users note: this subroutine requires an argument; unlike Perl, it
does not default to an argument of @code{$_} if called with no argument.)

@item
@findex @code{text_ascent("string")}
@cindex @code{text_ascent("string")} subroutine
@cindex ascent of text
@cindex text, ascent
@code{text_ascent("string")} returns the ascent, in centimeters, for the
present font.  The argument is ignored and this subroutine returns the
descent for the font (i.e. the maximal descent for any character that
can be drawn).  _PNAME_ consults an internal table of PostScript font
metrics to do the calculation.
@item
@findex @code{text_descent("string")}
@cindex @code{text_descent("string")} subroutine
@cindex descent of text
@cindex text, descent
@code{text_descent("string")} returns the descent, in centimeters, for
the present font.  Actually, the argument is ignored and this subroutine
returns the descent for the font (i.e. the maximal descent for any
character that can be drawn).  _PNAME_ consults an internal table of
PostScript font metrics to do the calculation.
@item
@findex @code{text_width("string")}
@cindex @code{text_width("string")} subroutine
@cindex width of text
@cindex text, finding width/ascent/descent
@code{text_width("string")} returns the width, in centimeters, that the
indicated string would occupy if drawn in present font size.
@item
@findex @code{user_to_cm_x(xuser)}
@cindex @code{user_to_cm_x(xuser)} subroutine
@code{user_to_cm_x(xuser)} returns page x-location of the indicated
x-value.  That is, it returns the distance from the indicated point, if
it were plotted, to the left-hand side of the page.
@item
@findex @code{user_to_cm_y(yuser)}
@cindex @code{user_to_cm_y(yuser)} subroutine
@code{user_to_cm_y(yuser)} returns page y-location of the indicated
y-value.  That is, it returns the distance from the indicated point, if
it were plotted, to the bottom side of the page.

@end itemize


@node   Builtin functions that take two arguments, Builtin functions that take more than two arguments, Builtin functions that take one argument, Mathematical subroutines
@comment  node-name,  next,  previous,  up

@subsubsection Builtin Functions that take two arguments

@itemize @bullet
@item
@findex @code{atan2(x,y)}
@cindex @code{atan2(x,y)} subroutine
@code{atan2(x,y)} returns arctangent of slope @code{y/x}.
@item
@findex @code{max(x1,x2)}
@cindex @code{max(x1,x2)} subroutine
@code{max(x1,x2)} returns @code{x1} or @code{x2}, whichever is larger.
@item
@findex @code{min(x1,x2)}
@cindex @code{min(x1,x2)} subroutine
@code{min(x1,x2)} returns @code{x1} or @code{x2}, whichever is smaller.
@item
@findex @code{pow(x,y)}
@cindex @code{pow(x,y)} subroutine
@code{pow(x,y)} returns @code{x} raised to power @code{y}, just as
the expression@code{x**y} does.
@end itemize


@c TESTFILE tst-builtin


@node   Builtin functions that take more than two arguments, Builtin functions for seawater properties, Builtin functions that take two arguments, Mathematical subroutines
@comment  node-name,  next,  previous,  up

@subsubsection Builtin Functions that take more than two arguments


@itemize @bullet
@item
@findex @code{unlink()}
@cindex @code{unlink} subroutine
@cindex files, deleting with @code{unlink}
@cindex files, removing with @code{unlink}
@cindex files, unlinking
@cindex deleting files with @code{unlink}
@cindex removing files with @code{unlink}
@code{unlink("file1", ...)} deletes indicated file(s), and returns number of files successfully deleted.
@end itemize



@node   Builtin functions for seawater properties, Builtin functions for map projections, Builtin functions that take more than two arguments, Mathematical subroutines
@comment  node-name,  next,  previous,  up

@subsubsection Subroutines for physical properties of seawater

The subroutines for physical properties of seawater have names starting
with @code{sw} (for SeaWater).  The salinity unit, @code{PSU}, is
'practical salinity unit', basically a synonym for PPT (parts per
thousand).  The pressure unit, @code{dbar}, is decibar (roughly
corresponding to the pressure increase for one meter of depth increase).

@cindex physical properties of seawater
@cindex seawater, physical properties
@cindex density of seawater
@cindex potential temperature of seawater
@cindex equation of state for temperature


@itemize @bullet
@item
@findex @code{sw_alpha(S, T, p)}
@cindex @code{sw_alpha(S, T, p)} subroutine
@code{sw_alpha(S, T, p)}
-- seawater thermal expansion coefficient [1/degC] in terms of salinity
[PSU], in-situ temperature T [degC] and pressure p [dbar], by
numerically differentiating the sw_density() function with a 1e-5 degC
first-difference. 
@item
@findex @code{sw_beta(S, T, p)}
@cindex @code{sw_beta(S, T, p)} subroutine
@code{sw_beta(S, T, p)}
-- seawater haline contraction coefficient [1/PSU] in terms of salinity [PSU], in-situ temperature T [degC] and pressure p [dbar], by
numerically differentiating the sw_density() function with a 1e-5 PSU
first-difference. 
@item
@findex @code{sw_density(S, T, p)}
@cindex @code{sw_density(S, T, p)} subroutine
@code{sw_density(S, T, p)}
-- seawater density [kg/m3] in terms of salinity [PSU], in-situ temperature T [degC] and pressure p [dbar]
@item
@findex @code{sw_freezing_temperature(S, p)}
@cindex @code{sw_freezing_temperature(S, p)} subroutine
@code{sw_freezing_temperature(S, p)}
-- seawater freezing temperature [degC] in terms of salinity [PSU] and pressure p [dbar]
@item
@findex @code{sw_lapse_rate(S, t, p)}
@cindex @code{sw_lapse_rate(S, t, p)} subroutine
@code{sw_lapse_rate(S, T, p)}
-- seawater lapse-rate [degC/m] in terms of salinity [PSU], in-situ temperature T [degC] and pressure p [dbar]
@item
@findex @code{sw_potential_temperature(S, T, p, pref)}
@cindex @code{sw_potential_temperature(S, T, p, pref)} subroutine
@code{sw_potential_temperature(S, T, p, pref)}
-- seawater potential temperature [degC] in terms of salinity [PSU],
in-situ temperature T [degC], in-situ pressure p [dbar] and reference pressure pref [dbar]
@item
@findex @code{sw_salinity (C, T, p)}
@cindex @code{sw_salinity (C, T, p)} subroutine
@code{sw_salinity (R, T, p)}
-- seawater salinity [PSU] in terms of conductivity ratio R [unitless], in-situ temperature T [degC] and pressure p [dbar]
@item
@findex @code{sw_spice (C, T, p)}
@cindex @code{sw_spice (C, T, p)} subroutine
@code{sw_spice (S, T, p)}
-- `spice' function as defined by Jackett and McDougall (1985) Deep-Sea
Research 32, 1195-1207, in terms of salinity [PSU], in-situ temperature
T [degC] and pressure p [dbar]

@end itemize


@c TESTFILE tst-sw


@node   Builtin functions for map projections, User Subroutines, Builtin functions for seawater properties, Mathematical subroutines
@comment  node-name,  next,  previous,  up
@subsubsection Subroutines for map projections

@cindex map projections
@cindex latitude
@cindex longitude
@cindex @code{set map projection} system command
@findex @code{proj_lonlat_to_x($lon, $lat)}
@cindex @code{proj_lonlat_to_x($lon, $lat)} subroutine
@findex @code{proj_lonlat_to_y($lon, $lat)}
@cindex @code{proj_lonlat_to_y($lon, $lat)} subroutine

@c QUIETEXAMPLE proj_lonlat_to_x($lon, $lat)\Nproj_lonlat_to_y($lon, $lat)

The above subroutines are provided to convert world-coordinate (lon/lat)
pairs to geometrical coordinates, according to a map projection
specified by the @code{set map projection} command 
@xref{Set map projection}.

In the argument list, @code{lon} appears before @code{lat}, although a
geographer might have expected the reverse order.  Longitudes are
measured positive to the east, so that degrees-west are indicated by
negative @code{lon} values.

@code{proj_lonlat_to_x($lon, $lat)} returns x-component after map
projection of indicated ($lon, $lat) pair, after passing through the
appropriate map projection transformation routine.  The y-value is
returned by the corresponding subroutine @code{proj_lonlat_to_y($lon,
$lat)}.




@node   User Subroutines, Operations on Text, Builtin functions for map projections, Mathematical subroutines
@comment  node-name,  next,  previous,  up
@subsubsection User-defined Subroutines


The @code{sub} command is used to create user-defined subroutines.  For
more details @xref{Sub}.



@node   Operations on Text, Entering Text, User Subroutines, Grammar
@comment  node-name,  next,  previous,  up
@section Operations on text

@menu
* Entering Text::                                    ...
* System Calls In Quoted Strings::                   ...
* Variable Interpolation In Quoted Strings::         ...
* Comparing Textual Items Simply::                   ...
* Comparing Textual Items With Regular Expressions:: ...
* Concatenating Textual Items::                      ...
* Extraction of Substrings::                         The substr function
* Modifying Strings::                                The s/// operator
* Printing Into Strings::                            The sprintf function
* Regular Expression Syntax::                        ...
@end menu

@node   Entering Text, System Calls In Quoted Strings, Operations on Text, Operations on Text
@comment  node-name,  next,  previous,  up

@subsection Entering text
@cindex accented characters in text
@cindex non-English text
@cindex text, ISO characters
@cindex accented characters in text
@cindex French accents in text

Text is entered within double-quotes, as in the following examples.
@example
set x name "Temperature";
draw label "Case A" at 3 3 cm;
draw title "Asymptotic temperature dependence";
@end example

Text strings may be simple, as above, or they may contain
``interpolated'' components, resulting from system commands or from
substitution of the values of variables.  These are covered in the next
few sections.


_UCPNAME_ uses PostScript fonts, and can handle both unaccented English
text and accented non-English European text properly.  (It cannot yet
handle other languages, e.g. oriental languages.)  The default ``font
encoding'' vector (see any book on PostScript fonts) used in _PNAME_ is
the ISO-Latin-1 vector.  This permits both unaccented and accented
characters.  

The rule for entering accented text is simple: if you can enter it in
your text editor, _PNAME_ will be able to draw it!  It's up to you to
determine how to enter the accents.  Most text editors permit this.
Since many users will prefer the Emacs editor, a few words about that
are in order.

Consider the task of inserting French text with the Emacs
text-editor. There are several ways of doing this (and you may wish to
consult your emacs info manual).  A method that works in emacs-19 up to
current emacs-20 versions uses the emacs @file{iso-transl.el} package by
putting the following in your @file{~/.emacs} file:
@example
(require 'iso-transl)
(iso-transl-set-language "French")
(standard-display-european t)
@end example
Loading this package defines three ways of entering the non-ASCII
printable characters with codes above 127: the prefix @key{C-x 8}, or
the @key{Alt} key, or a dead accent key.  For example, you can enter
uppercase A-umlaut as @key{C-x 8 " A} or @key{Alt-" A} (if you have an
Alt key) or @key{umlaut A} (if you have an umlaut/diaeresis key).

A more recently introduced method is to enter the mode which allows
quick insertion of iso-latin-1 characters. Do the Emacs command 
@key{M-x iso-accents-mode} (either manually, or in a hook that's done
automatically). Now, suppose the x-axis is to represent temperature. All
you'd have to do is type in the command
@example
set x name "Temp'erature"
@end example
As you type, the quote mark will dissappear, and reappear as an accent
on the @code{e}.  And then, Gri will recognize this accented @code{e},
and it will draw the accent on the axis label.

If, for any reason, you desire the so-called ``standard'' PostScript
font-encoding vector, use the @code{Set Font Encoding} command
@pxref{Set font encoding}.



@node   System Calls In Quoted Strings, Variable Interpolation In Quoted Strings, Entering Text, Operations on Text
@comment  node-name,  next,  previous,  up

@subsection System calls in quoted strings
@cindex system calls in quoted strings
@cindex backtic system calls in quoted strings
@cindex back-tic system calls in quoted strings
@cindex strings, back-tic system calls in
@cindex system calls in quoted strings

When quoted strings are evaluated at run-time, _PNAME_ checks to see
whether they contain pairs of the back-tic character (i.e. @code{`}).
This character is then interpreted as it would be in a unix shell:
whatever text lies within the back-tic pair is sent to the operating
system, and the result of the evaluation is then inserted into the
string.  (The trailing newline is removed from the system output.)
Thus, you can print the time with the commands
@c QUIETEXAMPLE print "the date is `date`\n";

@node   Variable Interpolation In Quoted Strings, Comparing Textual Items Simply, System Calls In Quoted Strings, Operations on Text
@comment  node-name,  next,  previous,  up

@subsection Variable interpolation in quoted strings
@cindex variable interpolation in quoted strings
@cindex strings, variable interpolation in
@cindex interpolation of variable values into strings

When a scalar variable is found within a string enclosed in double
quotes, _PNAME_ "interpolates" the variable value into the string.  For
example, here is how to print the decimal value of the fraction 1/2
@c EXAMPLE $x = 1/2;\Nprint "$x equals 0.5\n";

Interpolation into quoted strings is done for both numerical and text
variables.

To prevent interpolation, you may ``protect'' the dollar-sign by
preceding it with a backslash.  This is useful when you'd like to use
dollar-signs in calls to the operating system, e.g. in the following
example, the tenth and eleventh columns of the file @file{wide_file.dat}
are plotted as x and y respectively.
@example
open(IN, "gawk '@{print \$10,\$11@}' wide_file.dat |") or die;
read columns IN x=1 y=2;
@end example


@node   Comparing Textual Items Simply, Comparing Textual Items With Regular Expressions, Variable Interpolation In Quoted Strings, Operations on Text
@comment  node-name,  next,  previous,  up

@subsection Textual comparisons -- simple method
@cindex comparing strings
@cindex strings, comparing simply with @code{eq} and @code{ne}
Quoted character strings may @emph{not} be compared using @code{==} and
@code{!=}.  Neither may variables which contain strings be compared in
this way.  Instead, textual items, whether quoted-string constants or
variables, are compared for equality and inequality with the operators
@code{eq} and @code{ne} respectively.  Variable interpolation is done
before the strings are compared.  Also, quoted strings may be compared
to variables.  If the variable is of string type, the expected results
are achieved.  If the variable is of numeric type, then the numeric
value is converted to a string before the comparison -- this is almost
always a bad idea, because the format may differ from what you expect it
to be (e.g. in number of trailing zeros after the decimal point, etc).

@c EXAMPLE $x = "hello";\Ndie "failed comparison 1\n" if ($x ne "hello");\Ndie "failed comparison 2\n" if ("$x" ne "hello");


@node   Comparing Textual Items With Regular Expressions, Concatenating Textual Items, Comparing Textual Items Simply, Operations on Text
@comment  node-name,  next,  previous,  up

@subsection Textual comparisons -- regular expression method
@cindex comparing strings with regular expressions
@cindex strings, comparing with regular expressions
@cindex regular expression for comparing strings
@cindex @code{//} for regular expression matching

As in Perl, a facility is provided for comparing textual items, using
the powerful and familiar unix ``regular expression'' notation.  The
regular expressions are written inside forward slashes
(i.e. @code{/expression/}), and are matched against the builtin variable
@code{$_}.  The item in slashes is given the value 1 if the expression
matches to @code{$_} and 0 if not.  For example, the following scans the
input file, and prints all lines with the three-character sequence "gre"
on them:
@example
while(<>) @{ print if /gre/; @}
@end example

In unix parlance, the regular expressions are ``extended,'' meaning for
example that subitems are enclosed in raw parentheses, as for example
@code{an(item)here}, not in backslashed parentheses such as
@code{an\(item\)here}.  It is important to emphasize that this
unix-based definition of ``extended'' is quite a different thing than in
Perl.  By ``extended'' Perl means something different.  In fact, all
strings in Perl are ``extended'' in the unix definition.

Normally, pattern-matching obeys the case ('a' versus 'A') used in the
regular expression, so that in the example above, a line consisting of
the upper-case sequence @code{GRE} would not match the lower-case
pattern.  Case-independent pattern matching may be done by putting the
character @code{i} after the closing slash.  Thus, the following program
matches lines with @code{gre}, @code{Gre}, @code{GRe}, etc.
@c QUIETEXAMPLE while(<>) @{ print if /gre/; @}

The contents of the regular expression may include constant items
(@code{/gre/}) and/or variables (@code{/$program/}).  At present,
_PNAME_ `compiles' the regular expressions at runtime, each time it
executes them.  Eventually _PNAME_ will pre-compile fixed regular
expressions (ones not containing variables).  On a 300 MHz linux
pentium, this will save about 50 microseconds per runtime evaluation of
a regular expression.

The syntax of regular expressions is discussed in another section
@xref{Regular Expression Syntax}.

@c TESTFILE tst-match


@node   Concatenating Textual Items, Extraction of Substrings, Comparing Textual Items With Regular Expressions, Operations on Text
@comment  node-name,  next,  previous,  up

@subsection Concatenation of textual items with dot operator
@cindex @code{.} operator, to concatenate strings
@cindex period operator, on strings
@cindex dot operator, on strings
@cindex strings, dot operator
@cindex concatenating strings with dot operator

Two textual items may be linked using the dot operator.  The items may
be quoted strings or textual variables, e.g.
@c QUIETEXAMPLE $hw = "hello" . " world";\Nprint "$hw\n";\Nprint $hw . "\n";\N
If any of the items is numeric, then it will first be converted to a
textual form in the default output format (@code{%.14g}, in terms of the
C i/o function @code{printf}), e.g.
@c QUIETEXAMPLE print "following is 100 ..." . 10 * 10, "\n";


@node   Extraction of Substrings, Modifying Strings, Concatenating Textual Items, Operations on Text
@comment  node-name,  next,  previous,  up

@subsection Extraction of substrings
Extraction of substrings is done with the @code{substr} command, which
matches the corresponding command in Perl.  For example, the string
@code{BC} can be created by @code{substr("ABCDE", 1, 2)}.  The source
string is the first parameter.  The next parameter indicates an offset
of 1 character from the beginning of the string and the third parameter
indicates to extract 2 characters.  For details @xref{Substr}.


@node   Modifying Strings, Printing Into Strings, Extraction of Substrings, Operations on Text
@comment  node-name,  next,  previous,  up

@subsection Modifying strings with @code{s///} operator
@cindex @code{s///} operator
@cindex modifying strings with @code{s///}
@cindex strings, modifying with @code{s///}

Partial support is provided for Perl-like string modification.  There
are two forms, one for modifying the @code{$_} variable, the second for
modifying any other variable.  

In the explanation here, the string delimiter will be taken to be
forward-slash (i.e. @code{/}), but any punctuation character will do
just as well.  Thus, one might use 
@c QUIETEXAMPLE $date =~ s:04/:Apr :;
to convert a date from a numeric format to a named month.


@subsubsection Modifying @code{$_}
As in Perl, _PNAME_ lets you modify the builtin string @code{$_} using
the @code{s///} operator.  (Recall that @code{$_} is read in with the
@code{<>} operator.)  Between the first two slashes is an input to be
searched for in @code{$_}, and between the second and third slash is the
replacement.  Two options are allowed after the final slash.  The option
@code{i} means to ignore the case in the input.  The option @code{g}
means to do the change globally, i.e. repeatedly on this input line.

For example, consider the data file (named @file{test-s.dat}):
@c QUIETEXAMPLE hello\Ngoodbye
If this is used with the commandfile
@c QUIETEXAMPLE open(IN, "test-s.dat") or die "cannot open test-s.dat";\Nwhile(<IN>) @{\N    s/l/L/g;\N    s/o/O/;\N    print;\N@}
it will yield the output
@c QUIETEXAMPLE heLLo\NgOodbye
Note that the @code{g} option changed both lower-case @code{l}
characters to upper-case, but only the first of the two @code{o}
characters was changed to upper-case.

It is not permitted to have the first string be blank.  That is, 
@c QUIETEXAMPLE s//something/;
is not allowed.  (It is permitted in Perl, and it matches to the beginning 
of the string.  However, the _PNAME_ author couldn't find this to be
a documented feature of Perl, and so left it out of _PNAME_.)

It is permitted, and quite common, to have the second be blank.
This means to delete the indicated string, e.g.
@c QUIETEXAMPLE s/junk//;
will delete the first occurence of the string @code{junk} and 
@c QUIETEXAMPLE s/junk//;
will delete all occurences of it.

The @code{s///} operator has a return value, which is the number of
times the target string was encountered.  Normally this is ignored,
althoug the following might make sense.
@c QUIETEXAMPLE $num = 0;\Nwhile(<>) @{\N    $num += s/junk//;\N    print;\N@}\Nprint "Replaced $num occurences\n";\N


@subsubsection Modifying other variables
@cindex =~ syntax, for modifying text-valued variables
The Perl-like @code{=~} syntax is supported.  For example,
@c QUIETEXAMPLE $s = "hello";\N$s =~ s/l/L/g; print "$s\n";
prints @code{heLLo}, while
@c QUIETEXAMPLE $s = "hello";\N$s =~ s/l/L/;  print "$s\n";
prints @code{heLlo} since only the first instance will be changed.



@c TESTFILE tst-substitute





@node   Printing Into Strings, Regular Expression Syntax, Modifying Strings, Operations on Text
@comment  node-name,  next,  previous,  up

@subsection Printing into strings with @code{sprintf}
@cindex @code{sprintf}, discussion
@cindex strings, printing into with @code{sprintf}
@cindex printing into strings with @code{sprintf}
@cindex formatted output into strings, with @code{sprintf}


As in C-like languages, the @code{sprintf} function provides the ability
to create strings using the formatting capabilities of the @code{printf}
command.  The syntax is e.g.
@c QUIETEXAMPLE $a = sprintf("Pi is %.3f to three decimal places", $_pi);\Nprint "$a\n";

For more on printing formats @xref{Printf}.



@node   Regular Expression Syntax, Flow of control, Printing Into Strings, Operations on Text
@comment  node-name,  next,  previous,  up

@subsection Regular expression syntax
@cindex regular expressions

Regular expressions may be used in various contexts.

_PNAME_ handles regular expressions in a way that is similar to Perl,
but a few things (namely, non-consuming items such as @code{\\b}) are
not available.

For more on regular expressions, consult the online Perl documentation
(type @code{man perlre} at the unix prompt) or any of a number of texts
on the unix operating system.

Regular expressions in _PNAME_ are of the ``extended'' type, as opposed
to the ``basic'' type.  The hallmark is that backslashes are not used to
protect parentheses, e.g.  @code{/foo(.*)bar/} may be used to match to
the string ``fooOKAYbar,'' whereas in ``basic'' notation the expression
would be written as @code{/foo(.*)bar/}.

The following is a brief summary of how regular expressions work.

@enumerate
@item
The usual POSIX regular expressions are handled.  Briefly, the rules are
as follows.

@table @code
@item normal character
A normal character (not in the list below) matches to itself.  Example:
@code{gre} matches the character @code{g} followed by the character
@code{r} followed by the character @code{e}.  That is, it matches the
string @code{gre}.
@item []
Enclose a list of alternative characters.  Example: @code{[gG]re} matches
both @code{gre} and @code{Gre}.
@item ()
Enclose an item that is to be remembered for later use.  Several
"remember" items may be present.  The first one is stored in a variable
named @code{$1}, the second in @code{$2}, etc.  Example: @code{f(.*)bar}
will match to the string @code{foobar}, and @code{$1} will become
defined as the string @code{oo}.
@item .
Matches to any character.
@item *
Match the item to the left, 0 or more times.
@item +
Match the item to the left, 1 or more times.
@item ?
Match the item to the left, 1 or 0 times.
@item @{n@}
Match the item to the left, exactly n times.
@item @{n,@}
Match the item to the left, at least n times
@item @{n,m@}
Match the item to the left, at least n but not more than m times
@end table

@item

In addition to the above standard POSIX behavior, _PNAME_ also follows
some convenient conventions invented by Perl, as in the following list.

@table @code
@item \s
Match a whitespace character (space, tab, or newline).  Beware: @code{\s*}
matches to any amount of whitespace -- including a zero amount -- so
you'll likely wish to use @code{\s+} to match to whitespace separating
non-whitespace items.
@item \S
Match a single nonwhitespace character.
@item \d
Match a single digit character.
@item \D  
Match a single non-digit character.
@item \w
Match a single "word" character (alphanumeric plus "_").  Thus,
@code{\w*} matches to a word, and ends on either whitespace or
punctuation.
@item \W
Match a single non-word character, e.g. space and punctuation symbols.
@end table


@end enumerate


@node   Flow of control, Conditional statements, Regular Expression Syntax, Grammar
@comment  node-name,  next,  previous,  up

@section Flow of Control
@cindex flow of control


The usual C-like constructs are available for controlling the flow of control
within a _PNAME_ program, such as
@code{if},
@code{else},
@code{do},
@code{while} and
@code{for}.
In addition, the perl-like constructs
@code{unless} (opposite to @code{if}),
@code{until} (opposite to @code{while}), and
@code{foreach}
are available.

@noindent
Blocks within conditional and looping constructs are enclosed within
curly braces.  (C users should note that these braces are required even
if the block contains only a single command; Perl users will find this
familiar.)
@c EXAMPLE if (1) @{\N    print "This will be printed.\n";\N@} else @{\N    print "This will not be printed.\n";\N@}


White space is optional in _PNAME_.  In the above, there is no
need for the spaces before the opening and closing parentheses in the
@code{if} statement.  Similarly, the opening brace could be put on a
separate line if desired.  The choice is merely aesthetic.  In this
manual, the spacing shown above will be used throughout, with an opening
brace placed on the same line as conditional/loop tests, and with the
code indented by four spaces.

Details:
@menu
* Conditional statements::
* Loops::
@end menu


@node   Conditional statements, Loops, Flow of control, Flow of control
@comment  node-name,  next,  previous,  up

@cindex conditional execution
@cindex @code{if} statement
@cindex @code{unless} statement

@subsection Conditional statements

Conditional statements are of two varieties: (1) the positive-style
@code{if} statement and the negative-style @code{unless} statement.
Each variety has two forms, one (``block'') form for controlling
execution of a block of commands, the other (``trailing'') form for
controlling execution of a single command.  The block form is
conventional in many programming languages and the trailing form is
provided mainly by _PNAME_ and Perl.

@subsubsection @code{if} statements
The @emph{block} form of @code{if} has syntax
@c QUIETEXAMPLE if expr @{true_block@} else @{false_block@}
where @code{expr} may be any valid expression and the blocks may contain
multiple commands.

The @code{else} part is optional.

Some users prefer to put the expression in parentheses, while others
don't.

@c QUIETEXAMPLE if ($x<10) @{ ... # some prefer this \Nif $x<10 @{ ... # some prefer this

@c EXAMPLE if ($x < 0) @{\N    print "x is negative.\n";\N@} else @{\N    print "x is zero or positive ...";\N    print " with square root =", sqrt(x), "\n";\N@}


The @emph{trailing} form of @code{if} has syntax
@c QUIETEXAMPLE single_cmd if (expr);

@noindent
where @code{single_cmd} is any valid single-line command, including
built-in commands such as @code{print} and @code{return}, user-defined
commands @xref{Cmd}, and mathematical expressions, including
assignment to variables.  There is no @code{else} clause in a
trailing-if command.
@c EXAMPLE print "X is positive\n" if ($x > 0);\Ndie "Cannot handle negative x\n" if ($x < 0);\N$x = 0 if ($x < 0);     # Prevent x from being negative

Users familiar with C-like languages may find this form confusing
because it puts the test at the end of the sentence, but Perl users may
find it convenient for simple actions/tests.

@subsubsection @code{unless} statements
The @code{unless} syntax is analogous to the @code{if} syntax, except
that the @code{expr} test expression is negated.  Thus an example of the
@emph{block} form is
@c QUIETEXAMPLE unless ($x<0) @{\N    print "x is zero or positive\n";\N@} else @{\N    print "x is negative\n";\N@}

@noindent and an example of the @code{trailing} form is
@c QUIETEXAMPLE print "x is negative\n" unless ($x>=0);

@c TESTFILE tst-if





@node   Loops, While and Until, Conditional statements, Flow of control
@comment  node-name,  next,  previous,  up

@cindex @code{do} loop
@cindex @code{while} loop
@cindex @code{until} loop
@cindex @code{for} loop
@cindex @code{foreach} loop
@cindex loops


@subsection Loops
Loops have four forms, with reserved words @code{do}, @code{while},
@code{for}, and @code{foreach}.  The forms are almost identical to those
in C-like languages such as Perl and awk.

@menu
* While and Until::
* For::
* Foreach::
@end menu



@node While and Until, For, Loops, Loops
@comment  node-name,  next,  previous,  up
@subsubsection @code{while} and @code{until} loops

@findex while

@cindex while loop
@cindex loop, @code{while}
@c SYNTAX while expr @{ commands @}

@noindent The command(s) within the braces are executed repeatedly, for
as long as the test expression, @code{expr}, is @emph{true}.  C/C++
users should note that the braces around the block are required, even if
the block contains only a single command.  Many programmers prefer to
surround the expression in parentheses but these aren't required.  That
is, @code{while ($x>0) @{...} and @code{while $x>0 @{...} are
equivalent).

@c EXAMPLE print "Numbers from 0 to 10:\n";\N$i = 0;\Nwhile ($i <= 10) @{\N    print " $i\n";\N    $i = $i + 1;\N@}

The reverse of a @code{while} loop is an @code{until} loop, e.g.
@c QUIETEXAMPLE $i = 10;\Nuntil ($i == 0) @{\N    $i--;\N@}\Ndie "Error: i should be zero\n" if ($i != 0);

In both styles of loop (and pretty much everywhere that _PNAME_
evaluates ``truth''), the test expression may be either a numerical
expression, a string expression, or a file-reading command.

@itemize @bullet
@item
Numerical expressions are considered to be @emph{true} if they evaluate
to non-zero.  The fragment above is a typical example.

@item
String expressions are considered to be @emph{true} if they are
non-blank and do not translate to a zero value.  (Thus, @code{"0.0"},evaluates to @emph{false}, since it represents zero, but @code{"a0.0"}
evaluates to @emph{true}, because it is a nonblank string which does not
translate to zero numerically.)

@item
@cindex <FILEHANDLE> syntax, in loops
@cindex @code{$_} variable, implicit assignment to
@cindex stdin, access with file handle @code{<>}
@vindex @code{$_}, implicit assignment to
A special type of character string is the file-reading handle.  This has
the form @code{<IN>}, where @code{IN} is the name of a file-handle
opened by a command such as @code{open(IN, "name");} @xref{Open}.  If
no file-handle name is provided, that is if @code{<>} is written, then
input from the standard input file (normally, the keyboard) is assumed
-- this is equivalent to @code{<STDIN>}.

The file-handle operator returns a character string equal to the next
line of the indicated file.  This string @emph{includes} the newline at
the end of the line, so that it will only be blank when the end of the
file has been reached.  Also, because the newline is attached, it will
never represent zero numerically, so that reading a line containing
e.g. @code{0.0} still makes the operator evaluate to @emph{true}.

There is an additional rule with regard to file-reading in @code{while}
and @code{do-while} loops.  If the input is not assigned specifically to
a variable, then it is @emph{implicitly} assigned to the variable
@code{$_}.  (This is not done in any other command, which might seem odd
but that's the way Perl does it, and _PNAME_ copies the
established convention.)  Since @code{print} will print
out the value of @code{$_} by default, here is how you might print the
contents of a file named @code{input_file}:

@c QUIETEXAMPLE open(IN, "input_file");\Nwhile(<IN>) @{\N    print;\N@}


and here is how you might count the number of lines in a file provided
on standard-input:

@c QUIETEXAMPLE $lines = 0;\Nwhile(<>) @{ $lines++; @}\Nprint "$lines\n";

@end itemize




@c TESTFILE tst-while



@subsubsection @code{do-while} and @code{do-until} loops

@findex DO block WHILE expr
@cindex @code{do} ... @code{while} loop
@cindex loop, @code{do} ... @code{while}

@c SYNTAX do @{ commands @} while (expr);
@noindent The indicated commands are performed as long as the test value evaluates
to 'true'.  Because the test value is evaluated at the bottom of the
loop, the loop is always done at least once, in contrast to the
@code{while} loop, e.g.
@c QUIETEXAMPLE print "Numbers from 0 to 10:\n";\N$i = 0;\Ndo @{\N    print " $i\n";\N    $i = $i + 1;\N@} while ($i <= 10);
@sp 2
@noindent The reverse of a @code{do-while} loop is a @code{do-until} loop, e.g.
@c QUIETEXAMPLE $i = 10;\Ndo @{\N    $i--;\N@} until ($i == 0);\Ndie "Error: i should be zero\n" if ($i != 0);
@c TESTFILE tst-do-while

@subsubsection Trailing @code{while} and @code{until}

@cindex while, trailing
@cindex trailing @code{while} statement

A convenient form of @code{while} is the "trailing" form, in which a
single command is repeated while a condition is true.  For example, the
following code prints the number 10:

@c EXAMPLE $i = 0;\N$i++ while ($i<10);\Nprint "$i\n";


@cindex until, trailing
@cindex trailing @code{until} statement

The reverse is the "trailing until" form, in which a single command is
repeated until a condition is true.  For example, the following code
prints the number 10:

@c QUIETEXAMPLE $i = 0;\N$i++ until ($i==10);\Nprint "$i\n";



@node For, Foreach, While and Until, Loops
@comment  node-name,  next,  previous,  up

@subsubsection @code{for} loop

@findex for
@cindex @code{for} loop
@cindex loop, @code{for}

@c SYNTAX for (initial_statement; test_value; repeated_statement) @{\N    # commands to execute while test_value is nonzero\N@}

@noindent
Before the loop body is executed, the @code{initial_statement} is
performed.  Normally it is an initialization of some type.  Then, if the
@code{test_value} is nonzero, the contents of the loop are executed
once.  After the contents have been executed, the statement denoted
@code{repeated_statement} is executed (often this is an increment of a
counter), and the loop may repeat again, if @code{test_value} still
evaluates to a nonzero value, e.g.
@c QUIETEXAMPLE print "Numbers from 0 to 10:\n";\Nfor ($i = 0; $i < 10; $i += 1) @{\N    print " $i\n";\N@}

@c TESTFILE tst-for



@node Foreach, Commands in Gre, For, Loops
@comment  node-name,  next,  previous,  up

@subsubsection @code{foreach} loop

@findex foreach
@cindex @code{foreach} loop
@cindex loop, @code{foreach}

@c SYNTAX foreach $x (value_1, value_2, ... value_n) @{ ... @}  # style 1\Nforeach $x (@@array_name) @{ ... @}                    # style 2

@noindent
The loop is executed repeatedly, with the value of the variable denoted
@code{$x} in this example being set in turn to each of the values in the
list (style 1) or the array (style 2), e.g.
@c QUIETEXAMPLE print "Some prime numbers are:\n";\Nforeach $a (3, 5, 7, 11, 13, 17, 19) @{\N    print "  $a\n";\N@}

@noindent
@code{foreach} loops are very useful for processing a list of data
files.  Sometimes you'll know the list in advance, e.g.
@c QUIETEXAMPLE foreach $file ("a.dat", "b.dat", "c.dat") @{\N    open(FILEHANDLE, $file);\N    # Do something with the data in this file\N    close FILEHANDLE;\N@}\N

@noindent and other times you'll have to "glob" the list @xref{Glob}, e.g
@c QUIETEXAMPLE foreach $file (glob("*.dat")) @{\N    open(FILEHANDLE, $file);\N    read columns FILEHANDLE x=1 y=2;\N    draw curve;\N    close FILEHANDLE;\N@}\N

@noindent and still other times you might want to have the values specified on the
commandline, e.g.
@c QUIETEXAMPLE foreach $opt (@@ARGV) @{ print "Option '$opt'\n"; @}

@noindent The above could have also been written
@c QUIETEXAMPLE for ($i = 0; $i <= $#ARGV; $i++) @{print "Option '$ARGV[$i]' \n";@}

@c TESTFILE tst-foreach







@c HTML <!-- newfile BuiltinCommands.html "Gre: commands" " Commands" -->

@node   Commands in Gre, Cautionary Notes On Syntax, Foreach, Top
@comment  node-name,  next,  previous,  up
@chapter Commands in the _PNAME_ language

@strong{About this chapter}.  This is the ``meat'' of the document (or
the ``tofu,'' if you prefer).  Here you'll find out all the gory details
of the _PNAME_ commands.  You'll not need to read this chapter in detail
now, but you'll want to return to it often as you delve deeper into
_PNAME_.  @emph{Recommendation}: read the next section, ``cautionary
notes on syntax,'' (@pxref{Cautionary Notes On Syntax}) and then skip to
the cookbook chapter (@pxref{Cookbook}).

@c HTML <center>
@c HTML <IMG SRC="./figures/diamonds.gif" width=396 align=top>
@c HTML <A HREF="./figures/diamonds.html">
@c HTML <b>diamonds.gre</b>
@c HTML </a>
@c HTML </center>

@menu
* Cautionary Notes On Syntax::  How to read syntax
* Commands::                    List of commands
@end menu

@node   Cautionary Notes On Syntax, Commands, Commands in Gre, Commands in Gre
@comment  node-name,  next,  previous,  up
@section Cautionary Notes on Syntax
@cindex syntax

@subsection Wrap negative command arguments in parentheses

This is necessary because _PNAME_ uses whitespace to separate
arguments to commands, but _PNAME_ also insists on simplifying
mathematical expressions.  Thus, when _PNAME_ scans
@c QUIETEXAMPLE set x axis -2 -3 -1;
@noindent
it will interpret the three numbers on the end as being part of a
mathematical expression, and thus convert the command to
@c QUIETEXAMPLE set x axis -6;
@noindent
(which will generate an error since it makes no sense in _PNAME_.)

@noindent
To prevent the simplification, simply enclose negative arguments in
parentheses, e.g.
@c QUIETEXAMPLE set x axis (-2) (-3) (-1);

Note: Astute users will realize that the first number need not be
enclosed in parentheses since there preceding item (the keyword
@code{axis}) will not be construed as a component of a numerical
expression.  Still, it's not a bad idea to develop the habit of
enclosing all all negative arguments in parentheses, as illustrated
above.


@subsection Command may not contain punctuation characters, e.g. @code{[}.

Don't be fooled by the characters @code{@{}, @code{@}}, @code{[},
@code{]}, and @code{|} in syntax descriptions.  These characters are
used to indicate the general forms of syntax, not specific ways to write
_PNAME_ code.  Here are the meanings of the symbols: (1) optional
arguments are enclosed in square brackets (@code{[]}).  (2) alternatives
are separated by vertical lines (@code{|}).  (3) groups are enclosed in
braces (@code{@{@}}).



@node   Commands, Cd, Cautionary Notes On Syntax, Commands in Gre
@comment  node-name,  next,  previous,  up

@section List of builtin commands

In addition to the built-in commands listed below, you should also check
out the list of built-in subroutines @xref{Mathematical subroutines},
since it many commands (e.g. @code{sin}) are defined there also.


@menu
* Cd::                          Change directory
* Chop::                        Chop last character from $_ or string
* Chomp::                       Remove last character if it's newline
* Close::                       Close a file
* Cmd::                         Define a new Gre command
* Convert::                     Convert something (e.g. columns to grid)
* Delete::                      Delete something
* Die::                         Quit the program
* Draw::                        Draw something
* Exit::                        Exit program
* Glob::                        Do filename expansion
* Index::                       Index of substring in string
* Last::                        Jump out of a loop from the middle
* Ls::                          List contents of current directory
* My::                          Make a variable local to a block
* New Page::                    Start a new page of PostScript output
* Pscomment::                   Insert comment into PostScript file
* Open::                        Open data file
* Package::                     Set namespace
* Print::                       Print something
* Printf::                      Print something, formatted
* Pwd::                         Print current working directory
* Query::                       Ask question and receive reply
* Read::                        Read something
* Regress::                     Perform regression on column data
* Reorder::                     Reorder items (e.g. columns)
* Return::                      Return from subroutine
* Rewind::                      Rewind a datafile
* Set::                         Set something
* Split::                       Split string into substring array
* Sub::                         Create subroutine
* Substr::                      Extract substring
* System::                      Call the operating system
* Use::                         Use a module
* Warn::                        Print a warning
* -X::                          Various tests on files
@end menu



@node   Cd, Chop, Commands, Commands
@comment  node-name,  next,  previous,  up
@section @code{cd} command
@findex cd
@cindex @code{cd} command

@c SYNTAX cd;                                 # style 1\Ncd $dir;                            # style 2

@c STYLE 1
change to home (top) directory.

@c STYLE 2
change to indicated directory, which may be provided in a double-quoted
string or an expression which evaluates to a string.

Unix filenames are used, in the C-shell convention; thus @code{cd "~";}
moves to the home directory, and @code{cd "~/Mail";} moves to a unix
Mail directory at the home level.


@node   Chop, Chomp, Cd, Commands
@comment  node-name,  next,  previous,  up
@section @code{chop} subroutine
@findex chop
@cindex @code{chop} subroutine

@c SYNTAX chop                                # style 1\Nchop $VARIABLE                      # style 2

@c STYLE 1
remove the last character from the @code{$_} string, returning
the character chopped.

@c STYLE 2
Remove the last character from the string-value of the
indicated variable, returning the character chopped.  This is often done
for lines read by the @code{<>} operator, and therefore it is often
assumed that the character will be a newline.  For example here is how
you might slurp a whole file into a variable called @code{$a}:
@c QUIETEXAMPLE $a = "";\Nwhile (<>) @{\N    chop;\N    $a = $a . $_;\N@}

You should be using @code{chomp} if you don't know for sure that the
last character will be a newline, or if there might be several newlines.
Neither will be the case as @code{<>} reads a file, provided that the
file has a newline at the very end, so @code{chop} will work most of the
time.


@node   Chomp, Close, Chop, Commands
@comment  node-name,  next,  previous,  up
@section @code{chomp} subroutine
@findex chomp
@cindex @code{chomp} subroutine

@c SYNTAX chomp                               # style 1\Nchomp $VARIABLE                     # style 2

@noindent
A safer version of @code{chop}, that only removes newlines from the end
of the variable @code{$_} or the indicated string-valued variable.
Returns the number of trailing newlines that were removed.



@node   Close, Cmd, Chomp, Commands
@comment  node-name,  next,  previous,  up
@section @code{close} subroutine
@findex close
@cindex @code{close} subroutine

@c SYNTAX close\Nclose FILEHANDLE\Nclose(FILEHANDLE)

@noindent
Close data file with named file handle, the latter having been specified
in the @code{open} statement @xref{Open}.  If no filehandle is
provided, closes an @code{ANONYMOUS} filehandle, i.e. corresponding to a
file which was opened without specifying a filehandle.

Once a file is closed, its contents may not be read unless it is opened
again.

@code{close} returns 1 if the file was open and 0 if not.



@node   Cmd, Convert, Close, Commands
@comment  node-name,  next,  previous,  up
@section @code{cmd} command

@findex cmd
@cindex @code{cmd} command
@cindex defining new Gre commands

@subsection @code{cmd} -- introduction

@c SYNTAX cmd WORDS (PROTOTYPE) @{\N COMMANDS\N@}

@noindent
This creates a new Gre command.  One or more words can be used in the
name of the command (denoted @code{WORDS} here).  The @code{PROTOTYPE}
(see next paragraph) indicates the arguments to the command, with the
same syntax as in the Perl language.  Above, @code{COMMANDS} stands for
a block of one or more commands within the curly braces.  The command is
called by naming it, optionally with a space-separated list of arguments
(according to the prototype).  These arguments are passed to the
@code{cmd} as the variables @code{$_[0]}, @code{$_[1]}, etc, and the
number of arguments that were supplied is @code{1 + $#_}.  This
convention is just as in subroutines @xref{Sub}.

Example:
@example
#* Print a morning greeting
cmd hi there sleepy head (;) @{
    print "Good morning sweetie\n";
@}
hi there sleepy head;
@end example

Example 2:
@example
#* Print twice a given number
#* @@param $value number to be doubled and printed
cmd double ($;) @{ # $value
    print 2 * $_[0], "\n";
@}
double 10;
@end example

@subsection @code{cmd} prototypes and arguments
The arguments may be quoted strings, constants, or mathematical
expressions.  These are the differences between @code{cmd} and
@code{sub}: (1) a @code{cmd} may have more than one word in its name;
(2) a @code{cmd} does not return a value and therefore cannot be used in
a mathematical expression; and (3) parameters to a @code{cmd} are
separated by spaces, not by commas.

@cindex prototype, in cmd
The PROTOTYPE is a list of zero or more characters indicating the
expected arguments to the command, in the same format as for Perl
@code{sub}-style subroutines.  An example prototype is @code{$$}, which
would indicate that the cmd takes two arguments.  The allowed characters
in a prototype are dollar-sign (@code{$}), ampersand (@code{@@}), and
semicolon (@code{;}).  A semicolon is optional, and indicates a
separation between a list of required arguments and a list of optional
arguments.  A dollarsign indicates a single scalar parameters (or
mathematical expression), and an ampersand indicate a list of one or
more scalars separated by spaces.  Items before a semicolon are required
and items after a semicolon are optional.

@c EXAMPLE cmd none ()           @{ # takes no arguments\Ncmd one only ($)      @{ # takes a single argument\Ncmd two only ($$)     @{ # takes two arguments\Ncmd two_three ($$;$)  @{ # takes two or three arguments\Ncmd any number (@@)    @{ # takes any number of args (incl zero)


At compile-time, calls to a cmd are checked to ensure that they have the
correct number of arguments.

@c EXAMPLE none;                   # okay\Nnone 10;                # error -- should be no arguments\Nany number;             # okay\Nany number 1 1/10;      # okay\Nany number 1, 1/10;     # error -- cannot use comma between arguments


It is conventional to list argument names, if any, in a comment after
the opening brace, e.g.

@c QUIETEXAMPLE cmd display value of ($) @{ # $variable_name\N    print $_[0], "\n";\N@}\N$pi = 2 * asin(1);\Ndisplay value of $pi;


The _PNAME_ scanner works by matching words it sees against known
commands, i.e. against builtin syntax such as @code{while} loops, etc,
and against a list of @code{cmd} defined in a system startup file and
possibly in a user-defined startup file named @file{~/.grerc} --
@xref{User startup file}.  If it sees a match, then it considers all the
items following the matched words to be arguments.  A special rule then
applies: bare words are treated as if they had been enclosed in
double-quote marks -- that is, they are treated as if they were text
strings.  Thus, for example, the following two calls to the @code{cmd}
named @code{display} will have the same effect:

@c QUIETEXAMPLE cmd display ($) @{ print $_[0]; @}\Ndisplay "hello";\Ndisplay hello;

The purpose of this bare word convention is so that arguments may be
keywords, as in the possible command

@c QUIETEXAMPLE cmd draw stuff at ($$;$) @{ # $x $y [cm] ...

Commands may be nested -- you may call one command inside another, as
illustrated in the test file.

@c TESTFILE tst-nested-cmd


@subsection  @code{cmd} documentation

Gre also has a facility for formatting documentation for cmds.  It
closely parallels the Java-language convention for documentation,
employing a block of comment lines occurring before the @code{cmd} line.
The purpose is so that gre-mode, an Emacs editing mode for Gre, may help
you to program in Gri.  The rules for @code{cmd} documentation are:

@enumerate
@item The block consists of comments that begin with @code{#*} instead
of the normal @code{#} character.
@item A block may not have any blank lines -- the block is recognized as
the list of @code{#*} comment lines preceeding a @code{cmd} line.
@item At the bottom of the block, one may (optionally) document
individual parameters to the @code{cmd}, using keys called
@code{@@param} and @code{@@default}.  After the @code{@@param} keyword,
the name of the variable is given (with the dollar-sign specified).  Any
words after that are taken to be the documentation for the indicated
variable.  Optionally, one may also specify a default value with the
@code{@@default} keyword; for builtin commands, the default value is
also stored in a builtin variable, and this may be listed after the
actual value, separated by the word @code{in}.
@end enumerate

Here is an example:

@example
#* Indicate personal preference in foods.
#* @@param $food_item the favorite food
cmd tastes good ($) @{ # $food_item
    print "$_[0] tastes yummy!\n";
@}

#* Indicate a more universal preference in foods.
#* @@param $food_item the favorite food @@default "apple pie"
cmd tastes really good (;$) @{ # $food_item
    if ($#_ == 0) @{
        print "$_[0] tastes really yummy to everybody!\n";
    @} else @{
        print "apple pie tastes really yummy to everybody!\n";
    @}
@}

tastes good "candy";
tastes really good;
tastes really good "candy";
@end example


Following these documentation conventions makes it easier for others to
read and understand your program.  Furthermore, it allows the
@code{gre-mode} Emacs editing mode to parse your program better.


@c TESTFILE tst-new-cmd


@node   Convert, Convert columns to grid, Cmd, Commands
@comment  node-name,  next,  previous,  up
@section @code{convert} command

@findex convert
@cindex @code{convert} command

The @code{convert} commands are:
@menu
* Convert columns to grid::     Create grid, for contouring
* Convert grid to image::       Create image
@end menu


@node   Convert columns to grid, Convert grid to image, Convert, Convert
@comment  node-name,  next,  previous,  up
@section @code{convert columns to grid} command
@findex convert columns to grid
@cindex @code{convert columns to grid} command


@c SYNTAX convert columns to grid;                                   # style 1\Nconvert columns to grid barnes;                            # style 2\Nconvert columns to grid barnes $xr $yr $gamma $iterations; # style 3\Nconvert columns to grid neighbor;                          # style 4

@c STYLE 1-3
Use the Barnes method of interpolation.  Each point on the grid is
determined from the data using a distance-weighted gaussian averaging
procedure.  The procedure is iterative, starting out at large smoothing
scales and moving to smaller scales gradually.  It has the effect of
smoothing over gaps in the data while at the same time providing detail
in regions where data exist to constrain the interpolation.  The
parameters @code{$xr}, @code{$yr}, @code{$gamma}, and @code{$iterations}
determine the weighting function.  If they are not provided, @code{$xr}
defaults to 1.4 times the range in x-values, divided by the square-root
of the number of non-missing data, @code{$yr} defaults to the
corresponding value in the y-direction, @code{$gamma} defaults to 0.5
and @code{$iterations} defaults to 2.  For details of the algorithm, see
below.

@c STYLE 4
Use nearest-neighbors to calculate values at each point in the grid.
This is done by scanning the (x,y,z) data from start to finish,
assigning each to the grid point which is nearest.  Nearness is measured
as Cartesian distance, with scale factors in x and y being given by the
spacing between the first and second grid points.  In other words,
distance is given by D=sqrt(dx*dx+dy*dy) where dx is ratio of distance
from data point to nearest grid point, in x-units, divided by the
difference between the first two elements of the x-grid, and dy is
similarly defined.  Once the grid point nearest the data point is
determined, Gri adds the z-value to a list of possible values to store
in the grid.  Once the entire data set has been scanned, Gri then goes
back to each grid point, and chooses the z-value of the data point that
was nearest to the grid point -- that is, it stores the z value of the
(x,y,z) data triplet which has minimal D value.  Note that this scheme
is independent of the order of the data within the columns.


@strong{Selecting a method}:

The @code{barnes} method is preferred (that's why it's the default).  It
generally produces fields that are close to what a human would draw.  A
real advantage is that in regions with no data, the contour lines are
smooth (being based on averaging over large scales), while in regions
with data the contour lines will become more detailed, as appropriate
(since then the local data will alter the grid).

The @code{neighbor} method is much faster than the @code{barnes} method,
but is really only useful when the data are already pre-gridded -- i.e.
when the (x,y,z) triplets have x and y values which are already aligned
with the grid.


@strong{Performance considerations}:

For @code{P} data points, @code{X} x-grid points, and @code{Y} y-grid
points, the @code{neighbor} calculation cost is proportional to
@code{P*[log2(X)+log2(Y)]} where @code{log2} is logarithm base 2.  The
@code{barnes} cost is much higher, with each iteration cost being
proportional to @code{P*X*Y)}.  For small datasets (e.g. a few thousand
points) the difference is trivial, but for large datasets the
@code{barnes} method is quite slow.  It should be noted that
_PNAME_ makes every effort at efficiency.  For example, the
exponential function is expensive to calculate, so _PNAME_ uses a
fifth-order polynomial approximation; this speeds executation by a
factor of 3, incurring difference of less than 1/10-th of a percent on
the grid values.


@strong{References}: (1) Section 3.6 in Roger Daley, 1991, ``Atmospheric
data analysis,'' Cambridge Press, New York. (2) S. E. Koch and
M. DesJardins and P. J. Kocin, 1983.  ``An interactive Barnes objective
map anlaysis scheme for use with satellite and conventional data,'',
J. Climate Appl.  Met., vol 22, p. 1487-1503.

@strong{Details of Barnes method}:

@tex
The gridded field is estimated iteratively.  Successive iterations
retain largescale features from previous iterations, while adding
details at smaller scales.

The first estimate of the gridded field, here denoted $G_{ij}^{(0)}$
(the parenthetic superscript indicating the order of the iteration) is
given by a weighted sum of the input data, with $z_k$ denoting the
k-th $z$ value.

$$
G_{ij}^{(0)}
=
{ {\sum_1^{n_k} W_{ijk}^{(0)} z_k} \over {\sum_1^{n_k} W_{ijk}^{(0)}} }
$$

The weights $W_{ijk}^{(0)}$ are defined in terms of a Guassian
function decaying with distance from observation point to grid point:

$$
W_{ijk}^{(0)}
=
\exp \left[ - { {(x_k-X_i)^2} \over {L_x^2} }
            - { {(y_k-Y_j)^2} \over {L_y^2} } \right]
$$

\noindent
Here $L_x$ and $L_y$ are lengths which define the smallest
$(x,y)$ scales over which the gridded field will have significant
variations (for details of the spectral response see Koch et al. 1983).

Note: if the user has supplied weights @xref{Read columns}, then these
are multiplied into the normal distance-based weights; i.e. $w_i
W_{ijk}$ is used instead of $W_{ijk}$.

The second iteration derives a grid $G_{ij}^{(1)}$ in terms of the first
grid $G_{ij}^{(0)}$ and ``analysis values'' $f_k^{(0)}$ calculated at
the $(x_k,y_k)$ using a formula analogous to the above.
(Interpolation based on the first estimate of the grid $G_{ij}^{(0)}$
can also be used to calculate $f_k^{(0)}$, with equivalent results for a
grid of sufficiently fine mesh.)  In this iteration, however, the
weighted average is based on the difference between the data and the
gridded field, so that no further adjustment of the gridded field is
done in regions where it is already close to through the observed
values.  The second estimate of the gridded field is given by

$$
G_{ij}^{(1)}
=
G_{ij}^{(0)} 
+ 
{ {\sum_1^{n_k} W_{ijk}^{(1)} (f_k - f_k^{(0)})} \over {\sum_1^{n_k} W_{ijk}^{(1)}}
}
$$

\noindent
where the weights $w_{ik,1}$ are defined by analogy with
$W_{ik}^{(0)}$ except that $L_x$ and $L_y$ are replaced by
$\gamma^{1/2}L_x$ and $\gamma^{1/2}L_y$.  The nondimensional parameter
$\gamma$ ($0<\gamma<1$) controls the degree to which the focus is
improved on the second iteration.  Just as the weighting function
forced the gridded field to be smooth over scales smaller than $L_x$
and $L_y$ on the first iteration, so it forces the second estimate of
the gridded field to be smooth over the smaller scales
$\gamma^{1/2}L_x$ and $\gamma^{1/2}L_y$.

The first iteration yields a gridded field which represents the
observations over scales larger than $(L_x,L_y)$, while successive
iterations fill in details at smaller scales, without greatly
modifying the larger scale field.

In principle, the iterative process may be continued an arbitrary
number of times, each time reducing the scale of variation in the
gridded field by the factor $\gamma^{1/2}$.  Koch et al. 1983
suggest that there is little utility in performing more than two
iterations, providing an appropriate choice of the focussing parameter
$\gamma$ has been made.  Thus the gridding procedure defines a gridded
field based on three tunable parameters: $(L_x,L_y,\gamma)$.

@end tex


@ifinfo
The gridded field is estimated iteratively.  Successive iterations
retain largescale features from previous iterations, while adding
details at smaller scales.

The first estimate of the gridded field, here denoted
@code{G_(ij)^0} (the superscript indicating the order of the
iteration) is given by a weighted sum of the input data, with
@code{z_k} denoting the k-th @code{z} value.

@example
             sum_1^n W_(ijk)^0 z_k
G_(ij)^(0) = ----------------------
               sum_1^n W_(ijk)0
@end example
@noindent
where the notation @code{sum_1^n} means to sum the elements
for the @code{k} index ranging from 1 to @code{n}.

The weights @code{W_(ijk)^0} are defined in terms of a Guassian
function decaying with distance from observation point to grid point:

@example
               (   (x_k - X_i)^2       (y_k - Y_j)^2  )
W_(ijk)^0 = exp(-  --------------  -  --------------- )
               (      L_x^2                L_y^2      )
@end example

@noindent
Here @code{L_x} and @code{L_y} are lengths which define the smallest
@code{(x,y)} scales over which the gridded field will have significant
variations (for details of the spectral response see Koch et al. 1983).

Note: if the user has supplied weights @xref{Read columns}, then these
are applied in addition to the distance-based weights.  That is,
@code{w_i W_(ijk)} is used instead of @code{W_(ijk)}.

The second iteration derives a grid @code{G_(ij)^1} in terms of the
first grid @code{G_(ij)^0} and ``analysis values'' @code{f_k^0}
calculated at the @code{(x_k,y_k)} using a formula analogous to that
above.  (Interpolation based on the first estimate of the grid
@code{G_(ij)^0} can also be used to calculate @code{f_k^0}, with
equivalent results for a grid of sufficiently fine mesh.)  In this
iteration, however, the weighted average is based on the difference
between the data and the gridded field, so that no further adjustment
of the gridded field is done in regions where it is already close to
through the observed values.  The second estimate of the gridded field
is given by

@example
                       sum_1^n W_(ijk)^1 (f_k - f_k^0)
G_(ij)^1 = G_(ij)^0 +  -------------------------------
                              sum_1^n W_(ijk)^1
@end example

@noindent where the weights @code{w_@{ik,1@}} are defined by analogy
with @code{W_@{ik@}^0} except that @code{L_x} and @code{L_y} are
replaced by @code{gamma^@{1/2@}L_x} and @code{gamma^@{1/2@}L_y}.  The
nondimensional parameter @code{gamma} (@code{0<gamma<1}) controls the
degree to which the focus is improved on the second iteration.  Just
as the weighting function forced the gridded field to be smooth over
scales smaller than @code{L_x} and @code{L_y} on the first iteration,
so it forces the second estimate of the gridded field to be smooth
over the smaller scales @code{gamma^@{1/2@}L_x} and
@code{gamma^@{1/2@}L_y}.

The first iteration yields a gridded field which represents the
observations over scales larger than @code{(L_x,L_y)}, while successive
iterations fill in details at smaller scales, without greatly
modifying the larger scale field.

In principle, the iterative process may be continued an arbitrary number
of times, each time reducing the scale of variation in the gridded field
by the factor @code{gamma^@{1/2@}}.  Koch et al. 1983 suggest that there
is little utility in performing more than two iterations, providing an
appropriate choice of the focussing parameter @code{gamma} has been made.
Thus the gridding procedure defines a gridded field based on three
tunable parameters: @code{(L_x,L_y,gamma)}.


@end ifinfo


@node   Convert grid to image, Delete, Convert columns to grid,  Convert
@comment  node-name,  next,  previous,  up
@section @code{convert grid to image} command
@findex convert grid to image
@cindex @code{convert grid to image} command

@emph{BUG -- COMMAND NOT IMPLEMENTED YET}

@c SYNTAX convert grid to image;                                     # style 1\Nconvert grid to image size $w $h;                          # style 2

@c STYLE 1
Convert grid to an image that is 128 by 128 pixels.  If the image range
has not been set by @code{set image range} @xref{Set image range},
define it to be the range of the grid.

@c STYLE 2
The width is specified to be @code{$w} pixels wide and @code{$h} pixels
high.


@cindex image, interpolation from grid
@cindex interpolation, from grid to image

@b{Interpolation method:} The interpolation scheme is the same used for
contouring.  Image points that lie outside the grid domain are
considered missing.  For points within the grid, the first step is to
locate the patch of the grid upon which the pixel lies.  Then the 4
neighboring grid points are examined, and one of the following cases
holds.
@enumerate
@item
If 3 or more of them are missing, the pixel is considered missing.
@item
If just one of the neighboring grid points is missing, then the image
pixel value is determined by bilinear interpolation on the remaining 3
non-missing grid points.  (This amounts to fitting a plane to three
measurements of height.)
@item
If all 4 of the grid points are non-missing, then the rectangle defined
by the grid patch is subdivided into four triangles.  The triangles are
defined by the two diagonal lines joining opposite corners of the
rectangle.  An ``image point'' is constructed at the center of the grid
patch, with f(x,y) value taken to be the average of the values of the
four neighbors.  This value is taken to be the value at the common
vertex of the four triangles, and then bilinear interpolation is used to
calculate the image pixel value.
@end enumerate

With the @code{size} options @code{$width} and @code{$height}
specified, they set the number of rectanglular patches in the image.

With the @code{box} options specified, they set the bounding box for the
image.  If @code{box} is not given, the image spans the same bounding
box as the grid as set by @code{set x grid} and @code{set y grid}.

Normally, missing values in the grid become white in the image, but this
can be changed using the @code{set image missing value color to}@dots{}
command.





@node   Delete, Die, Convert grid to image, Commands
@comment  node-name,  next,  previous,  up
@section @code{delete} command

@findex delete
@cindex @code{delete} command

@c SYNTAX delete columns randomly $fraction;  # style 1\Ndelete columns where missing;       # style 2\Ndelete grid;                        # style 3\Ndelete [x|y] scale;                 # style 4


@c STYLE 1
delete indicated fraction (from 0 to 1) of the column data.  This is
sometimes done to make datasets smaller and sometimes done for
monte-carlo analysis of data.

@c STYLE 2
delete column data which have any one of the variables missing.  Thus,
if an (x,y) pair has @code{x} missing, delete the whole pair; if a
(x,y,u,v) quadruplet has @code{u} mising, delete that quadruplet.

@c STYLE 3
delete grid data

@c STYLE 4
delete either @code{x} scale, or @code{y} scale, as indicated.  This is
used to autoscale multiple datasets, one after another, since if the
scale is deleted a new one will be created upon reading a dataset with
@code{read columns}.  If neither @code{x} nor @code{y} is indicated,
delete both scales.




@node   Die, Draw, Delete, Commands
@comment  node-name,  next,  previous,  up
@section @code{die} subroutine

@findex die
@cindex @code{die} subroutine
@cindex program termination
@cindex exiting the program with @code{die}
@cindex stopping program execution
@cindex quiting the program

@c SYNTAX die                                 # style 1\Ndie "a message to be printed"'      # style 2\Ndie EXPR                            # style 3

@noindent
@code{die} quits the program, optionally printing a message or value.
Formally, @code{die} is a subroutine, so it may be used in any
expression.  However, it never returns a value if it is executed, since
it terminates program execution.

@c STYLE 1
print a message of the form @code{Died at a.gre line 5.}, where e.g.
@file{a.gre} is the commandfile and the @code{die} command was on the
fifth line.  Then exit from _PNAME_.

@c STYLE 2
print the indicated text string.  If the string ends in a newline
character (e.g. @code{die "Cannot locate file\n";}) then the string is
printed, with the newline, and then @code{_PNAME_} exits.  If a newline
character is not present at the end of the string, then the string is
printed, followed by an indication of the name of the commandfile and
the line number (as in Style 1).  Since this information is helpful,
most users leave out the newline.

@c STYLE 3
print the value of the indicated expression, followed by a newline, and
then exit.

@sp 1
It is a good idea to use @code{die} liberally to check for conditions
that could lead to problems.  A common example is to test that a file
has been opened correctly.  Following are some ways to do that.

@example
# Next three produce (the same) minimal error message ...
open(IN, "file.dat") or die;
die if !open(IN, "file.dat");
if !open(IN, "file.dat") @{ die; @}

# ... next three produce (the same) more informative message
open(IN, "file.dat") or die "Cannot open file.dat";
die "Cannot open file.dat" if !open(IN, "file.dat");
if !open(IN, "file.dat") @{ die "Cannot open file.dat"; @}
@end example


@c TESTFILE tst-die



@node   Draw, Draw arc, Die, Commands
@comment  node-name,  next,  previous,  up
@section @code{draw} commands

The @code{draw} commands are used to draw various items.  Parameters for
the various items (e.g. linewidth, for @code{draw curve}) are set by
related @code{set} commands.

Each @code{draw} command checks to see whether axes have been drawn
already, and it will draw them if not.  It will also draw axes if the
existing axes correspond to different scales.  For example, if the
x-margin had been changed since the last axes were drawn, _PNAME_
will draw the appropriate new axes as well.  To prevent drawing axes,
you may do @code{draw axes none} before any other draw commands.


@menu
* Draw arc::                    Draw a portion of a circle
* Draw arrow::                  Draw arrow between two points
* Draw arrows::                 Draw (u,v) arrows at (x,y) locations
* Draw axes::                   Draw axes
* Draw box::                    Draw a rectangular box
* Draw contour::                Draw contour(s)
* Draw curve::                  Draw curve through x-y points
* Draw grid::                   Draw contour grid
* Draw image::                  Draw color or black/white image
* Draw isopycnal::              Draw curve of constant seawater density
* Draw label::                  Draw text
* Draw line from::              Draw line segment between 2 points
* Draw polygon::                Draw a polygon, possibly filled
* Draw symbol::                 Draw symbol at point or at column data
* Draw title::                  Draw title above plot
* Draw x axis::                 Draw an x-axis
* Draw x box plot at::          Draw a horizontal Tukey box plot
* Draw y axis::                 Draw a  y-axis
* Draw y box plot at::          Draw a vertical Tukey box plot
@end menu



@node   Draw arc, Draw arrow, Draw, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw arrow} command

@findex @code{draw arc} command
@cindex @code{draw arc} command
@cindex arc, drawing
@cindex drawing arcs

@c SYNTAX draw arc [filled] $xc $yc $r $angle1 $angle2;
@noindent
Draw an arc (i.e. a fraction of a circle), with the current pen color
and current linewidth.  The center of the circle is at
(@code{$xc},@code{$yc}), a coordinate specified in centimeters on the
page.  The circle radius is @code{$r} centimeters.  The drawing starts
at an angle of @code{$angle1} degrees counterclockwise from "east" (the
line of the positive x-axis) on the page, and stops at angle
@code{$angle2}.

For example, to draw the top half of a circle centered at (5cm,5cm),
with radius 1cm, use @code{draw arc 5 5 1 0 180}.

If the @code{filled} keyword is given, the arc is filled.  That makes
sense mostly for circles.



@node   Draw arrow, Draw arrows, Draw arc, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw arrow} command

@findex @code{draw arrow} command
@cindex @code{draw arrow} command
@cindex arrows, drawing single one
@cindex drawing arrow between two points

@c SYNTAX draw arrow from $x0 $y0 to $x1 $y1 [cm];

@noindent
Draw an arrow between the two indicated points, pointing towards
(@code{$x1},@code{$y1}).  If the keyword @code{cm} is not given, the
points are in user-coordinates.  If @code{cm} is given, the coordinates
are in centimeters on the page.


@node   Draw arrows, Draw axes, Draw arrow, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw arrows} command

@findex @code{draw arrows} command
@cindex @code{draw arrows} command
@cindex arrows, drawing several
@cindex drawing arrows at column data

@c SYNTAX draw arrows;
@noindent
Draw a vector field consisting of arrows emanating from the coordinates
stored in the (x, y) columns.  The lengths and orientations of the
arrows are stored in the (u, v) columns, and the scale for the (u,v)
columns is set by the commands @code{set u scale} @xref{Set u scale}, and
@code{set v scale} @xref{Set v scale}.  By default the
arrowheads are all of halfwidth 0.2 cm, but this may be changed, or the
arrowhead width may be made proportional to arrow length, by the command
@code{set arrow size} @xref{Set arrow size}.

NB To get a single arrow, instead use @code{draw arrow} @xref{Draw arrow}.




@node   Draw axes, Draw box, Draw arrows, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw axes} command

@findex @code{draw axes} command
@cindex @code{draw axes} command
@cindex axes, drawing
@cindex drawing axes

@c SYNTAX draw axes;              # style 1\Ndraw axes none;         # style 2\Ndraw axes 0;            # style 3\Ndraw axes 1;            # style 4\Ndraw axes 2;            # style 5\Ndraw axes frame;        # style 6

@c STYLE 1
draw x and y axes using the margins, scales, etc., presently active.

@c STYLE 2
draw no axes, but trick future @code{draw} commands into
thinking they have been drawn.

@c STYLE 3
draw x-y axes frame labelled at left and bottom

@c STYLE 4
draw axes without tics at top and right

@c STYLE 5
draw axes frame with no tics or labels

@c STYLE 6
same as Style 5


@node   Draw box, Draw contour, Draw axes, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw box} command

@findex @code{draw box} command
@cindex @code{draw box} command
@cindex rectangles, drawing
@cindex boxes, drawing
@cindex drawing boxes

@c SYNTAX draw box [filled] $ll_x $ll_y $ur_x $ur_y [cm]
@noindent
Draw rectangular box connecting the given coordinates of the lower-left
corner (@code{$ll_x}, @code{$ll_y}) and upper-right corner
(@code{$ur_x}, @code{$ur_y}).  If the @code{filled} keyword is given,
the rectangle is filled with the current color of the pen; otherwise
only the outline is drawn.  If the @code{cm} keyword is given, the
coordinates are taken to mean centimeters on the page; otherwise they
are taken to be in user-coordinates.  If user-coordinates are employed,
then axes will be drawn automatically, if they haven't already been
drawn.


@node   Draw contour, Draw curve, Draw box, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw contour} command

@findex @code{draw contour} command
@cindex @code{draw contour} command
@cindex contours, drawing
@cindex drawing contours

@c SYNTAX draw contour                                             # style 1\Ndraw contour $c                                          # style 2a\Ndraw contour $c unlabelled                               # style 2b\Ndraw contour $c labelled $lab                            # style 2c\Ndraw contour $min $max $inc                              # style 3a\Ndraw contour $min $max $inc unlabelled                   # style 3b\Ndraw contour $min $max $inc $inc_unlabelled              # style 4a\Ndraw contour $min $max $inc $inc_unlabelled unlabelled   # style 4b

@noindent
Draw contour(s) of gridded data.

@c STYLE 1
draw contours at an interval and over a range that is selected
automatically from scanning the grid data

@c STYLE 2
draw a single contour, which is labelled with its
numerical value by default, but which may also be unlabelled, or
labelled with an arbitrary text string

@c STYLE 3
draw contours for values ranging from @code{$min} to
@code{$max}, stepping by @code{$inc}.  In style (3a), numerical labels
are drawn on each contour line.  In style 3b, the contours are
unlabelled.

@c STYLE 4
draw contours for values ranging from @code{$min} to
@code{$max}, stepping by @code{$inc_unlabelled}.  In style (4a),
numerical labels are drawn on only those contour lines at the interval
@code{$inc}, with intervening contours being unlabelled.  In style 4b,
none of the contours are unlabelled.


@node   Draw curve, Draw grid, Draw contour, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw curve} command

@findex @code{draw curve} command
@cindex @code{draw curve} command
@cindex curves, drawing
@cindex drawing curves
@cindex x-y graphs
@cindex linegraphs
@cindex overlying lines
@cindex filled curves


@c SYNTAX draw curve;                       # style 1\Ndraw curve overlying;             # style 2\Ndraw curve filled;                # style 3\Ndraw curve filled to x $xvalue;   # style 4\Ndraw curve filled to y $yvalue;   # style 5

@c STYLE 1
draw curve, with line segments between each pair of (x,y) data,
ignoring any pairs in which either x or y is missing.  (Axes are drawn
first, if they are required.)

@c STYLE 2
as style 1, but first set pen color to white and draw a wider
curve; this makes it easier to discern one curve drawn on top of another

@c STYLE 3
draw the curve, filling in the region defined by the curve
(connecting first and last points)

@c STYLE 4
draw the curve, filling in to the indicated value of x.  A
common value for @code{$xvalue} is zero, yielding a curve filled to the
x-axis ... although the @code{draw curve filled to y} form is used much
more than this one.

@c STYLE 5
draw the curve, filling in to the indicated value of y.  A
common value for @code{$yvalue} is zero, yielding a curve filled to the
y-axis.



@node   Draw grid, Draw image, Draw curve, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw grid} command

@findex @code{draw grid} command
@cindex @code{draw grid} command
@cindex grid, drawing
@cindex drawing grid

@c SYNTAX draw grid;

Draw plus-signs at locations where grid data are non-missing.



@node   Draw image, Draw isopycnal, Draw grid, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw image} command

@findex @code{draw image} command
@cindex @code{draw image} command
@cindex image, drawing
@cindex drawing images

@c SYNTAX draw image;
Draw image, in either color or black/white, as instructed by previous
call to @code{set image colorscale} @xref{Set image colorscale}.


@node   Draw isopycnal, Draw label, Draw image, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw isopycnal} command

@findex @code{draw isopycnal} command
@cindex @code{draw isopycnal} command
@cindex TS diagrams, isopycnals
@cindex isopycnals on TS diagrams

@c SYNTAX draw isopycnal $density [$P_sigma [$P_theta]]            # style 1\Ndraw isopycnal unlabelled $density [$P_sigma [$P_theta]] # style 2

@noindent
Draw isopycnal curve, with or without label.  This curve is the locus of
temperature and salinity values which yield seawater of the indicated
density, at the indicated pressure.  The UNESCO equation of state is
used.

For the results to make sense, the x-axis should be salinity and the
y-axis should be either in-situ temperature or potential temperature.

The @code{$density} unit is kg/m^3.  If the supplied value exceeds 100
then it will be taken to indicate the actual density; otherwise it will
be taken to indicate density minus 1000 kg/m^3.  (The deciding value of
100 kg/m^3 was chosen since water never has this density; the more
intuitive value of 1000 kg/m^3 would be inappropriate since water can
have that density at some temperatures.)  Thus, 1020 and 20 each
correspond to an actual density of 1020 kg/m^3.

The reference pressure for density, @code{$P_sigma}, is in decibars
(roughly corresponding to meters of water depth).  If no value is
supplied, a pressure of 0 dbar (i.e. atmospheric pressure) is used.

The reference pressure for theta, @code{$P_theta}, is in decibars, and
defaults to zero (i.e. atmospheric pressure) if not supplied.  This
option is used if the y-axis is potential temperature referenced to a
pressure other than the surface.  Normally the potential temperature is,
however, referenced to the surface, so that specifying a value for
@code{$P_theta}' is uncommon.

By default, labels will be drawn on the isopycnal curve; this may be
prevented by supplying the keyword @code{unlabelled}.  If labels are
drawn, they will be of order 1000, or of order 10 to 30, according to
the value of @code{$density} supplied (see above).  The label format
defaults to @code{"%g"} in the C-language format notation, and may be
controlled by @code{set contour format}.  The label position may be
controlled by @code{set contour label position} command (bug: only
non-centered style works).  Setting label position is useful if labels
collide with data points.  Labels are drawn in the whiteunder mode, so
they can white-out data below.  For this reason it is common to draw
data points after drawing isopycnals.

If the y-axis is in-situ temperature, the command should be called
without specifying @code{$P_sigma}, or, equivalently, with
@code{$P_sigma = 0}.

That is, the resultant curve will correspond to the (S,T) solution to
the equation
@example
$density = RHO(S, T, 0)
@end example
where @code{RHO=RHO(S,T,p)}' is the UNESCO equation of state for
seawater.  This is a curve of constant sigma_T.

If the y-axis is potential temperature referenced to the surface,
@code{$P_theta} should not be specified, or should be specified to be
zero.  The resultant curve corresponds to a constant value of potential
density referenced to pressure @code{$P_sigma}, i.e. the (S,theta)
solution to the equation
@example
$density = RHO(S, theta, $P_sigma)
@end example
For example, with @code{$P_sigma=0} (the default), the result is a curve
of constant sigma_theta.

If the y-axis is potential temperature referenced to some pressure other
than that at the surface, @code{$P_theta} should be supplied.  The
resultant curve will be the (S,theta) solution to the equation
@example
$density = RHO(S, T', $P_sigma)
@end example
where
@example
T'=THETA(S, theta, $P_theta, $P_sigma)
@end example
where @code{THETA=THETA(S,T,P,Pref)} is the UNESCO formula for potential
temperature of a water-parcel moved to a reference pressure of
@code{Pref}.  Note that @code{theta}, potential temperature referenced
to pressure `@code{$P_theta}, is the variable assumed to exist on the
y-axis.

For an example see @ref{Example 3}
and @xref{Example 4}.


@node   Draw label, Draw line from, Draw isopycnal, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw label} command

@findex @code{draw label} command
@cindex @code{draw label} command
@cindex text, drawing
@cindex drawing text

@c SYNTAX draw label $label [centered|rightjustified|whiteunder] at $x $y [cm] [rotated $deg];

@noindent
Draw text string, stored in @code{$label} (a double-quoted or
string-valued expression), at the indicated location.  The location may
be in user coordinates (default) or centimeters on the page (if keyword
@code{cm} is given).

The text is normally left-justified, but may be centered or
right-justified by use of the keyword @code{centered} or
@code{rightjustified}.

The keyword @code{whiteunder} indicates that a white underlay box should
be drawn under the text -- this makes labels stand out over non-white
backgrounds.

The text is normally written horizontally, but may be written at an
angle if the keyword @code{rotated} is present, along with an angle
(@code{$deg}) measured in degrees counterclockwise of horizontal.




@node   Draw line from, Draw polygon, Draw label, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw line from} command

@findex @code{draw line from} command
@cindex @code{draw line from} command
@cindex drawing line segments


@c SYNTAX draw line from $x0 $y0 to $x1 $y1 [cm];

@noindent
Draw line connecting (@code{$x0},@code{$y0}) and
(@code{$x1},@code{$y1}), each specified in the user coordinate system.



@node   Draw polygon, Draw symbol, Draw line from, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw polygon} command

@findex @code{draw polygon} command
@cindex @code{draw polygon} command
@cindex drawing polygons


@c SYNTAX draw polygon [filled] ... [cm];

@noindent 
Draw polygon connecting a list of pairs of points.  Normally the polygon
is not filled, and the points are specified in user coordinates, but the
keywords indicated above may be used to cause _PNAME_ to fill the
polygon, or to interpret the coordinates as being in centimeters on the
page.



@node   Draw symbol, Draw title, Draw polygon, Draw
@comment  node-name,  next,  previous,  up
@subsection @code{draw symbol} command

@findex @code{draw symbol} command
@cindex @code{draw symbol} command
@cindex drawing axes

@c SYNTAX draw symbol;                        # style 1\Ndraw symbol $type;                  # style 2\Ndraw symbol $type at $x $y;         # style 3\Ndraw symbol $type at $x $y [cm];    # style 4

@c STYLE 1
draw a bullet-type symbol at each (@code{$x},@code{$y}) in the
column data.

@c STYLE 2
as style 1, but use indicated symbol type (see table below).

@c STYLE 3
draw indicated symbol type at indicate user coordinate.

@c STYLE 4
draw indicated symbol type at indicate coordinate on the page.

Symbols may be specified with a number or a name from the list below.
@example
NUMBER          NAME
------    ------------------
   0      "plus"
   1      "times"
   2      "box"
   3      "circ"
   4      "diamond"
   5      "triangleup"
   6      "triangleright"
   7      "triangledown"
   8      "triangleleft"
   9      "asterisk"
   10     "star"
   11     "filledbox"
   12     "bullet"
   13     "filleddiamond"
   14     "filledtriangleup"
   15     "filledtriangleright"
   16     "filledtriangledown"
   17     "filledtriangleleft"
@end example

For an example see @ref{Example 1} 
and @ref{Example 3}.


@node   Draw title, Draw x axis, Draw symbol, Draw
@comment  node-name,  next,  previous,  up
@section @code{draw title} command

@cindex @code{draw title} command
@cindex exiting the program with @code{draw title}

@c SYNTAX draw title $title;

@noindent
Draw title above plot.  @code{$title}, a double-quoted string or
expression evaluating to a string, is the text to be used for the title.

Hint: to get a title which indicates the commandfile used to create the
graph and the date on which it was created, use:
@cindex command-file name, using as a title
@c QUIETEXAMPLE draw title "`pwd`/$_command_file (`date`)";


@node   Draw x axis, Draw x box plot at, Draw title, Draw
@comment  node-name,  next,  previous,  up
@section @code{draw x axis} command

@cindex @code{draw x axis} command
@cindex axes, drawing manually

@c SYNTAX draw x axis [at bottom|top|@{$y [cm]@} [lower|upper]];

@noindent
Draw an x-axis, optionally at a specified location and of a specified
style.

The location may be specified by the words @code{bottom} or @code{top},
or by specifying the desired y-location (either in user-units, or, if
the keyword @code{cm} is present, in centimeters on the page).  The
@code{bottom} and @code{top} styles result in the labels going below and
above the axis, respectively (appropriate for axes at bottom and top of
an axis frame).  If the location is specified, however, the labels are
drawn below the axis, unless the trailing keyword @code{upper} is
specified.  In general, the trailing optional keywords @code{lower} and
@code{upper} allow one to specify that labels should appear below the
axis or above it, respectively.


@node   Draw x box plot at, Draw y axis, Draw x axis, Draw
@comment  node-name,  next,  previous,  up
@section @code{draw x box plot at} command

@cindex @code{draw x box plot at} command
@cindex statistics, Tukey box-plots
@cindex Tukey box-plots
@cindex box-plots

@c SYNTAX draw x box plot at $y [size $cm];
@noindent
Draw a Tukey box plot horizontally, indicating graphically the
statistical properties of the x-column.  They are in the form of
horizontally-oriented box with line segments (``whiskers'') hanging off
opposite ends.  Somewhere within the box is a vertical line indicating
the median x-value.  The ends of the boxes indicate the first and third
quartiles of the x-values, q1 and q3.  The value of q3 minus q1 is
called the inter-quartile range.  The whiskers (i.e., the lines with
crosses at the end) extend from q1 and q3 to the furthest data points
which are still within a distance of 1.5 inter-quartile ranges from q1
and q3.  Beyond the whiskers, all outliers are shown: open circles are
used for data within a distance of 3 inter-quartile ranges beyond q1 and
q3, and in closed circles beyond that.



@node   Draw y axis, Draw y box plot at, Draw x box plot at, Draw
@comment  node-name,  next,  previous,  up
@section @code{draw y axis} command

@cindex @code{draw y axis} command
@cindex axes, drawing manually

@c SYNTAX draw y axis [at left|right|@{$x [cm]@} [left|right]];
@noindent
Draw a y-axis, optionally at a specified location and of a specified
style.

The location may be specified by the words @code{left} or @code{right},
or by specifying the desired x-location (either in user-units, or, if
the keyword @code{cm} is present, in centimeters on the page).  The
@code{left} and @code{right} styles result in the labels going to the
left of and the right of the axis, respectively (appropriate for axes at
left and right of an axis frame).  If the location is specified,
however, the labels are drawn to the left of the axis, unless the
trailing keyword @code{right} is specified.  In general, the trailing
optional keywords @code{left} and @code{right} allow one to specify that
labels should appear to the left of the axis or the the right of it,
respectively.


@node   Draw y box plot at, Exit, Draw y axis, Draw
@comment  node-name,  next,  previous,  up
@section @code{draw y box plot at} command

@cindex @code{draw y box plot at} command
@cindex statistics, Tukey box-plots
@cindex Tukey box-plots
@cindex box-plots

@c SYNTAX draw y box plot at $x [size $cm];
@noindent
Draw a Tukey box plot vertically, indicating graphically the statistical
properties of the y-column.  They are in the form of vertically-oriented
box with line segments (``whiskers'') hanging off opposite ends.
Somewhere within the box is a horizontal line indicating the median
y-value.  The ends of the boxes indicate the first and third quartiles
of the y-values, q1 and q3.  The value of q3 minus q1 is called the
inter-quartile range.  The whiskers (i.e., the lines with crosses at the
end) extend from q1 and q3 to the furthest data points which are still
within a distance of 1.5 inter-quartile ranges from q1 and q3.  Beyond
the whiskers, all outliers are shown: open circles are used for data
within a distance of 3 inter-quartile ranges beyond q1 and q3, and in
closed circles beyond that.



@node   Exit, Glob, Draw y box plot at, Commands
@comment  node-name,  next,  previous,  up
@section @code{exit} command

@findex exit subroutine
@cindex @code{exit} command
@cindex exiting the program with @code{exit}

@c SYNTAX exit EXPR
@noindent
Exit the program.  On operating systems which permit exit codes, this
exits with an exit code given by the integer part of the indicated
expression.

The expression should be numerical, not textual.  Expressions that can
be recognized as textual at compile-time (e.g. quoted strings) result in
compilation errors.  Expressions that are determined to be textual at
run-time are converted to numerical values in the usual way -- if the
string would be read as a number by a human, _PNAME_ will use that
numerical value.


@node   Glob, Index, Exit, Commands
@comment  node-name,  next,  previous,  up
@section @code{glob} subroutine

@findex index
@cindex @code{glob} subroutine
@cindex filename, expansion

@c SYNTAX glob(EXPR)
@noindent
Return a list of filenames that result from expanding @code{EXPR}, which
is either a double-quoted string or a string-valued expression.  For
example, to print a list of files ending in @code{.gre}, you could do:

@c QUIETEXAMPLE foreach $f (glob("*.gre")) @{\N    print "$f\n";\N@}




@node   Index, Last, Glob, Commands
@comment  node-name,  next,  previous,  up
@section @code{index} subroutine

@findex index
@cindex @code{index} subroutine

@c SYNTAX index(STR, SUBSTR)\Nindex(STR, SUBSTR, OFFSET)
@noindent
Return position of string @code{SUBSTR} within source string @code{STR},
measured by the offset from the start of @code{STR}.  If @code{OFFSET}
is provided, the search commences at @code{OFFSET} characters from the
start of @code{STR}.  A negative or zero value for @code{OFFSET} means
to begin searching at the start of @code{STR}, just as if no
@code{OFFSET} were given.  If @code{OFFSET} is greater than the length
of @code{STR}, or if @code{SUBSTR} is not found, the value @code{-1} is
returned.

Awk users should note that the returned offset starts at zero, not at
one.

For example, the following code indicates that the substring is found at
offsets of 2, 12, and 22.

@c EXAMPLE $str = "a rose is a rose is a rose";\N$substr = "rose";\N$off = -1;			# start at beginning\Nwhile (-1 != ($off = index($str, $substr, $off))) @{\N    print "'$substr' found in '$str' at offset $off\n";\N    $off++;			# move past\N@}



@node   Last, Ls, Index, Commands
@comment  node-name,  next,  previous,  up
@section @code{last} command
@findex last
@cindex @code{last} command

@c SYNTAX last;
@noindent
Jump out of the enclosing loop, landing just after the end of the loop.
Almost always this is associated with an @code{if} statement of some
form, e.g. 

@c QUIETEXAMPLE # some code to define a vector $x[0], $x[1], ... $x[$n-1].\Nfor ($i = 0; $i < $n; $i += 1) @{\N    last if ($x[$i] < 0);\N@}\Nprint "Index of first negative x is $i\n";


@noindent (The @code{last} command in _PNAME_ acts in a similar way to that
in Perl, except that one cannot jump to a named location as one can, as
an option, in Perl.  C users will recognize that @code{last} in _PNAME_
works just like @emph{break} in C.)


@c TESTFILE tst-last


@node   Ls, My, Last, Commands
@comment  node-name,  next,  previous,  up
@section @code{ls} command
@findex ls
@cindex @code{ls} command

@c SYNTAX ls;      # style 1\Nls $dir; # style 2

@c STYLE 1
list files in current directory.

@c STYLE 2
list files in the directory named @code{$dir}.

C-shell unix conventions are used in the directory name @xref{Cd}.
The current directory can be printed by @code{pwd} and can be set by
@code{cd}.



@node   My, New Page, Ls, Commands
@comment  node-name,  next,  previous,  up
@section @code{my} command

@findex my
@cindex @code{my} command, making variables local to block
@cindex variables, making local to a block

@c SYNTAX my $scalar;                         # style 1a\Nmy $scalar1, $scalar2;              # style 1b\Nmy ($scalar1, $scalar2);            # style 1c\Nmy $scalar = EXPRESSION;            # style 2\Nmy @@array;                          # style 3
@noindent

Make indicated scalar or vector variable local to the enclosing block of
code.  (A block is a list of commands inside curly braces, such as a
part of an if statement, a loop, or a cmd.)

Upon exit from the block, the previous value of the variable (if there
was one) is recovered.

@c STYLE 1
the scalar variable/variables is/are initialized to
numerical value of zero and string value of an empty string.  
Any number of scalars may be given, separated by commas and optionally 
enclosed in parentheses.

@c STYLE 2
the scalar variable is assigned the value of the indicated expression.  
BUG: Perl users should note that this only works for the case in 
which single scalars are named.  This is more readible anyway.

@c STYLE 3
the vector variable is created but has no content unless you assign to
it in the normal way


@c TESTFILE tst-my


@node   New Page, Pscomment, My, Commands
@comment  node-name,  next,  previous,  up

@section @code{new page} command
@cindex @code{new page} command

Finish the present page, and start a new page.  All settings (of
linewidth, axes, landscape/portrait, etc) are retained on the new page.


@node   Pscomment, Open, New Page, Commands
@comment  node-name,  next,  previous,  up

@section @code{pscomment} command
@cindex @code{pscomment} command
@cindex PostScript file, inserting comments
@cindex debugging, inserting comments in PostScript file

@c SYNTAX pscomment expr;

@noindent
Insert the result of executing the indicated expression as a comment in
the PostScript file.  Normally, @code{expr} is a double-quoted string.
This command is mostly used by the _PNAME_ developer.



@node   Open, Package, Pscomment, Commands
@comment  node-name,  next,  previous,  up

@section @code{open} subroutine

@findex open
@cindex @code{open} subroutine
@cindex file handles
@cindex i/o, opening files
@cindex file handles

@c SYNTAX open(FILEHANDLE, $name) # style 1\Nopen($name)             # style 2\Nopen $name              # style 3\Nopen WORD               # style 4

@noindent
In the first form, open file with indicated handle and name, for later
reading/writing by various @code{read} commands @xref{Read}.
@code{$name} is the filename, either in a double-quoted string or in a
string-valued expression, e.g.

@c QUIETEXAMPLE open(IN, "in.dat") or die "Cannot open in.dat\n";
@c QUIETEXAMPLE $f = "in.dat";\Nopen(IN, "in.dat") or die "Cannot open in.dat\n";

Forms 2 and 3 illustrate that the filename expression need not be
enclosed in parentheses if the file handle is not given.  Style 4
indicates that quotes are not required on the filename.  The @code{WORD}
in Style 4 stands for text that is not enclosed in quotes; this text may
contain periods and underlines (but not spaces or commas, or
mathematical operators)

@c EXAMPLE open "in.dat" or die "Cannot open in.dat\n";

In the forms (2-4) in which a file handle is not supplied, the file is
opened with default handle @code{"ANONYMOUS"}.  This is the default
handlename in @code{read} commands if no handle is supplied
@xref{Read}.


@code{open} is a function which returns @code{1} if the file can be
opened and @code{0} otherwise.  It's a good idea to check the return
value, as in:
@c QUIETEXAMPLE open(IN, "in.dat") || die "Cannot open in.dat.\n";

The FILEHANDLE must be a bare word, without quotes.  In particular, it
may not be a variable name.  Furthermore, the handle name may @emph{not}
contain any lower-case letters.  (Perl users will note that this is also
recommended in Perl, but not required there.)

Normally the file is open for input only -- writing is not permitted on
such a file.  But if the filename as given begins with the greater-than
character (@code{>}) then that character is skipped, and the resultant
filename is opened for output only.  If the filename begins with the
less-than character (@code{<}) then the indicated file is opened for
reading only -- but this leading character is not required since it is
the default.

@emph{Pipes}: If the last character in the filename is @code{|}, then
the name is interpreted as a command to pass to the operating system,
and input will be from the result of this command.  (This option is not
compatible with the @code{<} and @code{>} options of last paragraph.)
For example, to only work on the first 10 lines of a file you might do
@c QUIETEXAMPLE open(IN, "head -10 in.dat |") or die "Cannot open\n";

If you wish to send a dollarsign to the operating system, you must
protect it with a backslash so that _PNAME_ doesn't try to interpolate
it as a variable.  For example, the following makes @code{IN} contain
two columns, that @code{awk} has extracted from the first and tenth
columns from the file @file{in.dat}
@c QUIETEXAMPLE open(IN, "awk '@{print \$1,\$10@}' in.dat |");


@cindex URL, using in names of data/command files
@cindex web-based file access
@cindex internet file access
@cindex files, given as URL names

@emph{Web-delivered files}: If the filename begins with @file{http://},
@file{ftp://}, or @file{file://}, then the file is considered to be a
web address, and the operating-system command @code{lynx} is used to get
a copy of the file.  For example:

@cindex compressed files
@cindex gzipped files
@cindex files, compressed
@cindex @code{.Z} suffix in filenames
@cindex @code{.gz} suffix in filenames
@emph{Compressed files}: If the filename ends in @file{.Z}, then it will
first be uncompressed with the unix @code{uncompress} program.  If the
filename ends in @file{.gz}, it will first be uncompressed with the GNU
@code{gunzip} program.

@c QUIETEXAMPLE $url = "file://www.phys.ocean.dal.ca/~kelley/gri/examples/example1.dat";\Nopen(IN, $url) or die "Cannot open the URL $url";\Nread columns x=1 y=2;\Ndraw curve;


For pipe-accessed and web-accessed files, the input comes from a
temporary file that is erased exit time.  (Running _PNAME_ with the flag
@code{-d 4} will reveal what system command is used, and where the
temporary file is put.


@node   Package, Print, Open, Commands
@comment  node-name,  next,  previous,  up

@section @code{package} command

@findex package
@cindex @code{package} command
@cindex namespaces, controlling with @code{package} command

@c SYNTAX package NAMESPACE

Set namespace to @code{NAMESPACE}, as in Perl.  This is often used
inside of modules, which are called with the @code{use} command
@xref{Use}.

@emph{BUG: This documentation is not complete}

@emph{BUG: This does not work yet (98-dec-21, version 0.1.17)}





@node   Print, Printf, Package, Commands
@comment  node-name,  next,  previous,  up

@section @code{print} commands

@findex print
@cindex @code{print} commands
@cindex @code{$_} variable, implicit printing of

@vindex @code{$_}, implicit printing of

There are several varieties of @code{print} command.

@c SYNTAX print                    # 1\Nprint FILEHANDLE         # 2\Nprint ITEMS              # 3\Nprint FILEHANDLE ITEMS   # 4\Nprint variables          # 5\Nprint columns            # 6\Nprint grid               # 7\Nprint image              # 8
@noindent
With no file handle specified, output is to the standard output file
(also available as the handle @code{STDOUT}).  If a file handle is
specified, a check is first done that the file was opened as an output
file -- if not, an error results.

@code{ITEMS} is a comma-separated list of items.


@itemize @bullet
@item
Forms 1 and 2: with no mention of the item to print, causes
_PNAME_ to print the value of the variable @code{$_}.  This is
most often used in the Perl-like syntax, in which @code{$_} will have
been defined by a file input in a @code{while} statement.  For an
example, @xref{While and Until}.

@item
@c STYLE 3-4
(@code{print ... ITEMS}): print a comma-separated list of
items, each of which may be a variable name, a numerical expression, or
a string, e.g.
@c QUIETEXAMPLE $i = 0;\Nprint $i, " ", $i + 1, "\n";

@cindex newline character
@cindex tab character
@cindex escape code for newline
@cindex escape code for tab
This produces the output @code{0 1} followed by a newline.  The newline
is indicated by the character sequence @code{\n}, just as it is in
C-like languages.  Similarly, @code{\t} indicates a tab.

Note that @emph{no space} is printed between numeric items (such as the
variable names in this example), and that a newline is @emph{not}
printed unless you tell it to be printed.

@item
@c STYLE 5
@code{print variables}: print a list of all existing variables.  This is
quite useful for learning about _PNAME_, but seldom is used in real
programs.  @emph{BUG: this command produces inaccurate results for 'my'
variables'}.  (Note to author: I'll fix this by (1) allowing variables
to be 'hidden', and hiding them instead of unnaming them, when they go
out of scope and then (2) storing a wnode-list of currently-unhidden
variable indices in a tree associated with the command.  This affects
parser.y/reduce_block_level, parser.h/erase_name.)

@item
@c STYLE 6
@code{print columns}: print list of column data, normally as
created by the command @code{read columns} @xref{Read columns}.  This
is quite useful in developing and debugging _PNAME_ programs.

@item
@c STYLE 7
@code{print grid}: print information about the current grid.


@item
@c STYLE 8
@code{print image}: print information about the current image.
@end itemize

@c TESTFILE tst-print


@node   Printf, Pwd, Print, Commands
@comment  node-name,  next,  previous,  up

@section @code{printf} command

@findex printf
@cindex @code{printf} commands
@cindex formatted printing, with @code{printf}
@cindex printing with format control, with @code{printf}

@c SYNTAX printf FORMAT, LIST;               # style 1\Nprintf FILEHANDLE FORMAT, LIST;    # style 2

@c STYLE 1
print to STDOUT the items in the comma-separated list, using
the indicated format (see below).

@c STYLE 2
as style 1, but print to named filehandle.

There are several varieties of @code{printf} command, which is used to
print formatted information to a file (or to the standard output I/O
stream).  To save the results into a string, instead of printing them,
use @code{sprintf} @xref{Printing Into Strings}.

The format is in the style of the C language (also used by many other
languages, such as perl).  Special tags are used in the format to
indicate how to print the information stored in each of the items in the
list.  There is normally one tag for each item in the list; if the list
is exhausted before the tags are used up, then the tags are considered
to be normal text and are simply reproduced.  All items that are not
tags are simply reproduced exactly, with the special escape codes
@code{\n} and @code{\t} being used to indicate newlines and tabs,
respectively.

Formatting tags begin with the character @code{%} and end with a single
character telling the type of the item.  In between there may be
optional indicators for the field width and, for floating point items,
the number of decimal places to use.

The tag @code{%s} is used for textual items.  The tags @code{%f},
@code{%g} and @code{%e} for floating-point numerical items.  The tag
@code{%d} is used for integral numerical items; when it is used, only
the integer part of the item is printed.

Each of the tag types accepts an optional field-width designator, given
in an integer that may follow the @code{%} character.  The three
floating-point tags may also have an additional designator for number of
decimal places, given after a period between the @code{%} and the
@code{f}, @code{g} or @code{e}.

Examples:
@example
printf "%f\n",     1/9; # prints  0.111111    
printf "%.2f\n",   1/9; # prints  0.11        
printf "%10.2f\n", 1/9; # prints        0.11  
printf "%.2g\n",   1/9; # prints  0.11        
printf "%e\n",     1/9; # prints  1.111111e-01
printf "%.2e\n",   1/9; # prints  1.11e-01    
@end example


@node   Pwd, Query, Printf, Commands
@comment  node-name,  next,  previous,  up

@section @code{pwd} command

@findex pwd
@cindex @code{pwd} command
@cindex directory, printing current

@c SYNTAX pwd;

@noindent
Print current working directory, as set by @code{cd}.



@node   Query, Read, Pwd, Commands
@comment  node-name,  next,  previous,  up

@section @code{query} command

@findex query
@cindex @code{query} command

@c SYNTAX query $var;                         # style 1\Nquery $var "prompt"                 # style 2

@c STYLE 1
print a message asking user to type in a value for the
named variable.  The value received from the user's keyboard, which may
be textual or numerical, is then stored in the named variable.

@c STYLE 2
print indicated prompt and then accept the value for the
variable.  Note that no blank space or newline is inserted after the
prompt; if you want that you must put it in the prompt string.


@node   Read, Read grid x, Query, Commands
@comment  node-name,  next,  previous,  up

@section @code{read} commands

@findex read
@cindex @code{read} command

There are several varieties of @code{read} commands.  Each reads
something, either from a datafile opened by the @code{open} statement
or from the command file @xref{Open}.


@menu
* Read grid x::                 Read x-component of grid
* Read grid y::                 Read y-component of grid
* Read grid data::              Read data (matrix) of grid
* Read variable::               Reading individual variables
* Read columns::                Reading column data
@end menu


@node   Read grid x, Read grid y, Read, Read
@comment  node-name,  next,  previous,  up
@subsection Reading grid x-component
@cindex reading x-component of grid
@cindex reading grid x-component
@cindex grid, reading x-component

@c SYNTAX read grid x;                        # style 1\Nread grid x $columns;               # style 2\Nread grid x HANDLE;                 # style 3\Nread grid x $columns HANDLE;        # style 4

@c STYLE 1
read x-component of grid (that is, the x-coordinates of
the column locations) from the @code{ANONYMOUS} filehandle, stopping
when a blank line or end of file is encountered.

@c STYLE 2
as style 1, except that reading ceases when
@code{$columns} line have been read.

@c STYLE 3
as style 1, except that reading is from indicated
file-handle.

@c STYLE 4
as style 2, except that reading is from indicated
file-handle. 



@node   Read grid y, Read grid data, Read grid x, Read
@comment  node-name,  next,  previous,  up
@subsection Reading grid y-component
@cindex reading y-component of grid
@cindex reading grid y-component
@cindex grid, reading y-component

@c SYNTAX read grid y;                        # style 1\Nread grid y $rows;                  # style 2\Nread grid y HANDLE;                 # style 3\Nread grid y $rows HANDLE;           # style 4

@c STYLE 1
read y-component of grid (that is, the x-coordinates of
the row locations) from the @code{ANONYMOUS} filehandle, stopping when a
blank line or end of file is encountered.

@c STYLE 2
as style 1, except that reading ceases when @code{$rows}
line have been read.

@c STYLE 3
as style 1, except that reading is from indicated
file-handle.

@c STYLE 4
as style 2, except that reading is from indicated
file-handle. 

In all styles, the grid locations are one per line in the file.  The
first number in the file yields the y-value for the first line in the
grid datafile.


@node   Read grid data, Read variable, Read grid y, Read
@comment  node-name,  next,  previous,  up
@subsection Reading grid data
@cindex reading grid data
@cindex grid, reading data

@c SYNTAX read grid data;                       # style 1\Nread grid data $rows $columns;        # style 2\Nread grid data HANDLE;                # style 3\Nread grid data $rows $columns HANDLE; # style 4

@c STYLE 1
read grid data from @code{ANONYMOUS} filehandle,
assuming that the grid width and height are known, from previous calls
to @code{set x grid} (or @code{read grid x}) and @code{set y grid} (or
@code{read grid y}).

@c STYLE 2
as style 1, but specifying the grid width
(@code{$columns}) and height (@code{$rows}).  If the geometry has
already been specified with @code{set x grid} (or @code{read grid x})
and @code{set y grid} (or @code{read grid y}), then the values given
here must agree.

@c STYLE 3
as style 1, except that reading is from indicated
file-handle.

@c STYLE 4
as style 2, except that reading is from indicated
file-handle.




@node   Read variable, Read columns, Read grid data, Read
@comment  node-name,  next,  previous,  up
@subsection Reading a single variable, or list of variables
@cindex reading variables
@cindex variables, reading

@c SYNTAX read FILEHANDLE $var;\Nread FILEHANDLE $var_1, $var_2, ..., $var_N;\Nread $var;\Nread $var_1, $var_2, ..., $var_N;

@noindent
In the first two forms, read one or more variables, as named, from the
named file handle @xref{Open}.

In the second form, read from a default file handle.  If a file had
previously been opened using the anonymous-handle method @xref{Open},
then read from that file.  Otherwise, read from standard input, that is
from the handle @code{STDIN}.


@c TESTFILE tst-read




@node   Read columns, Regress, Read variable, Read
@comment  node-name,  next,  previous,  up

@subsection Reading column data
@findex read columns
@cindex @code{read columns} command
@cindex column data, how to read with @code{read columns} command

@c SYNTAX read columns HANDLE ...;      # style 1\Nread columns HANDLE ... ROWS; # style 2\Nread columns ...;             # style 3\Nread columns ... ROWS;        # style 4\N

@noindent
In styles 1 and 2, columnar data are to be read from the indicated
filehandle.  In styles 3 and 4, the input is to be from an anonymous
file handle, either @code{ANONYMOUS}, if a file is open and was created
with the anonymous opening mechanism @xref{Open}, or from standard
input, i.e. with handle @code{STDIN}.

The available column names are @code{y}, @code{z},
@code{u}, and @code{v}.  For x-y plots, @code{x} and @code{y} are used.
For contouring, @code{z} is used in addition.  For vector-plots,
@code{u} and @code{v} are used in addition to @code{x} and @code{y}.

The ellipses (@code{...}) in the code samples above stands for a
description of the column placement in the data file.  During reading,
the file is processed line by line.  The number of lines to be read may
be specifiec with the @code{ROWS} number; if this is not given, _PNAME_
reads until either a blank line is encountered or the end of the input
file is encountered.

During reading, each line is broken up into items separated by
whitespace (one or more space or tab characters).  These items are
internally numbered 1, 2, etc.  There are two ways to assign particular
items in the data file to columns, the first being satisfactory for
simple cases, the second being more powerful.

Method 1: simply present the desired column in the order they appear in
the data file.  If the first item is to be @code{x} and the second
@code{y}, use @code{read columns x y}; if the columns were reversed in
the file you'd use @code{read columns y x}.

Method 2: for each column, specify the a numerical value for the column
sequence number.  Sequence numbers commence at unity.  Thus, the command
@code{read columns x=1 y=2} indicates that x is in the first column and
y in the second, and is equivalent to @code{read columns x y}.

Here is an example of how to let the datafile indicate which column is
which.  In the file @file{in.dat}, the first line contains two numbers,
indicating the columns in the succeeding lines which contain the
@code{x} and @code{y} data, respectively.

@c QUIETEXAMPLE open(IN, "in.dat") or die "cannot open in.dat\n";\Nread IN $xcol, $ycol; # header tells which col is x, which y\Nread columns IN x=$xcol y=$ycol;

The existing column data may be seen by the @code{print columns} command
@xref{Print}.


@node   Regress, Reorder, Read columns, Commands
@comment  node-name,  next,  previous,  up

@section @code{regress} command

@findex regress
@cindex @code{regress} command
@cindex statistics, regression on columns
@cindex columns, regression
@cindex linear regression
@cindex curve-fitting

@c SYNTAX regress y vs x;         # style 1\Nregress x vs y;         # style 2

@c STYLE 1
Perform linear regression of column data, with @code{y} as a
linear function of @code{x}.

@c STYLE 2
Perform linear regression of column data, with @code{x} as a
linear function of @code{y}.

In both styles, the calculated intercept and its 5 percent confidence
interval are stored in @code{$_coeff0} and @code{$_coeff0_sig}.  The
slope and its 95 percent confidence interval are stored in
@code{$_coeff1} and @code{$_coeff1_sig}.  The deviation of regression
(unexplained variance) is stored in @code{$_regression_deviation}.  The
example below shows how to read data and draw a regression line over the
points.

@example
open test.dat;
read columns x=1 y=2;
close;
set symbol size 0.2;
draw symbols bullet;
regress y vs x;
draw line from $_xleft ($_coeff0 + $_xleft * $_coeff1)
    to $_xright ($_coeff0 + $_xright * $_coeff1);

print "REGRESSION RESULTS:\n";
print "Intercept: ", $_coeff0, " +/-", $_coeff0_sig, "\n";
print "Slope:     ", $_coeff1, " +/-", $_coeff1_sig, "\n";
print "Squared correlation coefficient = ", $_R2, "\n";
print "Model misfit = ", $_regression_deviation, "\n";
@end example




@node   Reorder, Return, Regress, Commands
@comment  node-name,  next,  previous,  up

@section @code{reorder} command

@findex reorder
@cindex @code{reorder} command

@c SYNTAX reorder columns randomly;

@noindent
Reorder column data randomly, by swapping values at indices.  The x, y,
etc, columns are swapped together, maintaining connectivity of data
points.  This command is useful when drawing colored symbols at data
points, e.g. with hue determined by the value of the z-column.
Reordering randomly prevents the most-recently drawn data points from
obscuring the color below.  The seed for the random number generator is
controlled by the PID (process-id) of the job, and therefore the
reordering will be different every time the _PNAME_ script is
executed.




@node   Return, Rewind, Reorder, Commands
@comment  node-name,  next,  previous,  up

@section @code{return} command

@findex return
@cindex @code{return} command

@c SYNTAX return;\Nreturn EXPR;

@noindent
Return from subroutine.  If a value is supplied, in an expression,
constant, or variable, then return that value; otherwise return 0.
@xref{Sub}.




@node   Rewind, Set, Return, Commands
@comment  node-name,  next,  previous,  up

@section @code{rewind} subroutine

@findex rewind
@cindex @code{rewind} subroutine

@c SYNTAX rewind                              # style 1\Nrewind()                            # style 2\Nrewind HANDLE                       # style 3\Nrewind(HANDLE)                      # style 4

@noindent
Rewind a file.  If no handle is supplied (styles 1 and 2), the ANONYMOUS
filehandle is rewound.  If a handle is supplied (styles 3 and 4), then
the file with the indicated handle is rewound.  For more on filehandles
@xref{Open}.The subroutine always returns a numerical value of @code{1}.



@node   Set, Set arrow size, Rewind, Commands
@comment  node-name,  next,  previous,  up
@section @code{set} commands

@emph{THIS SECTION UNDER CONSTRUCTION.}  Gri users will note that some
things are missing, e.g.  map-type axes, contours, etc.  These will come
gradually as I get time to code them in and as I need them for my own
scientific research.  If you are a Gri user who is trying out
_PNAME_, feel free to email me your requests for the Gri commands
you need most, so I can put them further up on my 'to-do' list.  My
email is
@c HTML <A HREF="mailto:Dan.Kelley@Dal.CA"> 
<_AUTHOR_EMAIL_>
@c HTML </A>



@code{set} commands are used to set various parameters for drawing.
They apply @emph{only} to drawing that is done after execution of the
@code{set} command.  For example, the code

@c QUIETEXAMPLE open "my.dat";\Nread columns x y;\Ndraw axes;\Ndraw curve;\Nset color red

@noindent
will draw a black curve, not a red curve.  To get black axes and a red
curve, you could do this:

@c QUIETEXAMPLE open "my.dat";\Nread columns x y;\Ndraw axes;\Nset color red\Ndraw curve;


The @code{set} commands are:
@menu
* Set arrow size::              Set size of arrowheads
* Set arrow type::              Set type of arrowheads
* Set clip::                    Set to clip outside axes range
* Set color::                   Set color for drawing
* Set contour format::          Set format for numbers on contours
* Set contour label position::  Set labelling for contours
* Set dash::                    Set dash characteristics of lines
* Set flag::                    Set a flag
* Set font encoding::           Set encoding vector for fonts
* Set font size::               Set size of text
* Set font to::                 Set text font family
* Set graylevel::               Set brightness of b/w pen
* Set image colorscale::        Set colorscale for color or b/w image
* Set image range::             Set range of user-units in image
* Set line cap::                Set cap for line ends
* Set line join::               Set join for line intersections
* Set line width::              Set width of lines
* Set map projection::          Set map projection
* Set missing value::           Set data value to consider "missing"
* Set page::                    Set page orientation
* Set symbol size::             Set diameter of symbols
* Set tic size::                Set length of major tics on axes
* Set tics::                    Set whether axis tics point in or out
* Set u scale::                 Set scale for x-component of arrows
* Set v scale::                 Set scale for y-component of arrows
* Set x axis::                  Set range and tics on x-axis
* Set x format::                Set format for numbers on x-axis
* Set x grid::                  Set x characteristics of grid (for contours)
* Set x margin::                Set space to left of axes frame
* Set x name::                  Set name of x variable for axis
* Set x size::                  Set length of x-axis
* Set x type::                  Set type of x-axis (linear, log, etc)
* Set y axis::                  Set range and tics on y-axis
* Set y format::                Set format for numbers on y-axis
* Set y grid::                  Set y characteristics of grid (for contours)
* Set y margin::                Set space below axes frame
* Set y name::                  Set name of y variable for axis
* Set y size::                  Set length of y-axis
* Set y type::                  Set type of y-axis (linear, log, etc)
@end menu



@node   Set arrow size, Set arrow type, Set, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set arrow size} command
@findex @code{set arrow size} command
@cindex @code{set arrow size} command

@c SYNTAX set arrow size $size;                     # style 1\Nset arrow size as $p percent of length;   # style 2\Nset arrow size default;                   # style 3

@c STYLE 1
set halfwidth of arrowheads (in cm), independent of arrow length.

@c STYLE 2
set so that halfwidth is given percentage of arrow length.

@c STYLE 3
set to default halfwidth of 0.2 cm.


@node   Set arrow type, Set clip, Set arrow size, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set arrow size} command
@findex @code{set arrow type} command
@cindex @code{set arrow type} command
@cindex @code{arrow, setting type of head}
@cindex @code{arrow heads, setting type of}

@c SYNTAX set arrow type $t;

Set type of arrow, according to the value of @code{$t}, rounded to the
nearest integer.  A rounded @code{$t} value of 0 yields the default
arrows, drawn with three line strokes.  Value 1 yields outlined arrows,
sometimes used on definition sketches.  Value 2 yields filled,
swept-back arrow heads.

This command uses the ``line join'' parameters that are presently active
@xref{Set line join}.  So, by default, the arrow ends are rounded
(because the default line-join parameter is 1).  To get pointy ends,
first set the line join parameter to 0.



@node   Set clip, Set color, Set arrow type, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set clip} command
@findex @code{set clip} command
@cindex @code{set clip} command
@cindex clipping data

@c SYNTAX set clip on;                        # style 1\Nset clip off;                       # style 2\Nset clip rectangle $xl $xr $yb $yt; # style 3\Nset clip to curve;                  # style 4

@c STYLE 1
set clip region to axes frame, preventing all drawing commands
from producing marks outside the frame.  (NOTE: this prevents drawing
tics, etc, on axes, so be sure to draw axes first if you want them.)

@c STYLE 2
turn clipping off, allowing all non-missing data to be
drawn.

@c STYLE 3
set to indicated clip rectangle.  The lower-left corner
is at @code{$xl,$yb} and the upper-right corner is at @code{$xr,$yt}.

@c STYLE 4
set clipping path to equal the current curve (as would have been read
by @code{read columns} @xref{Read columns}, for example).

@c CLICKABLE_SAMPLE figures/clip_to_curve.gif figures/clip_to_curve.html


@node   Set color, Set contour format, Set clip, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set color} command
@findex @code{set color} command
@cindex @code{set color} command
@cindex color, setting
@cindex rgb, setting color
@cindex hsv, setting color
@cindex x11 colordatabase

@c SYNTAX set color $name;                       # style 1\Nset color rgb $red $green $blue;       # style 2\Nset color hsv $hue $saturation $value; # style 3

@noindent
Set color of pen for future drawing, to be used for text, axes, curves,
contours, etc -- that is, to be used for all items except images.

@c STYLE 1
@code{$name} is a double-quoted string, or a string-valued
expression naming the desired color.  This may be a built-in color or one
defined by a @code{read colornames} command.  Built-In colors are:
@code{white}, @code{LightGray}, @code{darkslategray}, @code{black},
@code{red}, @code{brown}, @code{tan}, @code{orange}, @code{yellow},
@code{green}, @code{ForestGreen}, @code{cyan}, @code{blue},
@code{skyblue}, and @code{magenta}.

@c STYLE 2
the value of @code{$hue} specifies the color to use,
@code{$saturation} the saturation (or purity, or cleanness) of the
color, and @code{$value} the value (or brightness).  Each of these
numbers should be specified within the range of 0 to 1, and are clipped
to these endpoints if not.  A hue of 0 means red, 1/3 means green, 2/3
means blue.  Values between 2/3 and 1 blend from magenta back to red,
and folks find these colors so similar to pure red that a hue range of 0
to 2/3 is a common choice.  A @code{$saturation} of 0 means that none of
the hue is present in the color, and a saturation of 1 means that the
color is a pure match to the indicated hue.  In painterly terms, one may
think of @code{1-$saturation} as indicating the fraction of black paint
mixed with the chosen hue.  Similarly, in painterly terms, one may think
of the @code{$value} parameter as the brightness of the light shone upon
the chosen color.  A @code{$value} of 0 is black, regardless of the hue,
and a value of 1 is as bright as the color can be.  A conventional
spectrum results with @code{$hue} varies smoothly between 0 and 1, with
@code{$saturation} and @code{$value} set to 1.

@c STYLE 3
the values of @code{$red}, @code{$green}, and @code{$blue}
represent the components of the color, in a so-called additive mixing
scheme.  (The values are expected to range between 0 and 1 and are
clipped to these limits if not.)  This scheme is @emph{not} the
intuitive scheme corresponding to painting, but rather a somewhat
counter-intuitive scheme corresponding to mixing light.  Thus, combining
red and green in equal parts yields yellow (as it does when combining
filtered lights), not grey (as it does when mixing paints).

Many tools are available to help you define colors, including computer
programs, graphics textbooks, and code-books available at artists shops.
Note that computer screens and printers often represent colors somewhat
differently, so if you're after printed output you should do test cases
on the printer you plan to use.

@c HTML Demonstration of meaning of Hue, Saturation and Value
@c HTML <p>
@c HTML <IMG SRC="./figures/hue_demo.gif" width=459 align=top>
@c HTML <A HREF="./figures/hue_demo.html">hue_demo.gre</A>
@c HTML <p><p>

@c HTML Brightness and saturation results for hue of 0.1.<p>
@c HTML <IMG SRC="./figures/HSV_0.1.gif" width=333 align=top>
@c HTML <p><p>

@c HTML Brightness and saturation results for hue of 0.666.<p>
@c HTML <IMG SRC="./figures/HSV_0.666.gif" width=333 align=top>
@c HTML <p><p>


@node   Set contour format, Set contour label position, Set color, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set contour format} command
@findex @code{set contour format} command
@cindex @code{set contour format} command
@cindex contours, setting format for numbers
@cindex format for numbers on contours

@c SYNTAX set contour format $fmt;

@noindent
Set format for numbers on contours.  @code{$fmt} is a double-quoted
string, or a string-valued expression, specifying the format in C
notation.  For example @code{set contour format "%.2f";} means to use
floating-point notation, with two digits after the decimal point.

The default format is @code{"%g"}, which avoids printing unneccessary zeros
after the decimal point, and switches to exponential notation for very
large or very small numbers.




@node   Set contour label position, Set dash, Set contour format, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set contour label position} command
@findex @code{set contour label position} command
@cindex @code{set contour label position} command
@cindex isopycnals, labelling
@cindex contours, labelling
@cindex labelling of contours and isopycnals


@c SYNTAX set contour label position $start_cm $between_cm;
@noindent

By default, labels on contours are drawn near the location where they
start (e.g., the boundary), and then at a uniform distance along the
contour line.  By default, this uniform distance is the average
dimension of the plotting area inside the axes.  However, if
@code{$start_cm} and @code{$between_cm} are specified, the first label
is drawn at a distance @code{start_cm} from the start of the contour,
and thereafter at a separation of @code{$between_cm}.

The command also controls labelling for the @code{draw isopycnal}
command.



@node   Set dash, Set flag, Set contour label position, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set dash} command
@findex @code{set dash} command
@cindex @code{set dash} command
@cindex lines, dashed
@cindex dashed lines

@c SYNTAX set dash;               # style 1\Nset dash on;            # style 2\Nset dash $type;         # style 3\Nset dash LIST;          # style 4\Nset dash off;           # style 5

@noindent
Control whether lines (for curves, contours, etc) are solid or dashed.

@c STYLE 1
set dash for future line-drawing to 0.4 cm dashes interlaced
with 0.1 cm blanks.

@c STYLE 2
a synonym for style 1, provided as an easily guessed opposite
to the style 5.

@c STYLE 3
set to indicated dash type, from list:
@example
$type   dash/cm blank/cm
   0        -        -   ... (Solid line)
   1      0.2      0.1
   2      0.4      0.1
   3      0.6      0.1
   4      0.8      0.1
   5      1.0      0.1
   10      w        w
   11      w        2w
   12      w        3w
   13      w        4w
   14      w        5w
   15      w        6w
@end example
In this table @code{w} indicates the current linewidth.  Thus, types 10
through 15 give square-dotted lines.

@c STYLE 4
@code{LIST} is a space-separated list of dash-length and
blank-length pairs, each in value being measured in centimeters.  For
example, @code{set dash 0.5 0.2 0.05 0.2;} creates a dash-and-dot line
type.  The list may be of any length, although aesthetic considerations
suggest limiting the length to 4 or 6.

@c STYLE 5
revert to a solid line.


@node   Set flag, Set font encoding, Set dash, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set flag} command
@findex @code{set flag} command
@cindex @code{set flag} command
@cindex flags, setting

@c SYNTAX set flag $name;         # style 1\Nset dash $name on;      # style 2\Nset dash $name off;     # style 2\N

@c STYLE 1
set indicated flag on, e.g. @code{set flag "kelley";}.
@c STYLE 2
set indicated flag on.
@c STYLE 3
set indicated flag off.

NOTE: flags are used mainly by the author for internal debugging.


@node   Set font encoding, Set font size, Set flag, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set font encoding} command
@findex @code{set font encoding} command
@cindex @code{set font encoding} command
@cindex font encoding vector 
@cindex accented characters in text
@cindex non-English languages

@c SYNTAX set font encoding standard|isolatin1
@noindent
Permits one to control the so-called ``font encoding'' used in text.
The default encoding, @code{isolatin1}, for the ISO-Latin-1 encoding, is
preferred for almost all applications.  It permits Gri to handle both
English text and various European-based languages which use accents.

The default font encoding is ISO-Latin-1.  This is ideal for English and
other European languages.  To learn how to enter accents in a text
editor, and for a very brief overview of font encodings 
@xref{Entering Text}.

If the so-called ``standard'' font encoding is required, this command
permits changing the encoding.

Note: very few users will ever need this command.  If you don't even
know what ``font encoding'' is about, ignore this command!




@node   Set font size, Set font to, Set font encoding, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set font size} command
@findex @code{set font size} command
@cindex @code{set font size} command
@cindex text, setting font size
@cindex setting font size
@cindex font size, setting

@c SYNTAX set font size $size|default;

@noindent
Set to indicated font size, in pt, and store this value in the built-in
variable @code{$_font_size}.  If this command is not executed, or if the
keyword @code{default} is given, the default font size of 12 pt is used.

The metrics for a given string are accessible with the functions
@code{text_ascent}, @code{text_descent}, and @code{text_width}
@xref{Builtin functions that take one argument}.

@node   Set font to, Set graylevel, Set font size, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set font to} command
@findex @code{set font to} command
@cindex @code{set font to} command
@cindex setting font
@cindex font, setting

@c SYNTAX set font to $name;

@noindent

Set to the indicated font family indicated by @code{$name}, which may be
either a double-quoted string or an expression that evaluates to a
string.  Available fonts:
@cindex fonts, list of available
@cindex courier font
@cindex helvetica font
@cindex timesRoman font
@cindex palatino font
@cindex symbol font
@cindex zapfChancery font
@code{Courier}, a typewriter font (and the only monospaced font in Gri);
@code{Helvetica} (the default), a sans-serif font commonly used in drafting scientific graphs;
@code{HelveticaBold}, a bold version of Helvetica;
@code{Times} (also called @code{TimesRoman}), a font used in most newspapers;
@code{TimesBold}, a bold version of Times;
@code{Palatino} (also called @code{PalatinoRoman}), similar to Times;
@code{PalatinoRoman} (same as @code{Palatino});
@code{PalatinoBold} (bold version of @code{Palatino});
@code{ZapfChancery}, similar to the TeX caligraphic font;
@code{Symbol}, included for completeness, is a
mathematical font in which "a" becomes $\alpha$ of the math mode, etc.
For reference on these fonts see any book on PostScript or typesetting.

If this command is not executed, the default font of @code{Helvetica} is
used for all text.



@node   Set graylevel, Set image colorscale, Set font to, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set graylevel} command
@findex @code{set graylevel} command
@cindex @code{set graylevel} command
@cindex pen color, setting in black/white
@cindex graylevel of pen
@cindex color of pen, in black/white

@c SYNTAX set graylevel $brightness;

@noindent
Set the brightness of the black/white pen to the indicated value, 0
meaning a black pen (no brightness) and 1 meaning a white pen.  This
applies to text, lines, symbols, axes, etc, but not to images.

Also, store indicated brightness in built-in variable
@code{$_graylevel}.

Note: if your diagram is to be reproduced by a journal, it is unlikely
that the reproduction will be able to distinguish between any two
graylevels which differ by less than 0.2.  Also, graylevels less than
0.2 may appear as pure black, while those of 0.8 or more may appear as
pure white.  These guidelines are as specified by American Geophysical
Union (publishers of J. Geophysical Res.), as of 1997.



@node   Set image colorscale, Set image range, Set graylevel, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set image colorscale} command
@findex @code{set image colorscale} command
@cindex image, colorscale
@cindex colorscale of image
@cindex setting image colorscale
@cindex setting colorscale of image

@c SYNTAX set image colorscale hsv $h $s $v $low hsv $h $s $v $high\Nset image colorscale hsv $h $s $v $low hsv $h $s $v $high [increment $inc]\Nset image colorscale rgb $r $g $b $low rgb $r $g $b $high\Nset image colorscale rgb $r $g $b $low rgb $r $g $b $high [increment $inc]

(Actually, you can mix and match @code{hsv} (hue, saturation, value)
and @code{rgb} (red, green, blue) color specifications, but most users
stick to one or the other, as illustrated above.)

@noindent
Set colorscale mapping for image, using HSB (hue, saturation,
brightness) specification, RGB (red, green, blue) color specification,
or named colors.  The image range must have previously have been set by
@code{set image range}, so that the @code{.im_value.} values will have
meaning.  Two pairs of (color, image-value) are given, and possibly an
increment.  Normally the colors are smoothly blended between the
endpoints, but if an increment is supplied, the colors are quantized.
The HSB method allows creation of spectral palettes, while the other two
methods create simple blending between the two endpoints.

EG: To get a spectrum ranging between pure red (H=0) for image value of
-10.0, and pure blue (H=2/3) for image value of 10.0, do this:
@example
set image colorscale hsb 0 1 1 -10 hsb .666 1 1 10;
@end example
To do the above, but with 10 quantized colors, do
@example
set image colorscale hsb 0 1 1 -10 hsb .666 1 1 10 increment 2;
@end example


@node   Set image range, Set line cap, Set image colorscale, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set image range} command
@findex @code{set image range} command
@cindex @code{set image range} command
@cindex image, setting range
@cindex range of images, setting

@c SYNTAX set image range $min $max;

@noindent
Specify maximum possible range of values that images can hold, in user
units.  Gri needs to know this because it stores images in a limited
format capable of holding only 256 distinct values.  Unlike some other
programs, Gri encourages (forces) the user to specify things in terms of
user-units, not image-units.  This has the advantage of working
regardless of the number of bits per pixel.  Thus, for example,
@code{set image grayscale}, @code{set image colorscale}, @code{draw
image grayscale}, etc, all use *user* units.

When an image is created by `convert grid to image', values outside the
range spanned by @code{$min} and @code{$max} are clipped.  (There is no
need, however, for @code{$min} to be less than @code{$max}.)  This
clipping discards information, so make sure the range you give is larger
than the range of data in the grid.

EXAMPLE: consider a satellite image in which an internal value of 0 is
meant to correspond to 0 degrees Celsius, and an internal value of 255
corresponds to 25.5 degrees.  (This is a common scale.)  Then Gri
command @code{set image range 0 25.5;} would establish the required
range.

If this range were combined with a linear grayscale mapping (see
@code{set image grayscale}), the resultant granularity in the internal
representation of the user values would be (25.5-0)/255 or 0.1 degrees
Celsius; temperature variations from pixel to pixel which were less than
0.1 degrees would be lost.
    
All other image commands *require* that the range has been set.  These
commands fail unless @code{set image range} has been done:
@code{draw image}, @code{draw image palette}, @code{read image},
@code{convert grid to image}, @code{set image grayscale}, and
@code{set image colorscale}. 
    
NOTE: If a range already exists when @code{set image range} is used,
then the settings are altered.  Thoughtless usage can therefore lead to
confusing results.  (The situation is like setting an axis scale,
plotting a curve with no axes, then altering the scale and plotting the
new axes.  It's legal but not necessarily smart.)




@node   Set line cap, Set line join, Set image range, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set line cap} command
@findex @code{set line cap} command
@cindex @code{set line cap} command
@cindex setting line cap
@cindex ends of lines, drawing

@c SYNTAX set line cap @{square butt@}|@{round overhang@}|@{square overhang@};

@noindent
Set the type of ends (caps) of lines.  The @code{square butt} style cuts
the lines off at right angles, exactly at the ends of the lines.  The
@code{round overhang} adds a semicircular "cap" at the end of the line;
this cap overhangs the end of the line by half a line width.  The
@code{square overhang} style is similar, except that the cap is square.

The default is @code{square butt}.  (Doesn't that sound delightful?)

The selected style is used for the ends of line segments, as well as at
corners.  In PostScript parlance, therefore, this command sets both the
linecap and the linejoin parameters.

This command only applies to lines drawn with @code{draw curve},
@code{draw line} and @code{draw polygon}.  Axes and arrows are always
drawn with a line cap of @code{square butt}.


@node   Set line join, Set line width, Set line cap, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set line join} command
@findex @code{set line join} command
@cindex @code{set line join} command
@cindex setting line join
@cindex intersections of lines, drawing

@c SYNTAX set line join mitered|round|bevelled;

@noindent
Set the type of intersection of lines.  Mitered joins have pointed ends
that may extend beyond the data points.  Rounded ends are rounded off
nicely, as though the line segments were drawn continuously with a round
pen.  (This is the default, so that the lines look as they they were
drawn with a round technical fountain pen.)  Bevelled ends are squared
off at intersections.  See the @code{setlinejoin} command in any text on
the PostScript language for more information.

This command only applies to lines drawn with @code{draw curve},
@code{draw line} and @code{draw polygon}.  Note, though, that axes and
arrows are always drawn with a mitered line joins, whether you call this
command or not.



@node   Set line width, Set map projection, Set line join, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set line width} command
@findex @code{set line width} command
@cindex @code{set line width} command
@cindex setting line width
@cindex line width, setting
@cindex rapidograph line widths
@cindex aesthics, of line widths

@c SYNTAX set line width [axis|symbol|all] $w|@{rapidograph $name@}|default;

@noindent
Set width of lines for future drawing commands.  If the option
@code{axis} is given, set the width for lines and tics on axes.  If the
option @code{symbol} is given, set width for lines in symbols.  If the
option @code{all} is given, set width for curves, axes, and symbols.
The default, with these options not specified, is to set the width for
@code{draw curve} and @code{draw line} only.

The width may be specified numerically with @code{$w}, in the
typographic units known as points (72 pt = 1 inch).  The default value
for curves, used if this command is never called, or used if the
@code{default} option is used, is 0.709 points.

Alternately, the pen width may be specified as one of several widths
used for technical drawing pens.  One popular series of these pens is
called @code{rapidograph}, and that keyword is used to preface a name
from the following list.  The name should be enclosed in double-quotes,
although this is not strictly necessary unless it contains the symbol
@code{x}.

@example
      Name      pt    cm
      ====    =====  =====
    * "6x0"   0.369  0.013
    * "4x0"   0.510  0.018
    * "3x0"   0.709  0.025
       "00"   0.850  0.03
    *   "0"   0.992  0.035
    *   "1"   1.417  0.05
        "2"   1.701  0.06
    * "2.5"   1.984  0.07
        "3"   2.268  0.08
    * "3.5"   2.835  0.1
        "4"   3.402  0.12
    *   "6"   3.969  0.14
    *   "7"   5.669  0.2
@end example

Names marked by the symbol @code{*} are in sequence with width
increasing by a factor of root(2).  Texts on technical drawing often
suggest distinguishing different curves by using linewidths in the ratio
of 2 or root(2).  The eye can distinguish curves with linewidths
differing by a factor of root(2) if the image is of high quality, but a
factor of 2 is sometimes better for publication.  For material to be
projected (e.g. slides) youi might prefer to use linewidths differing by
a factor of 4.

If @code{set line width} is not executed _PNAME_ uses 0.709 points
(aka @code{rapidograph "3x0"}).  The pen width is stored in the built-in
variable @code{$_linewidth}, which is updated if this command is
executed.



@node   Set map projection, Set missing value, Set line width, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set map projection} command
@findex @code{set map projection} command
@cindex @code{set map projection} command
@cindex @code{projection} of maps
@cindex maps, setting coordinate system

@c SYNTAX set map projection "...";                     # style 1\Nset map projection EXPR;                      # style 2

@noindent
Set up coordinate system (i.e. projection) to be used for drawing maps.
The arguments are those that would be used for the standalone
@code{proj} system command (see below).

@c STYLE 1
the contents of the double-quoted string are the command
that is to be used with the @code{proj} mapping program, from USGS.  All
the @code{+} arguments to @code{proj} are allowed, as well as the
@code{-m factor} command, but no other @code{-} arguments are allowed.
If you need double-quote marks in your command to @code{proj}, preface
them with a backslash (see examples below).

@c STYLE 2
as style 1 but the @code{EXPR} is a string-valued
expression to be passed to @code{proj}.


@cindex proj, original source at USGS
@code{proj} is a general and very powerful standalone package,
not a standard part of unix, developed by the United States
Geological Survey.  A web-page for @code{proj} is
@c HTML <a href="http://kai.er.usgs.gov/intro/MAPGENdetails.html">
http://kai.er.usgs.gov/intro/MAPGENdetails.html
@c HTML </a>
The @code{proj} package is available via ftp at 
@c HTML <a href=ftp://kai.er.usgs.gov/pub/PROJ.4/PROJ.4.3.3.tar.gz>
@file{ftp://kai.er.usgs.gov/pub/PROJ.4/PROJ.4.3.3.tar.gz}.
@c HTML </a> 
Also see the site
@c HTML <a href="http://www.remotesensing.org/proj">
http://www.remotesensing.org/proj
@c HTML </a>

Other relevant materials in the PROJ directory
@c HTML <a href=ftp://kai.er.usgs.gov/pub/PROJ.4>
@file{ftp://kai.er.usgs.gov/pub/PROJ.4}
@c HTML </a> 
include several manuals on map projections, which detail the development
of PROJ.  Unofficial mirror sites for PROJ exist at several locations; a
web-search for PROJ4 will uncover these.  Also, the excellent USGS site
is worth perusing, for its own sake.

The projection set up by @code{set map projection} establishes a linkage
between geographical world coordinates (i.e., lon/lat coordinates, in
degrees East and degrees North) and geometrical, or distance,
coordinates.  The geometrical coordinates are in meters by default,
although @code{set map projection} lets you select any unit you desire.

See the manual provided with the @code{proj} program for details about
the projections that are available.  An excellent text on map
projections is by John P. Snyder (1987), "Map projections - a working
manual", published by the United States Geological Service as
professional paper 1395.

In _PNAME_ the @code{set map projection} command imposes itself on all
drawing commands that are not specified in centimeter coordinates.
@emph{Bugs: (1) images are not projected yet; (2) contours are not
supported yet.}

Two subroutines
@c QUIETEXAMPLE proj_lonlat_to_x($lon, $lat)\Nproj_lonlat_to_y($lon, $lat)
are provided for use in calculations, should the geometrical coordinates
be needed for any reason @xref{Builtin functions for map projections}.
The first returns the x-coordinate, the second the y-coordinate.

As ususal in _PNAME_, the @code{set map projection} command acts only on
@emph{subsequent} drawing commands.  If you do a @code{draw curve}
command before @code{set map projection}, the curve will be in lon/lat
coordinates, not geometrical coordinates.

Subsequent @code{set map projection} command override each other.  To
turn the transformation off completely, simply use an empty string, as
follows:

@c QUIETEXAMPLE proj ""; # turn projection off

Examples:
@example
# Use Lambert Conformal Conic projection, with intersection
# latitudes lat_1=43N and lat_2=49N, matching charts of
# Atlantic Canada prepared by the Canadian hydrographic
# service.
#
# Center the map near Halifax (lon_0,lat_0)=(63w, 44n).
#
# Arrange to have geometrical units be in kilometers, by
# the -m command.
$p="+ellps=clrk66 +proj=lcc +lon_0=63w +lat_0=44 +lat_1=43 +lat_2=49 -m 1:1000";
set map projection $p;
@end example

The cookbook provides a full example @xref{Cookbook}.






@node   Set missing value, Set page, Set map projection, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set missing value} command
@findex @code{set missing value} command
@cindex @code{set missing value} command
@cindex setting missing value
@cindex missing value, setting

@c SYNTAX set missing value $m;

@noindent
Notify _PNAME_ that any data with the indicated value (@code{$m}) is to
be considered missing, and therefore not plotted, nor used in
e.g. conversion of column data to a grid for contouring.



@node   Set page, Set symbol size, Set missing value, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set page} command
@findex @code{set page} command
@cindex @code{set page} command
@cindex setting page orientation
@cindex setting orientation of page
@cindex orientation of page, setting
@cindex portrait orientation of page, setting
@cindex landscape orientation of page, setting

@c SYNTAXset page "landscape";    # style 1\Nset page "portrait";     # style 2

@noindent
Set page orientation to "landscape" (sideways) or "portrait" (upright,
the default).  This @emph{must} be done before any other drawing
commands.



@node   Set symbol size, Set tic size, Set page, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set symbol size} command
@findex @code{set symbol size} command
@cindex @code{set symbol size} command
@cindex setting symbol size
@cindex symbols, setting size

@c SYNTAX set symbol size $radius; # style 1\Nset symbol size default; # style 2

@noindent
Set diameter of symbols to indicated radius, in centimeters, storing the
value in the variable @code{_symbol_size}.  The default value is 0.1 cm.



@node   Set tic size, Set tics, Set symbol size, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set tic size} command
@findex @code{set tic size} command
@cindex @code{set tic size} command
@cindex setting tic length
@cindex tics, on axes, setting length
@cindex axis, tic length

@c SYNTAX set tic size $w;

@noindent
Set axis major tics to indicated length in cm (default 0.2 cm), and
store this value in built-in variable @code{$_tic_size}.  The minor tics
are half this length.




@node   Set tics, Set u scale, Set tic size, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set tics} command
@findex @code{set tics} command
@cindex @code{set tics} command
@cindex setting tic direction
@cindex axis, tic direction

@c SYNTAX set tics in;\Nset tics out;

@noindent
Control whether tics on axes point inward into plot are or outward into
margin (latter being the default).  Also, store built-in variable
@code{$_tic_direction} as 1 to point inward and 0 to point outward.




@node   Set u scale, Set v scale, Set tics, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set u scale} command
@findex @code{set u scale} command
@cindex @code{set u scale} command
@cindex setting scale for x-component of arrows
@cindex arrows, setting scale

@c SYNTAX set u scale $cm_per_unit;           # style 1\Nset u scale as x;                   # style 2

@noindent
Set scale for x-component of arrows as drawn by @code{draw arrows}
@xref{Draw arrows}.

@c STYLE 1
set length of the arrow x-component per a unit of @code{u},
independently of the scale of the x-axis.

@c STYLE 2
set scale of arrow x-component to match whatever scale is being
used for the x-axis, creating a `natural' scale.  Thus, deforming the
axes (e.g. squashing them by reducing width of x-axis) deforms the
arrows correspondingly.


@node   Set v scale, Set x axis, Set u scale, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set v scale} command
@findex @code{set v scale} command
@cindex @code{set v scale} command
@cindex setting scale for y-component of arrows
@cindex arrows, setting scale

@c SYNTAX set v scale $cm_per_unit;           # style 1\Nset u scale as y;                   # style 2

@noindent
Set scale for y-component of arrows as drawn by @code{draw arrows}
@xref{Draw arrows}.

@c STYLE 1
set length of the arrow y-component per a unit of @code{u},
independently of the scale of the y-axis.

@c STYLE 2
set scale of arrow y-component to match whatever scale is being
used for the y-axis, creating a `natural' scale.  Thus, deforming the
axes (e.g. squashing them by increasing height of y-axis) deforms the
arrows correspondingly.



@node   Set x axis, Set x format, Set v scale, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set x axis} command
@findex @code{set x axis} command
@cindex @code{set x axis} command
@cindex axes, setting x range
@cindex x axis, setting
@cindex increasing, x axis
@cindex decreasing, x axis

@c SYNTAX set x axis $left $right;                               # style 1\Nset x axis $left $right $inc_labelled;                 # style 2\Nset x axis $left $right $inc_labelled $inc_unlabelled; # style 3\Nset x axis decreasing;                                 # style 4\Nset x axis increasing;                                 # style 5


@noindent
Establish the x-coordinate system, taking into account current x margin
@xref{Set x margin}, and 
axis-length @xref{Set x size}.  Note that the
axes are not drawn by this command @xref{Draw axes}.

@c STYLE 1
Instruct _PNAME_ that the left end of the x axis shall represent an
x-value of @code{$left} in user-units, and that the right end shall
represent an x-value of @code{$right} in user-units.

@c STYLE 2
As Style 1, but also instruct _PNAME_ to draw labelled tic marks at any
integral multiples of @code{inc_labelled} that fall into the domain set
by @code{$left} and @code{$right}.

@c STYLE 3
As Style 3, but furthermore instruct _PNAME_ to draw unlabelled tic
marks at integral multiples of @code{inc_unlabelled}.

@c STYLE 4
Inform _PNAME_ that the values on the x axis are to decrease to the
right, in the case that _PNAME_ will later be auto-scaling.

@c STYLE 5
Inform _PNAME_ that the values on the x axis are to decrease to the
right, in the case that _PNAME_ will later be auto-scaling.  This is the
default.


@node   Set x format, Set x grid, Set x axis, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set x format} command
@findex @code{set x format} command
@cindex @code{set x format} command
@cindex axes, setting format for numbers

@c SYNTAX set x format $fmt;
@noindent

Set format for numbers along x-axis.  @code{$fmt} is a double-quoted
string, or a string-valued expression, specifying the format in C
notation.  For example @code{set x format "%.2f";} means to use
floating-point notation, with two digits after the decimal point, and
@code{"%f m"} might be used if the unit on the axis was meters.

The default format is @code{"%g"}, which avoids printing unneccessary zeros
after the decimal point, and switches to exponential notation for very
large or very small numbers.


@node   Set x grid, Set x margin, Set x format, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set x grid} command
@findex @code{set x grid} command
@cindex @code{set x grid} command
@cindex grid, setting x-characteristics

@c SYNTAX set x grid $left $right $inc;

@noindent
Set characteristics of x-component of grid used for contouring.



@node   Set x margin, Set x name, Set x grid, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set x margin} command
@findex @code{set x margin} command
@cindex @code{set x margin} command
@cindex axes, setting x margin
@cindex margin to left of axes
@cindex left margin

@c SYNTAX set x margin $space;    # style 1\Nset x margin default;   # style 2

@c STYLE 1
set x-margin (i.e. the space to left of axes frame) to
indicated value, in cm.

@c STYLE 2
set x-margin to default of 6 cm.




@node   Set x name, Set x size, Set x margin, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set x name} command
@findex @code{set x name} command
@cindex @code{set x name} command
@cindex axes, setting x name
@cindex x, name of axis
@cindex name of x-axis

@c SYNTAX set x name $name;

@noindent
Set name to be written beside x-axis.  The name is either a
double-quoted string or an expression that evaluates to a string.


@node   Set x size, Set x type, Set x name, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set x size} command
@findex @code{set x size} command
@cindex @code{set x size} command
@cindex axes, setting length of x-axis
@cindex setting length of x-axis
@cindex x, setting length axis
@cindex length of x-axis

@c SYNTAX set x size $length;

@noindent
Set length of x-axis, in cm.  If this command is not used, a default
size of 10 cm will be used.  The specified size is stored in the built-in
variable @code{$_xsize}.


@node   Set x type, Set y axis, Set x size, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set x type} command
@findex @code{set x type} command
@cindex @code{set x type} command
@cindex axes, setting type of x-axis
@cindex setting type of x-axis
@cindex x-axis, setting type
@cindex linear x-axis
@cindex log x-axis

@c SYNTAX set x type linear;\Nset x type log;

@noindent
Set x-axis type to indicated style.  It is an error to try to convert to
a log axis if the previously defined axis spans non-positive numbers.
This may occur for autoscaled axes, even if all the data are positive.
You should set the axis type to @code{log} before reading data or
setting the axis (@ref{Set x axis}).




@node   Set y axis, Set y format, Set x type, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set y axis} command
@findex @code{set y axis} command
@cindex @code{set y axis} command
@cindex axes, setting y range
@cindex y axis, setting
@cindex increasing, y axis
@cindex decreasing, y axis


@c SYNTAX set y axis $bottom $top;                               # style 1\Nset y axis $bottom $top $inc_labelled;                 # style 2\Nset y axis $bottom $top $inc_labelled $inc_unlabelled; # style 3\Nset y axis decreasing;                                 # style 4\Nset y axis increasing;                                 # style 5

@noindent
Establish the y-coordinate system, taking into account current y margin
@xref{Set y margin}, 
and axis-length @xref{Set y size}.  Note that the
axes are not drawn by this command @xref{Draw axes}.

@c STYLE 1
Instruct _PNAME_ that the bottom end of the y axis shall represent an
y-value of @code{$bottom} in user-units, and that the top end shall
represent an y-value of @code{$top} in user-units.

@c STYLE 2
As Style 1, but also instruct _PNAME_ to draw labelled tic marks at any
integral multiples of @code{inc_labelled} that fall into the domain set
by @code{$left} and @code{$right}.

@c STYLE 3
As Style 3, but furthermore instruct _PNAME_ to draw unlabelled tic
marks at integral multiples of @code{inc_unlabelled}.

@c STYLE 4
Inform _PNAME_ that the values on the y axis are to decrease upwards, in
the case that _PNAME_ will later be auto-scaling.

@c STYLE 5
Inform _PNAME_ that the values on the y axis are to increase upwards, in
the case that _PNAME_ will later be auto-scaling.  This is the default.


@node   Set y format, Set y grid, Set y axis, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set y format} command
@findex @code{set y format} command
@cindex @code{set y format} command
@cindex axes, setting format for numbers

@c SYNTAX set y format $fmt;

@noindent
Set format for numbers along y-axis.  @code{$fmt} is a double-quoted
string, or a string-valued expression, specifying the format in C
notation.  For example @code{set y format "%.2f";} means to use
floating-point notation, with two digits after the decimal point, and
@code{"%f m"} might be used if the unit on the axis was meters.

The default format is @code{"%g"}, which avoids printing unneccessary
zeros after the decimal point, and switches to exponential notation for
very large or very small numbers.


@node   Set y grid, Set y margin, Set y format, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set y grid} command
@findex @code{set y grid} command
@cindex @code{set y grid} command
@cindex grid, setting y-characteristics

@c SYNTAX set y grid $bottom $top $inc;

@noindent
Set characteristics of y-component of grid used for contouring.


@node   Set y margin, Set y name, Set y grid, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set y margin} command
@findex @code{set y margin} command
@cindex @code{set y margin} command
@cindex axes, setting y margin
@cindex margin below axes
@cindex bottom margin

@c SYNTAX set y margin $space;    # style 1\Nset y margin default;   # style 2

@c STYLE 1
set y-margin (i.e. the space to left of axes frame) to
indicated value, in cm.

@c STYLE 2
set y-margin to default of 6 cm.



@node   Set y name, Set y size, Set y margin, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set y name} command
@findex @code{set y name} command
@cindex @code{set y name} command
@cindex axes, setting y name
@cindex y, name of axis
@cindex name of y-axis

@c SYNTAX set y name $name;

@noindent
Set name to be written beside y-axis.  The name is either a
double-quoted string or an expression that evaluates to a string.


@node   Set y size, Set y type, Set y name, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set y size} command
@findex @code{set y size} command
@cindex @code{set y size} command
@cindex axes, setting length of y-axis
@cindex setting length of y-axis
@cindex y, setting length axis
@cindex length of y-axis

@c SYNTAX set y size $length;

@noindent
Set length of y-axis, in cm.  If this command is not used, a default
size of 10 cm will be used.  The specified size is stored in the built-in
variable @code{$_ysize}.


@node   Set y type, Split, Set y size, Set
@comment  node-name,  next,  previous,  up
@subsection @code{set y type} command
@findex @code{set y type} command
@cindex @code{set y type} command
@cindex axes, setting type of y-axis
@cindex setting type of y-axis
@cindex y-axis, setting type
@cindex linear y-axis
@cindex log y-axis

@c SYNTAX set y type linear;\Nset y type log;

@noindent
Set y-axis type to indicated style.  It is an error to try to convert to
a log axis if the previously defined axis spans non-positive numbers.
This may occur for autoscaled axes, even if all the data are positive.
You should set the axis type to @code{log} before reading data or
setting the axis (@ref{Set y axis}).





@node   Split, Sub, Set y type, Commands
@comment  node-name,  next,  previous,  up
@section @code{split} command

@findex split
@cindex @code{split} command

@c SYNTAX split;\N@@array = split;

@noindent
Split the @code{$_} array, normally created by the @code{<FILEHANDLE>}
syntax, into either the array @code{@@_} (if no array named) or into the
named array.

@c EXAMPLE open(IN, "test.dat");\Nwhile(<IN>) @{\N    @@a = split;\N    print "Line has ", 1 + $#a, " tokens\n";\N@}



@node   Sub, Substr, Split, Commands
@comment  node-name,  next,  previous,  up
@section @code{sub} command

@cindex user's subroutines
@cindex functions, defining with @code{sub}
@cindex subroutines, defining with @code{sub}

Subroutines are defined with the syntax
@c QUIETEXAMPLE sub NAME (PROTOTYPE) @{\N    # commands\N@}


The syntax is quite similar to Perl, with these exceptions:
@enumerate
@item Prototypes @emph{must} be supplied to functions in _PNAME_.
@item Return values must be specified explicitly.  That is, the  Perl convention
that the return value derives from the last expression to have been
evaluated is not followed.
@item
Only scalar (single) numerical values may be returned -- text values and
lists may not be returned.  (This is a bug that will be removed
eventually.)
@end enumerate

The @code{NAME} may be any word that doesn't clash with a built-in
subroutine name or another user-defined subroutine name.

@cindex prototype, in sub
The PROTOTYPE is a list of zero or more characters indicating the
expected arguments to the command, in the same format as for Perl
@code{sub}-style subroutines.  An example prototype is @code{$$}, which
would indicate that the cmd takes two arguments.  The allowed characters
in a prototype are dollar-sign (@code{$}), ampersand (@code{@@}), and
semicolon (@code{;}).  A semicolon is optional, and indicates a
separation between a list of required arguments and a list of optional
arguments.  A dollarsign indicates a single scalar parameters (or
mathematical expression), and an ampersand indicate a list of one or
more scalars separated by spaces.  Items before a semicolon are required
and items after a semicolon are optional.  For example:

@c EXAMPLE sub none ()           @{ # takes no arguments\Nsub one_only ($)      @{ # takes a single argument\Nsub two_only ($$)     @{ # takes two arguments\Nsub two_three ($$;$)  @{ # takes two or three arguments\Nsub any_number (@@)    @{ # takes any number of args (incl zero)


The body of the subroutine may contain any valid _PNAME_ commands.
Upon entry to the subroutine, the calling parameters are to be found in
the vector variable @code{$_}.  Thus, the first argument is
@code{$_[0]}, the second @code{$_[1]}, etc, and the number of arguments
that were supplied is @code{1 + $#_}.  The number of arguments
@emph{must} agree with the limits set out in the prototype.

If a @code{return} command is executed within this body, control is
immediately passed back to the calling statement.  Return statements may
or may not supply a numerical value, depending on how the subroutine was
called.  If it was been called in a mathematical context
(e.g. @code{print sin(3.14159), "\n";}) then the subroutine should
supply a value in the @code{return} statement.  A default value of
@code{0.0} is used if @code{return} supplies no value.

@vindex @code{$_}, in subroutines

@c EXAMPLE sub double ($) @{\N    return $_[0] * 2;\N@}\Nprint "expect 2: ", double(1), "\n";


@c TESTFILE tst-sub



@node   Substr, System, Sub, Commands
@comment  node-name,  next,  previous,  up
@section @code{substr} subroutine

@findex substr
@cindex @code{substr} command

@c SYNTAX substr(EXPR, OFFSET)\Nsubstr(EXPR, OFFSET, LENGTH)

@noindent
Extract substring from string stored in @code{EXPR}, starting at the
character numbered @code{OFFSET}.  The offset starts at zero, as in C
and Perl.  If the specified @code{OFFSET} parameter is negative, then it
indicates a position counting from the far-right end of the string.  If
@code{LENGTH} is not specified, the entire string from the offset to the
end is extracted.  If @code{LENGTH} is specified then it indicates the
number of characters to extract.  Negative @code{LENGTH} results in a
blank string, as does an offset beyond the bounds of the string.

@c EXAMPLE $a = "hello world";\Ndie "error1 in substr\n" if ("ello" ne substr($a, 1, 4));\Ndie "error2 in substr\n" if ("worl" ne substr($a, -5, 4));\Ndie "error3 in substr\n" if ("world" ne substr("hello world", -5));

In a textual context, a character string is used.  In a numerical
context, the result will be converted appropriately.  Such a context
will arise if the @code{substr} is used in a numerical expression
(e.g. @code{2*substr("3.1", 0, 1)} yields 2 times 3), or as an argument
to @code{printf} (@ref{Printf}) corresponding to a numerical formatting
tag (e.g. the command @code{printf "%f\n",substr("1000",0,2)} yields the
number @code{10.000000} since only the first two characters are retained
from the string.

Perl users should note that a @code{substr} may not be used as an
lvalue, that is it may not be put at the left of an equals sign.

@emph{IMPORTANT:} Awk users should note that the offset starts at zero,
not at one.


@node   System, Use, Substr, Commands
@comment  node-name,  next,  previous,  up
@section @code{system} subroutine

@findex system
@cindex @code{system} command

@c SYNTAX system("system_command")

@noindent
Call the operating system with indicated command.  @code{system} acts as
a function, returning a numerical value corresponding to the return
value supplied by the operating system after execution of the indicated
command.  Normally, in unix operating systems, zero is returned for
successful completion of a command, so that one might do something like
the following to ensure that the command worked as desired:
@c QUIETEXAMPLE system("process file.dat") && die "Cannot process 'file.dat'\n";\Nsystem("unprocess file.dat") == 0 or die "Cannot unprocess 'file.dat'\n";

Another way to access the system is through the unix-style back-tic
notation (see @ref{System Calls In Quoted Strings}).

@cindex @code{$}, protecting in system calls

Note: if you wish to send a dollar-sign to the operating system, such as
in a call to @code{awk} or the c-shell, you must protect it with a
backslash.  If you don't do this, _PNAME_ will think you wish to
interpolate a variable into the string.  The following example shows how
to make @code{awk} copy the first and tenth columns (columns whose
values @code{awk} names as variables @code{$1} and @code{$10}) from
@file{in.dat} into a file to be called @file{out.dat}.
@c QUIETEXAMPLE system("awk '@{print \$1,\$10@}' in.dat > out.dat");



@node   Use, Warn, System, Commands
@comment  node-name,  next,  previous,  up
@section @code{use} command

@findex use
@cindex @code{use} command
@cindex parsing, including modules
@cindex modules

@c SYNTAX use Module

@noindent

Import the indicated module at @emph{compile} time.  The result is the
same as if that module had been inserted into the given program with a
text editor, replacing the @code{use} command.

The module name must be a bare word -- it may not be enclosed in quotes
and may not be a variable.  _PNAME_ expects the module to be in a file
whose name is constructed by appending @code{.gre} at the end of the
module name.  Thus, @code{use seawater;} refers to a file named
@file{seawater.gre}.

_PNAME_ looks for the module in a sequence of places, as follows.
@itemize @bullet
@item
First, it looks locally.  If the module is in the present directory,
then it is used.
@item
If the module is not local, then _PNAME_ looks in
@file{/usr/share/gre-_VERSION_} (or another library directory, if it was
named by a @code{--Library} commandline flag @xref{Commandline options}.
@item
If the module is not found in either of the above two locations, then
_PNAME_ checks to see if an environment variable named @code{GREPATH}
has been defined.  If no such environment variable exists, _PNAME_ gives
up.  However, if such a @code{GREPATH} environment variable exists, it
is taken to be a colon-separated list of directories in which to look
for modules.  The list is searched from left to right.  If _PNAME_ gets
to the end of the list without finding a directory containing the
module, then it gives up.
@end itemize

If _PNAME_ cannot find the module in any of the above, it reports an
error and dies.

Modules supplied with _PNAME are normally stored in
@file{/usr/share/gre-_VERSION_}, but you may customize them by copying
them to your local directory and modifying them.  For example, @code{use
seawater} will imports @file{/usr/share/gre-_VERSION_/seawater.gre}, a
file containing utilities for working with the properties of seawater.

You @emph{cannot} do such customization by storing modified versions in
a path named by your @code{GREPATH} environment variable, since
@file{/usr/share/gre-_VERSION_} is searched before _PNAME_ examines
@code{GREPATH}.

The @code{use} command is often used in conjunction with the
@code{package} command @xref{Package}.



@node   Warn, -X, Use, Commands
@comment  node-name,  next,  previous,  up
@section @code{warn} command

@findex warn command
@cindex printing a warning
@cindex warning, printing
@cindex @code{warn} command

@c SYNTAX warn "a message to be printed"'\Nwarn $value_to_print;

@noindent
@code{warn} acts like @code{die} except that program
execution continues @xref{Die}.  (@code{warn} returns the value @code{1}.)

If the message ends in a newline character (the sequence @code{\n}),
then only the message is printed; otherwise the file-name and line
number are also printed.

If a numerical value is supplied, @code{warn} prints that value, then
the file-name and line-number.

(Perl users should note that @code{warn} with no expression is not
allowed; @xref{Perl programmers}.)



@node   -X, Cookbook, Warn, Commands
@comment  node-name,  next,  previous,  up
@section @code{-X} file tests

@findex -f command
@findex -d command
@findex -r command
@cindex files, testing status
@cindex testing file status
@cindex status of files, testing
@cindex existence of files, testing
@cindex @code{-f filename} command
@cindex @code{-d filename} command
@cindex @code{-r filename} command

@c QUIETEXAMPLE print "file `a.dat' exists\n" if (-f "a.dat");\Ndie "Cannot access 'a.dat'" unless (-f "a.dat");

@noindent
These functions mimic corresponding ones in Perl, and are based on the
unix @code{test} command.  Each is followed by a filename.  The
@code{-f} form tests whether a file exists, and @code{-r} tests whether
the named file exists and is readible.  The @code{-d} form tests whether
the named item is a directory.



@c HTML <!-- newfile Cookbook.html "Gre: Cookbook" "Cookbook" -->

@node   Cookbook, Example 1, -X, Top
@comment  node-name,  next,  previous,  up
@chapter Cookbook

@menu
* Example 1::                   Filled-curves, dots, line-segments
* Example 2::                   Curves, arrows, labels
* Example 3::                   Color-coded dots, isopycnals on TS diagram
* Example 4::                   A cmd for TS diagrams
* Example 5::                   Timing test
* Example 6::                   Plotting theoretical functions
* Example 7::                   Map projection
* Example 8::                   Colored text
* Example 9::                   Month-of-year timeseries
@end menu

@node   Example 1, Example 2, Cookbook, Cookbook
@comment  node-name,  next,  previous,  up
@section Example 1 -- filled-curves, dots, line-segments

-- to be filled in later --


@node   Example 2, Example 3, Example 1, Cookbook
@comment  node-name,  next,  previous,  up
@section Example 2 -- curves, arrows, labels


Diagram illustrating x-y curves, arrows, text.  Since this is a
definition sketch, no axes are drawn.  (From Kelley and Van Scoy, 1997)

@c HTML <center>
@c HTML <A HREF="./figures//TU_defn.html">
@c HTML <IMG SRC="./figures/TU_defn.gif" width=220 align=top> 
@c HTML </A>
@c HTML </center>


@node   Example 3, Example 4, Example 2, Cookbook
@comment  node-name,  next,  previous,  up
@section Example 3 -- color-coded dots, isopycnals

Diagram illustrating temperature-salinity plot, color-coded for a third
variable (in this case, bug counts).  Data from bioness tows made by
Dalhousie as part of the OPEN program.

@c HTML <center>
@c HTML <A HREF="./figures/TS-color.html">
@c HTML <IMG SRC="./figures/TS-color.gif" width=400 align=top> 
@c HTML </A>
@c HTML </center>


@node   Example 4, Example 5, Example 3, Cookbook
@comment  node-name,  next,  previous,  up
@section Example 4 -- a cmd for TS diagrams

The @code{cmd} created in this example draws TS diagrams, setting up
axis names and drawing isopycnals automatically.

@c HTML <center>
@c HTML <A HREF="./figures//TS.html">
@c HTML <IMG SRC="./figures/TS.gif" width=336 align=top> 
@c HTML </A>
@c HTML </center>


@node   Example 5, Example 6, Example 4, Cookbook
@comment  node-name,  next,  previous,  up
@section Example 5 -- timing test

The following code tests the speed of programming a subroutine in gre,
compared to using a builtin function.  To run it, do e.g.
@code{time gre test.gre}, then change the comment in the lines inside
the loop, to use either builtin code or the user-defined function.

Depending on the speed of your machine, you may have to use a different
value of @code{$n}, in order to get times long enough to compare, using
the unix @code{time} program.  Also, you may wish to duplicate the
function call a few times, to see whether the loop overhead is
significant.

My results, on a Sun Microsystems solaris machine, indicate that the
gre-based @code{my_sinh} subroutine is 3.6 +/- 0.1 times slower than the
internally coded @code{sinh} subroutine.  Because sinh is a slow
function to calculate, the loop overhead is negligible -- that is,
increasing the number of calls to the subroutine inside the loop changed
results very little.

@example
# Test of timing
sub my_sinh ($) @{  # hyperbolic sin
    my $y;
    $y = exp($_[0]);
    return ($y - 1 / $y) / 2;
@}
$n = 10000;
$dx = 1 / $n;
for ($x = 0; $x < 1; $x += $dx) @{
    # Uncomment one of following two lines
    #$sy = my_sinh($x);
    $sy = sinh($x);
@}
@end example


@node   Example 6, Example 7, Example 5, Cookbook
@comment  node-name,  next,  previous,  up
@section Example 6 -- plotting theoretical functions

@cindex functions, how to plot
@cindex theoretical functions, how to plot
@cindex seawater sound-speed
@cindex sound-speed of seawater
@cindex speed of sound in seawater
@cindex overhead projection, example

Diagram from my introductory Physical Oceanography class, illustrating
(a) large fonts and pretty colors, suitable for overhead projection and
(b) display of theoretical curves as oppposed to data.

@c HTML <center>
@c HTML <A HREF="./figures/sound_speed.html">
@c HTML <IMG SRC="./figures/sound_speed.gif" width=438 align=top> 
@c HTML </A>
@c HTML </center>



@node   Example 7, Example 8, Example 6, Cookbook
@comment  node-name,  next,  previous,  up
@section Example 7 -- drawing a coastline map with fancy projection

@cindex maps, sample of drawing
@cindex charts, sample of drawing
@cindex drawing maps

Diagram shows Maritimes provinces of Canada, plotted using the 
@code{set map projection} command with Lambert
Conformal Conic projection @xref{Set map projection}.

@c HTML <center>
@c HTML <A HREF="./figures/maritimes.html">
@c HTML <IMG SRC="./figures/maritimes.gif" width=297 align=top> 
@c HTML </A>
@c HTML </center>


@node   Example 8, Example 9, Example 7, Cookbook
@comment  node-name,  next,  previous,  up
@section Example 8 -- colored text

@cindex birthday paper

Face it, people like/hate to be reminded of their age on birthdays.  So,
the way to make them like/hate you is to wrap their present in paper
that was generated as below.  Only a snippet of the 8.5x11" output is
shown.  Click on the diagram to see the source code, and just change the
@code{$year = ...}  line to customize for your friends.

@c HTML <center>
@c HTML <A HREF="./figures/birthday.html">
@c HTML <IMG SRC="./figures/birthday.gif" width=291 align=top> 
@c HTML </A>
@c HTML </center>


@node   Example 9, Hints, Example 8, Cookbook
@comment  node-name,  next,  previous,  up
@section Example 9 -- month-of-year timeseries

@cindex timeseries with month of year
@cindex month of year, timeseries

There is no builtin facility for plotting against month-of-the year, but
you can get this sort of graph pretty easily.  For daily data you'll
need to know the number of days in each month (as a function of whether
it's a leap year or not), etc.  But for month-averaged data, the case is 
simpler; you just need to write @code{Jan}, @code{Feb}, etc, along the
x-axis.  The following example assumes that the January data will have
x-value of 0.5, the February data will have 1.5, etc.

@c HTML <center>
@c HTML <A HREF="./figures/month-series.html">
@c HTML <IMG SRC="./figures/month-series.gif" width=332 align=top> 
@c HTML </A>
@c HTML </center>



@c HTML <!-- newfile Hints.html "Gre: hints" "Hints" -->

@node   Hints, C programmers, Example 9, Top
@comment  node-name,  next,  previous,  up
@chapter Hints

@menu
* C programmers::
* Perl programmers::
* Awk programmers::
* Gri programmers::
@end menu

@node   C programmers, Perl programmers, Hints, Hints
@comment  node-name,  next,  previous,  up
@section Hints for C programmers
@cindex c programmers, pitfalls

Users of the C language should note the following.

@enumerate

@item The contents of loops and conditionals must be enclosed in curly braces,
even if they consist of just one line.  (As in the Perl language, this
choice was made to simplify parsing of the grammar.)

@end enumerate


@node   Perl programmers, Awk programmers, C programmers, Hints
@comment  node-name,  next,  previous,  up
@section Hints for Perl programmers
@cindex perl programmers, pitfalls

_PNAME_ is not Perl, although much of the underlying grammar is
designed to match Perl.  Here are some things Perl programmers should
bear in mind:

@enumerate

@item Most functions require parentheses in _PNAME_,
e.g. @code{acos sin 3.14;} will not parse; you must write it as
@code{acos(sin(3.14));}.

@item _PNAME_ is not object-oriented, and lacks the recent enhancements 
to Perl that attempt to make Perl object-oriented.  

@item _PNAME_ has no @code{elsif} statement.

@item Lists are only barely functional in _PNAME_.  For example,
One may not refer to a whole array using the @code{@@} syntax, except in
@code{@@F = split();} @xref{Split}.

@item Hash arrays are not available in _PNAME_.

@item Some functions that in Perl may take an expression or be called with no
expression (e.g. @code{warn}) are required to have an argument in
_PNAME_.  This is to avoid ambiguities in the grammar design.  To
maintain compatibility with Gri, _PNAME_ allows space-separated
(as opposed to comma-separated) expressions as arguments for a command.
An example is provided by the three constant expressions in the command
@code{set x axis 0 1 0.1}.  If one of these arguments were substituted
with a function name, such as @code{warn}, then an ambiguity would arise
if @code{warn} were permitted to be called in an expressionless way.
For example, if the first argument were the word @code{warn} instead of
the constant @code{0}, then the two possible meanings might be @code{set
x axis warn() 1 0.1} or @code{set x axis warn(1) 0.1}.  Such ambiguities
are avoided in Perl because it uses a comma to separate expression
lists.

@item You may not assign values in a @code{my} command
@xref{My}.

@item Variable interpolation within strings is not as powerful as in
Perl.  Indices may not be expressions; only constants and scalars are
allowed within the @code{[]} index @xref{Variables}.

@item Subroutine prototypes are required in _PNAME_, whereas they
are optional in Perl.

@item The @code{use} command refers only to _PNAME_ modules, not the
extensive list of Perl modules that you might be accustomed to.

@item In a @code{for} loop, there are some limitations on the types of
expressions one may have in the three-expression list @xref{For}.

@item In _PNAME_ subroutines, the return value @emph{must} be
indicated with a @code{return} statement, and cannot be implied by the
last expression evaluated, as in Perl @xref{Sub}.

@item A @code{substr} may not be used as an lvalue (that is, it may not
be used to the left of an equals sign) @xref{Substr}.

@end enumerate


@node   Awk programmers, Gri programmers, Perl programmers, Hints
@comment  node-name,  next,  previous,  up
@section Hints for Awk programmers

@cindex awk programmers, hints and pitfalls
@cindex gawk programmers, hints and pitfalls

@enumerate
@item Substrings start at offset zero, as in Perl and C, not at 1.  This
affects commands such as @code{substr} @xref{Substr}, and @code{index}
@xref{Index}.

@end enumerate


@node   Gri programmers, History, Awk programmers, Hints
@comment  node-name,  next,  previous,  up
@section Hints for Gri programmers

@cindex gri programmers, pitfalls

_PNAME_ is not Gri, although it was born of Gri.

Gri programmers should bear in mind the following.

@enumerate
@item
The _GRI2GRE_ program, provide with _PNAME_, does a rough conversion
from Gri programs to _PNAME_ programs.  Although only about 75 percent
of the available Gri commands are converted correctly by _GRI2GRE_,
warnings are given if a particular command cannot be converted.

@item
Semicolon is used to end commands, not newline.  (This will be familiar
to C, Perl, and Awk users.)

@item
Negative arguments to commands should be enclosed in parentheses.  This
is to prevent the _PNAME_ parser from interpreting adjacent arguments as
parts of a mathematial expression.  @ref{Cautionary Notes On Syntax}.

@item
Math-mode in strings (e.g. labels, titles) uses @code{\\(} at the start
and @code{\\)} at the end, instead of @code{$} at both places.  This is
still in agreement with latex usage, but has the advantage that it
allows perl-like variable interpolation into strings.  Besides, it is
usually easier for the programmer to figure out.

@item
Newcommands are now done by an extended subroutine format, directly
analogous to Perl @xref{Cmd}.

@item
@code{rpn} mathematics is not available; use normal mathematical
notation instead or let
@c HTML <A HREF="ftp://ftp.phys.ocean.dal.ca/users/kelley/gre/gri2gre">
_GRI2GRE_
@c HTML </A>
handle the conversion.

@item
If-statements and loops end with curly braces, not @code{end if} and
@code{end while}.  (This will be familiar to C, Perl, and Awk users.)

@item
Because file handles are now used in @code{open} and @code{read}
commands, the @code{read from "filename"} command is no longer needed.

@item
The @code{read} commands may be used instead of conventional Perl syntax
in almost every circumstance.

@item
@code{draw isopycnal .value. unlabelled} is now called
@code{draw isopycnal unlabelled $value}.

@item
The @code{set line cap} and @code{set line join} commands now have
English indications of the styles, instead of numerical codes.

@item
@code{draw label whiteunder "\label" at .x. .y. [cm]} is now written
@code{draw label "$label" whiteunder at $x $y [cm]}.

@item
@code{hsb} color-space is  now called @code{hsv}, in keeping with many
graphics texts (and to make the 'v' not seem like a 'b' for blue) 

@item
The @code{new} and @code{delete} Gri commands are not available in Gre.
Mostly, Gri users employed these commands to get the equivalent of the
Gre command @code{my} @xref{My}, so that most Gri programs won't
suffer upon conversion.  (Note: the conversion script 
@c HTML <A HREF="ftp://ftp.phys.ocean.dal.ca/users/kelley/gre/gri2gre">
_GRI2GRE_
@c HTML </A>
does not handle @code{new} and @code{delete} properly.)

@item
Some internal variables have been renamed.  @code{..linewidthaxis..} and
@code{..linewidthsymbol..} are now @code{$_linewidth_axis} and
@code{$_linewidth_symbol}. 

@item
@code{query} does not accept restriction lists yet -- but it will
someday.

@item
@code{draw circle} is not available, since it can be handled with the 
command @code{draw symbol circ}; this conversion is done automatically
by 
@c HTML <A HREF="ftp://ftp.phys.ocean.dal.ca/users/kelley/gre/gri2gre">
_GRI2GRE_
@c HTML </A>

@end enumerate


@c HTML <!-- newfile History.html "Gre: History" "History" -->

@node   History, Plans, Gri programmers, Top
@comment  node-name,  next,  previous,  up
@chapter History of Gre

@cindex history

The _PNAME_ version-numbering scheme is quite standard, borrowing from
the Linux methodology.  It is worth a moment of explanation.  _PNAME_
version numbers comprise three integers separated by decimal points
(e.g. @code{_VERSION_}).

The @emph{first digit} (@code{0} in the present example) represents the
major version number.  This number changes infrequently, perhaps once in
a couple of years, and indicates very significant changes to _PNAME_.

The @emph{second digit} (@code{1} in the present example) plays two
roles.  The first role is natural: higher values indicate more recent
releases.  The second role, borrowed from Linux, is more clever:
odd-numbered values indicate that the version is undergoing rapid
development.  New features may be added and then modified or even
deleted.  In the Linux parlance, the version is said to be ``unstable.''
Such odd-numbered versions should only be used by those who feel
comfortable being on the bleeding edge of software development.
However, if the second digit is an even number, the version is said to
be ``stable.''  This means that the features are frozen, with the only
changes occuring being bug fixes.

The @emph{third digit} is updated for each and every release within a
so-called ``stream.''  Thus, versions @code{0.1.1}, @code{0.1.2}, etc.,
are said to be within the unstable stream numbered @code{0.1}.  It is
common for unstable streams to have many releases, often several a week,
so that the last digit can get up to high numbers (50 or more).  By
contrast, the the stable streams have many fewer updates (usually fewer
than 5 or so).

@section Unstable (developmental) stream 0.3.x

No versions yet.

@section Stable stream 0.2.x

@noindent @strong{Version 0.2.2} 2000-jun-29
@itemize @minus
@item Fix bug in interpolation of synonyms into strings.
@end itemize

@noindent @strong{Version 0.2.1} 2000-may-8
@itemize @minus
@item Clean up installation scripts.
@item Make user-written textual subroutines work correctly.
@end itemize

@noindent @strong{Version 0.2.0} 2000-may-6
@itemize @minus
@item Identical to version 0.1.45, except for the version number.  One
of the main things that this version lacks, compared to what is
envisioned as the final _PNAME_ version, is decent and stable support
for images.  Since adding image support may be a slow process, this
0.2.x stream is intended as a sort of landing on a staircase.
@end itemize


@section Unstable (developmental) stream 0.1.x

@noindent @strong{Version 0.1.45} 2000-may-4
@itemize @minus
@item Add @code{set x axis unknown} and same for y axis.
@end itemize


@noindent @strong{Version 0.1.44} 2000-may-3
@itemize @minus
@item Add @code{set y axis decreasing} and @code{set y axis increasing}, and 
analogously for the x-axis; @xref{Set x axis}.
@item Change so that the numbers on axes all have same number of digits
after the decimal point.
@item Clean a bug in regular expression matching, which prevented recognition
of the @code{^} character as a flag denoting the beginning of a string;
@xref{Comparing Textual Items With Regular Expressions}.
@end itemize


@noindent @strong{Version 0.1.43} 2000-apr-30
@itemize @minus
@item Change copyright date to 2000 ... a few months late!
@item Improve discussion of version-numbering scheme in the manual.
@item Fix bug that made @code{make test} (invocation of the test suite,
normally done only by power users) fail, due to directory renaming in
recent version.
@end itemize


@noindent @strong{Version 0.1.42} 2000-apr-29
@itemize @minus
@item Change the Makefile in the @file{proj} directory (which creates map 
projections) to remove a mysterious bug that occurs on some Solaris
computers.
@end itemize



@noindent @strong{Version 0.1.41} 2000-apr-26
@itemize @minus
@item Add ability to use any punctuation character in string-edit 
constructs, e.g. @code{$name =~ s:foo:bar:} can be used instead of
@code{$name =~ s/foo/bar/}.  The advantage is that this permits editing
of the @code{/} character.  @xref{Modifying Strings}.
@end itemize

@noindent @strong{Version 0.1.40} 2000-apr-18
@itemize @minus
@item Change location of files from the @file{/opt/...} directory
to more standard locations.  For an example, what used to be
@file{/opt/gre/bin/gre} is now @file{/usr/bin/gre}.  This is more
consistent with the linux OS.
@item Use OS-installed subroutines to check for NaN and Inf, if 
these subroutines are available.
@end itemize

@noindent @strong{Version 0.1.39} 2000-apr-15
@itemize @minus
@item Fix bug in memory allocation of image colormaps.
@item Change placement of titles so that less space is wasted 
(@pxref{Draw title}).
@end itemize

@noindent @strong{Version 0.1.38} 2000-mar-14
@itemize @minus
@item Add assignment of lists to vectors, e.g. @code{@@v = (1,2);}.
@end itemize

@noindent @strong{Version 0.1.37} 2000-mar-10
@itemize @minus
@item Make @code{draw grid} obey @code{set color}.
@end itemize

@noindent @strong{Version 0.1.36} 2000-feb-17
@itemize @minus
@item
Add @code{my $x,$y;} and @code{my ($x,$y);} styles.
@item
Trying to get @code{skip} working.
@end itemize

@noindent @strong{Version 0.1.35} 2000-feb-15
@itemize @minus
@item
Fixed two sample files that were broken (@file{sound_speed.gre} and
@file{TS.gre}) because they used a version of @code{my} that isn't
supported right now.
@item
Remove bug in @file{subs.cpp} that was revealed in version 2.95.2 of the
gcc compile; the changed source still compiles fine in the author's
version 2.91.66 of this compiler.
@end itemize

@noindent @strong{Version 0.1.34} 2000-feb-12
@itemize @minus 
@item
Add iso-latin-1 font support for European languages which have accents
over/under letters.  Selection of font ``encoding'' is now available
with the @code{set font encoding} command @pxref{Set font encoding}.
@end itemize


@noindent @strong{Version 0.1.34} 1999-oct-25
@itemize @minus 
@item
Fix bug in @code{set image range} that didn't record the top end of the range.
@end itemize

@noindent @strong{Version 0.1.33} 1999-sep-24
@itemize @minus 
@item
Fix bug in @code{draw x box plot} and @code{draw y box plot} that made
it not realize that data existed.
@item
Remove @code{log()} subroutine, added in version 0.1.31, because it
was confusing even me!  Stick to @code{ln()} and @code{log10()}, which 
make sense to everybody.
@end itemize

@noindent @strong{Version 0.1.32} 1999-Jul-27
@itemize @minus 
@item
Relax requirement for parentheses surrounding the expression in
@code{if} statements, @code{while} loops, etc.  However, the @code{for}
loop still needs it!
@end itemize

@noindent @strong{Version 0.1.31} 1999-Jul-20
@itemize @minus 
@item
Fix bug making @code{glob} fail @xref{Glob}.
@item
Add @code{length()} @xref{Builtin functions that take one argument}.
@item
Improve manual discussion of mathematical efficiency and precision.
@item
Improve parse-time error messages.
@item
Add @code{log()} @xref{Builtin functions that take one argument}.  (Removed
in version 0.1.33.)
@end itemize


@noindent @strong{Version 0.1.30} 1999-jul-14
@itemize @minus 
@item
Add @code{unlink} function @ref{Builtin functions that take more than two arguments}.
@item
Add @code{my @@arrayname}
@item
Added @code{Bugs} chapter to manual @xref{Bugs}.
@item
Improved scope-resolution of @code{my} variables @xref{My}.
@item
Add @code{-d 8} option, mainly for developer's debugging work
@xref{Commandline options}.

@end itemize

@noindent @strong{Version 0.1.29}
@itemize @minus 
@item
Add @code{=~} operator for modifying text-valued scalar variables
@xref{Modifying Strings}.
@end itemize


@noindent @strong{Version 0.1.28} 1999-jun-26
@itemize @minus 
@item
Add 
@item
If clipping is on, ensure that contours extend to edges of clipping box.
NOTE: this introduces a new bug: labels may be messed up this way though
(since they may be drawn, invisibly, outside the box); another version
will get rid of this bug.
@end itemize

@noindent @strong{Version 0.1.27} 1999-jun-16
@itemize @minus 
@item
Add @code{draw grid} @xref{Draw grid}.
@item
Fix bug in @code{read grid x|y} that made it think non-empty files were
empty.
@item
Tweak manual so that it compiles in the version of @code{texinfo} that
comes with redhat-linux version 6.0.
@item
Remove bug in which post-increment and post-decrement operators yield
the values from @emph{after} the opertion, not before.
@end itemize

@noindent @strong{Version 0.1.26}
@itemize @minus 
@item
Add @code{draw filled contour}.  This is a TEST VERSION ONLY, and may
not work properly.  It is also NOT documented yet.  Finally, I am not
sure the syntax will remain as it is; I may make it be
@code{draw contour filled} instead.

At any rate, the below is a demo file:
@example
 set x grid 0 1 0.1;
 set y grid 1 2 0.25;
 open(IN, "test.dat-2") or die;
 read grid data IN;
 draw axes;
 set color red;   draw filled contour 1.5;
 #set color black;draw contour 1.5;
 set color green; draw filled contour 2;
 #set color black;draw contour 2;
 set color brown; draw filled contour 2.5;
 #draw contour 1.5 2.5 0.5;
@end example
for datafile, @file{test.dat-2}, that is:
@example
2 1 0 0 0 1 2 1 0 0 1
3 2 0 0 0 2 3 2 0 0 2
2 1 0 0 0 1 2 1 0 0 1
0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0
@end example
Note that this example tests: (1) multiple peaks; (2) peaks that
interesect one side; (3) peaks that intersect two sides.  

@end itemize

@noindent @strong{Version 0.1.25}
@itemize @minus
@item Add skeleton for filled contours.  The new command may be called
@code{draw filled contour}, or something like that, but in any case it
is @emph{not} working yet.
@item
In Postscript driver, prevent needless repetition of commands to set the
pen color.  For a text-intensive, text-only application, this reduces
file size by a factor of 3.
@end itemize


@noindent @strong{Version 0.1.24}
@itemize @minus
@item
Add @code{set image colorscale} @xref{Set image colorscale}.
@item
Add @code{draw image} @xref{Draw}.
@item
Add @code{print image} @xref{Print}.
@item
Add @code{convert grid to image} @xref{Convert grid to image}.
@item
Speed up @code{glob} by using POSIX.2 @code{glob} library call, if it is
installed @xref{Glob}.  Also, fix bug that occured for globs that
returned no matches.
@end itemize



@noindent @strong{Version 0.1.23}
@itemize @minus
@item
Fix bug in @code{glob} @xref{Glob}.  At the same time, lay groundwork
for proper perl-style lists.
@end itemize


@noindent @strong{Version 0.1.22}
@itemize @minus
@item
Add ability to assign to variables in @code{my} commands @xref{My}.
Remove ability to give @code{my} lists of variables ... this ability
will be added back later.
@end itemize


@noindent @strong{Version 0.1.21}
@itemize @minus
@item
Add @code{set flag}.
@item
Make @code{open} recognize filenames ending in @code{.Z}, and first
uncompress them with the unix @code{uncompress} program.
@item
Make @code{open} recognize filenames ending in @code{.gz}, and first
uncompress them with the GNU @code{gunzip} program.
@item
Ensure that any temporary files are removed no matter how _PNAME_ exits
(except for a core-dump).
@end itemize


@noindent @strong{Version 0.1.20}
@itemize @minus
@item
Fix bug in which @code{set dash} (without keyword @code{on}) didn't set
to dashed lines.
@end itemize

@noindent @strong{Version 0.1.19}
@itemize @minus
@item

Change so that @code{0} is written with same format as other numbers, on
the y axis.  (This removes a remnant from Gri, which had to do with
rounding artifacts, artifacts which seem to have disappeared in recent
versions.)
@item
Fix bug in which various @code{draw} commands didn't obey clipping exactly
near the edges of the clipping domain.
@item
Fix bug in which @code{draw polygon} and @code{draw line} that caused
automatic drawing of axes even for centimeter-based coordinates.
@end itemize


@noindent @strong{Version 0.1.18}
@itemize @minus
@item
While drawing strings, insert a thinspace (1/6-th width of character
@code{m}) after math-mode italicized strings, if next item is a
closing-parenthis or a non-mathmode character.
@item
Move axes autoscaling from @code{read columns} into the @code{draw}
commands.  This removes a bug that prevented autoscaling for columns
created (or modified) by loops.
@item
Add @code{set clip to curve} @xref{Set clip}.
@item
Add @code{pscomment} @xref{Pscomment}.
@end itemize

@noindent @strong{Version 0.1.17}
@itemize @minus
@item
Add @code{draw arc} @xref{Draw arc}.
@item
Add @code{s///} mechanism. @xref{Modifying Strings}.
@item
Add @code{draw polygon} @xref{Draw polygon}.
@end itemize

@noindent @strong{Version 0.1.16}
@itemize @minus
@item
Add @code{new page} @xref{New Page}.
@item
Add matching for regular expressions 
@xref{Comparing Textual Items With Regular Expressions}.
@item
Recognize @code{package} keyword ... but don't obey it yet @xref{Package}.
@item
Planned: make @code{package} localization work on @code{$}-style
variables.  Note: must not localize @code{$ARGV}, @code{$_}, and all
variables beginning with @code{$_}).
@item
Planned: make @code{package} localization work on @code{@@}-style
variables.
@item
Add @code{use} command @xref{Use}, allowing incorporation of modules.
@end itemize



@noindent @strong{Version 0.1.15}
@itemize @minus
@item
Port to the @code{egcs} compiler.
@item
Add linux-style processing of commandline options, including long-names
and aliasing @xref{Commandline options}.
@item
Add @code{ROWS} option to @code{read columns} @xref{Read columns}.
@item
Add web-delivered files for use in the @code{open} command @xref{Open}.
@end itemize


@noindent @strong{Version 0.1.14}
@itemize @minus
@item
Add @code{set arrow type} command @xref{Set arrow type}.
@item
Change behavior of @code{-e} option to match Perl language, i.e. make it
ignore a commandfile, even if one is present @xref{Commandline options}.
@item
Add @code{rand_gaussian()} subroutine, to create random numbers with
Gaussian distribution @xref{Builtin functions that take no arguments}.
@item
Add @code{sprintf} subroutine @xref{Printing Into Strings}.
@item
Add @code{pow} subroutine @xref{Builtin functions that take two arguments}.
@item
Add @code{-L} commandline option @xref{Commandline options}, for
controlling system startup file @xref{System startup file}.
@end itemize

@noindent @strong{Version 0.1.13} 
@itemize @minus
@item
Add @code{read grid} commands @xref{Read}.
@item
Add @code{erf()} and @code{erfc()} mathematical functions.
@end itemize

@noindent @strong{Version 0.1.12} 
@itemize @minus
@item
Speed up @code{set map projection} by making it internal instead of a
system-call @xref{Set map projection}.  This also reduced requirement to
have @code{set map projection} on the system.
@item
Add @code{set clip rectangle}
@item
Allow embedded newlines in strings, and handle in @code{print} (but not
in drawing commands ... yet).
@item
Add unix-like back-tick capability to strings @xref{System}.
@item
Add @code{set missing value} @xref{Set missing value}.
@item
Add @code{set page} command @xref{Set page}.
@end itemize

@noindent @strong{Version 0.1.11} 
@itemize @minus
@item
Add @code{set map projection} support to
@code{draw curve}, @code{draw symbol}, and @code{draw line from}.
@item
Add @code{$ARGV} vector to hold command-line arguments.
@item
Add @code{-p} command-line option.
@end itemize


@noindent @strong{Version 0.1.10}
@itemize @minus
@item
Add @code{set map projection} command and related
subroutines -- but not support in the various drawing commands.
@end itemize

@noindent @strong{Version 0.1.9}
@itemize @minus
@item
add @code{?} and @code{:} operator pair
@item
add @code{rewind} subroutine
@item
add @code{printf}
@item
add @code{$_time}
@end itemize


@noindent @strong{Version 0.1.8}
@itemize @minus
@item
add @code{regress}
@item
add @code{draw arrows}
@item
add @code{set arrow size}
@item
add @code{set u scale}
@item
add @code{set u scale}
@item
add @code{set symbol size}
@item
add @code{draw curve filled}
@item
add @code{draw curve overlying}
@item
add beginnings of @code{draw contour}
@item
use English, rather than numeric, codes in @code{set line cap}
and @code{set line join} 
@item
add all @code{draw x/y box plot}
@item
add @code{set image range}
@item
prepare for @code{delete} command (NOT DONE YET!!)
@item
add @code{axis|symbol|all} option to @code{set line width}
@end itemize



@noindent @strong{Version 0.1.7}
@itemize @minus
@item
add all gri-like @code{draw axis} styles
@item
change @code{draw arrow} to match gri syntax
@item
rename @code{draw line connecting}
as @code{draw line from} to match gri
@item
add @code{text_ascent}, @code{text_descent}, and @code{text_width}
@item
add @code{draw box}
@item
extend @code{draw label} to match gri
@item
add @code{draw x axis} and @code{draw y axis}
@item
allow @code{default} in @code{set font size}
@item
allow @code{default} in @code{set line width}
@end itemize


@noindent @strong{Version 0.1.6}
@itemize @minus
@item
prevent redefinition of existing cmds
@item
add @code{sw_alpha()} function
@item
add @code{sw_beta()} function
@item
add @code{sw_spice()} function
@end itemize


@noindent @strong{Version 0.1.5}
@itemize @minus
@item
add @code{sw_lapse_rate()} function
@item
add @code{sw_salinity()} function
@item
rename all @code{eos_} functions as @code{sw_} functions
@item
add @code{set contour format}
@item
add @code{set contour label position}
@end itemize



@noindent @strong{Version 0.1.4}
@itemize @minus
@item
new method for variable interpolation
@item
add @code{sw_freezing_temperature} function
@end itemize



@noindent @strong{Version 0.1.3}
@itemize @minus
@item
switch from gri-like string mathmode, $...$, to \(...\), to
not collide with variable interpolation syntax.
@item
add @code{set line join}.
@item
add @code{draw isopycnal}.
@item
add @code{reorder columns randomly}.
@item
add @code{set clip on} and @code{set clip off}
@item
add @code{glob} (not understood outside @code{foreach}, yet)
@item
add sw_density and eos_potential_temperature functions
@item
allow @code{open} filenames to be pipe commands
@item
add @code{print columns}
@item
add @code{print grid}
@item
add @code{draw arrow}
@item
add @code{draw label}
@item
rationalize code to speed compilation
@item
warn if filehandle not in upper-case
@item
improve accuracy of PostScript bounding-box
@item
add @code{set x|y grid}
@end itemize


@noindent @strong{Version 0.1.2}
@itemize @minus
@item
allow e.g. @code{$#vname} as an lvalue (not documented yet)
@item
make many commands coerce strings to numeric and vice-versa
@item
add @code{set x|y format}
@item
make @code{split} attach proper symbol-table item (bug fix)
@end itemize


@noindent @strong{Version 0.1.1} - add enough to allow crude x-y plots
@itemize @minus
@item
add e.g. @code{$vector[$index]++}
@item
add e.g. @code{$vector[$index]--}
@item
add @code{draw line connecting}
@item
add @code{draw symbol}
@item
add @code{draw title}
@item
add @code{set line width rapidograph}
@item
add @code{draw curve filled}
@item
add @code{set symbol size}
@item
add @code{draw symbol}
@item
add @code{draw symbol "name"}
@item
add @code{set graylevel}
@item
add @code{set tic size}
@item
add @code{set tics in|out}
@item
add @code{ls} and @code{cd}
@end itemize



@noindent @strong{Version 0.1.0}
@itemize @minus
@item
add @code{chomp}
@item
allow @code{chop} and @code{chomp} to take variable_name as arg
@item
add @code{set x|y type}
@item
make @code{set dash} work (all forms)
@item
add @code{set font to $name}
@item
make @code{chop()} be a subroutine
@item
add @code{set font size}
@item
add @code{set color "name"}
@item
add @code{set color hsv}
@item
add @code{set color rgb}
@item
make ps filename be correct
@end itemize


@c HTML <!-- newfile Plans.html "Gre: Plans" "Plans" -->

@node   Plans, Bugs, History, Top
@comment  node-name,  next,  previous,  up
@chapter Plans for Gre

@cindex plans
@cindex future of gre

Planned new features of _PNAME_ include the following.  The order of the
list does not represent the order in which the plans will be carried
out.  Indeed, if there is something you particularly want done, from this
list or otherwise, please email me at
@c HTML <A HREF="mailto:Dan.Kelley@Dal.CA"> 
<_AUTHOR_EMAIL_>.
@c HTML </A>

@enumerate
@item Add more Gri commands, especially image commands.
@item Make images by 16-bit (or 24-bit?) instead of Gri's 8-bit.  This
may be done using the PNG library.
@item Add full ``package'' support @xref{Package}, and then add
packages for (1) properties of seawater, (2) timeseries analysis, etc.
@item Add ``low S'' timeseries filtering, as in the S+ and R languages.
@item Add @code{my @@vector_name} syntax.
@item Allow @code{split} to take arguments.
@item Allow newlines in strings, for multi-line labels and titles.  Syntax 
will probably be like the following
@c QUIETEXAMPLE draw title "Blue line: theory\nRed line: observation";
@item Improve aesthetics of axes by ensuring same number of decimal places
used in each numeric label.
@end enumerate


@c HTML <!-- newfile Bugs.html "Gre: Bugs" "Bugs" -->
@node   Bugs, Concept Index, Plans, Top
@comment  node-name,  next,  previous,  up
@chapter Bugs
@cindex reporting bugs
@cindex bugs, how to report
@cindex bugs, list of

Please report _PNAME_ bugs to the author, Dan Kelley
@c HTML <A HREF="mailto:Dan.Kelley@Dal.CA"> 
<_AUTHOR_EMAIL_>.
@c HTML </A>

Known bugs include the following.  The name of the bug is taken from the
date, in year/month/day format, followed by a digit (0, 1, 2, ...)
indicating sequence number, in case more than one bug was found on that
day.  (I'm presuming that no day has more than 10 bugs!!)

@itemize @bullet
@item
@emph{199905010} (1999-May-1) line numbers for errors are sometimes wrong.

@item
@emph{199907040} (1999-July-4) @code{print variables} is inaccurate if
@code{my} variables are used.

@item
@emph{199907031} (1999-July-3) Sometimes -- but not always -- the
message @code{sh:: command not found} is printed by _PNAME_.  This
appears to have no bad effects.  The author has learned, by trial and
error, that it occurs when trying to run a commandfile with implied
suffix, instead of naming the commandfile in full.

@item
@emph{199907030} (1999-July-3): @code{print variables} is confused about
scope-resolution for @code{my} variables.  This may indicate a deeper
bug.

@end itemize



@c HTML <!-- newfile ConceptIndex.html "Gre: Concept Index" "Concept Index" -->

@node   Concept Index, Index of Commands, Bugs, Top
@comment node-name, next, previous, up
@unnumbered Index, general
@printindex cp

@c ???? Kludge: hard-wired chapter-number

@c HTML <h1>9: Concept index</h1>
@c HTML <!--
@node   Index of Commands, Index of Variables, Concept Index, Top
@comment node-name, next, previous, up
@unnumbered Index of Commands
@printindex fn

@node   Index of Variables,  , Index of Commands, Top
@comment  node-name,  next,  previous,  up
@unnumbered Index of Built-in Variables and Synonyms
@printindex vr

@summarycontents
@contents
@bye

@c HTML -->
